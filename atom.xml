<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-03-12T06:21:41.179Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Tim Chan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Notes on Chainlink Bootcamp 2024 (10 Days)</title>
    <link href="http://example.com/2024/03/12/Web3/chainlink_bootcamp2024/"/>
    <id>http://example.com/2024/03/12/Web3/chainlink_bootcamp2024/</id>
    <published>2024-03-12T05:55:30.000Z</published>
    <updated>2024-03-12T06:21:41.179Z</updated>
    
    <content type="html"><![CDATA[<ul><li>| <a class="link"   href="https://lu.ma/qoqfl19p?tk=9Sn8RD" >Chainlink Bootcamp 2024<i class="fas fa-external-link-alt"></i></a></li></ul><h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h2><p>- </p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;| &lt;a class=&quot;link&quot;   href=&quot;https://lu.ma/qoqfl19p?tk=9Sn8RD&quot; &gt;Chainlink Bootcamp 2024&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/l</summary>
      
    
    
    
    <category term="技能-修行-进步-Web3" scheme="http://example.com/categories/%E6%8A%80%E8%83%BD-%E4%BF%AE%E8%A1%8C-%E8%BF%9B%E6%AD%A5-Web3/"/>
    
    
    <category term="chainlink, solidity, web3" scheme="http://example.com/tags/chainlink-solidity-web3/"/>
    
  </entry>
  
  <entry>
    <title>人生建立系统，而不是目标</title>
    <link href="http://example.com/2024/03/10/%E8%AE%A4%E7%9F%A5-%E4%BF%AE%E8%A1%8C-%E5%B9%B3%E8%A1%A1/build-system-not-goal/"/>
    <id>http://example.com/2024/03/10/%E8%AE%A4%E7%9F%A5-%E4%BF%AE%E8%A1%8C-%E5%B9%B3%E8%A1%A1/build-system-not-goal/</id>
    <published>2024-03-10T08:32:30.000Z</published>
    <updated>2024-03-10T08:39:57.538Z</updated>
    
    <content type="html"><![CDATA[<h2 id="人生建立系统，而不是目标"><a href="#人生建立系统，而不是目标" class="headerlink" title="人生建立系统，而不是目标"></a>人生建立系统，而不是目标</h2><p>| 目标有助于确定你的方向，而系统最有助于取得进展。- James Clear 《原子习惯》作者</p><ul><li><h2 id="什么是系统？"><a href="#什么是系统？" class="headerlink" title="什么是系统？"></a>什么是系统？</h2></li><li><h2 id="什么是目标？"><a href="#什么是目标？" class="headerlink" title="什么是目标？"></a>什么是目标？</h2></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a class="link"   href="https://www.youtube.com/watch?v=RppBZk7OvDM&t=224s&ab_channel=NebulaPKM" >一个将改变你生活的观点，建立系统而不是目标-Neula PKM<i class="fas fa-external-link-alt"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;人生建立系统，而不是目标&quot;&gt;&lt;a href=&quot;#人生建立系统，而不是目标&quot; class=&quot;headerlink&quot; title=&quot;人生建立系统，而不是目标&quot;&gt;&lt;/a&gt;人生建立系统，而不是目标&lt;/h2&gt;&lt;p&gt;| 目标有助于确定你的方向，而系统最有助于取得进展。- Ja</summary>
      
    
    
    
    <category term="技能-修行-平衡" scheme="http://example.com/categories/%E6%8A%80%E8%83%BD-%E4%BF%AE%E8%A1%8C-%E5%B9%B3%E8%A1%A1/"/>
    
    
    <category term="建立系统" scheme="http://example.com/tags/%E5%BB%BA%E7%AB%8B%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>fundme dapp开发</title>
    <link href="http://example.com/2024/03/06/Web3/solidity/03-fundme_dapp/"/>
    <id>http://example.com/2024/03/06/Web3/solidity/03-fundme_dapp/</id>
    <published>2024-03-06T02:02:30.000Z</published>
    <updated>2024-03-06T02:16:08.546Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><ul><li>在学习完solidity的基础知识后的第一个实践项目。</li></ul><ol><li>捐款项目主要功能<ol><li>任何人可以进行捐款，捐款有最低额度限制</li><li>只有合约部署者能进行提款</li><li>使用的是ETH&#x2F;USD，需要导入chainlink预言机查找eth实时价格</li></ol></li><li>本项目中涉及的solidity知识：<ol><li>库（library）的使用</li><li>接口（interface）的使用</li><li>关键字payable的使用, transfer, send, call三种方法的区别，receive() external payable{} 和 fallback() external payable{}</li><li>关键字internal和external的用法</li><li>address(this).balance，msg.sender msg.value</li><li>如何优化gas，例如使用constant，immutable等关键字定义相关变量，custom error</li><li>emit日志使用方法</li><li>chainlink预言机的调用</li></ol></li></ol><h2 id="项目UML图"><a href="#项目UML图" class="headerlink" title="项目UML图"></a>项目UML图</h2><ul><li><img src="/img/wuweiwu/fundme_dapp/uml.png" alt="UML"></li></ul><h2 id="chainlink预言机的调用"><a href="#chainlink预言机的调用" class="headerlink" title="chainlink预言机的调用"></a>chainlink预言机的调用</h2><ul><li><a href="/2024/03/01/Web3/solidity/chainlink_study/" title="chainlink学习">chainlink学习</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;项目背景&quot;&gt;&lt;a href=&quot;#项目背景&quot; class=&quot;headerlink&quot; title=&quot;项目背景&quot;&gt;&lt;/a&gt;项目背景&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在学习完solidity的基础知识后的第一个实践项目。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;捐款项目主要功能</summary>
      
    
    
    
    <category term="技能-修行-进步-Web3" scheme="http://example.com/categories/%E6%8A%80%E8%83%BD-%E4%BF%AE%E8%A1%8C-%E8%BF%9B%E6%AD%A5-Web3/"/>
    
    
    <category term="solidity" scheme="http://example.com/tags/solidity/"/>
    
  </entry>
  
  <entry>
    <title>chainlink学习</title>
    <link href="http://example.com/2024/03/01/Web3/solidity/chainlink_study/"/>
    <id>http://example.com/2024/03/01/Web3/solidity/chainlink_study/</id>
    <published>2024-03-01T04:22:30.000Z</published>
    <updated>2024-03-13T02:45:23.635Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a class="link"   href="https://chain.link/" >chainlink official<i class="fas fa-external-link-alt"></i></a><br><font color="red"> ChatGPT生成： </font> Chainlink 是一个去中心化的预言机网络，旨在连接区块链智能合约与外部数据源、API 和传统金融市场。它的目标是解决区块链智能合约无法直接获取外部数据的问题，从而使得智能合约能够更加智能和功能丰富。</li></ul><h3 id="主要特点和功能包括："><a href="#主要特点和功能包括：" class="headerlink" title="主要特点和功能包括："></a>主要特点和功能包括：</h3><ol><li><p><strong>外部数据接入：</strong> Chainlink 允许区块链智能合约访问外部的数据源，包括网络 API、传感器数据、天气数据、金融市场数据等。这些数据可以用于触发智能合约的执行或影响其状态。</p></li><li><p><strong>数据验证和可信性：</strong> Chainlink 提供了一套机制来验证外部数据的真实性和可信度，以确保数据的准确性和安全性。这包括使用多个数据源、数据签名、可信执行环境等技术。</p></li><li><p><strong>可编程性和灵活性：</strong> Chainlink 允许开发人员根据自己的需求定义和部署预言机网络，从而实现各种不同类型的数据访问和验证。它提供了灵活的合约编程接口和工具，使开发人员能够根据应用场景定制预言机网络。</p></li><li><p><strong>安全和去中心化：</strong> Chainlink 采用去中心化的设计和安全机制，确保数据访问和验证的安全性和可靠性。它使用区块链技术和密码学算法来保护数据的安全，并通过分散化的节点网络来提供服务。</p></li><li><p><strong>可扩展性和互操作性：</strong> Chainlink 的设计具有良好的可扩展性和互操作性，可以与各种不同的区块链平台和智能合约系统集成，实现跨链数据访问和交互。</p></li></ol><ul><li>总的来说，Chainlink 是一个重要的基础设施项目，为区块链智能合约提供了可靠的外部数据访问和验证机制，推动了区块链技术在金融、保险、供应链等领域的应用和发展。</li></ul><hr><h2 id="让我们开始吧"><a href="#让我们开始吧" class="headerlink" title="让我们开始吧"></a>让我们开始吧</h2><ul><li>官网开发者文档6大板块功能</li><li><img src="/img/wuweiwu/chainlink/what/chainlink-dev-frame.png"></li></ul><h3 id="Data-Feeds-喂价"><a href="#Data-Feeds-喂价" class="headerlink" title="Data Feeds 喂价"></a>Data Feeds 喂价</h3><ul><li>业务流程</li><li><img src="/img/wuweiwu/chainlink/what/business_flow.png"></li><li>技术架构</li><li><img src="/img/wuweiwu/chainlink/what/technical_frame.png"></li></ul><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><ul><li><a class="link"   href="https://www.youtube.com/watch?v=NpfRX4jTA8M&ab_channel=Chainlink" >Chainlink产品讲解-Frank<i class="fas fa-external-link-alt"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;link&quot;   href=&quot;https://chain.link/&quot; &gt;chainlink official&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;font color=&quot;red&quot;&gt; </summary>
      
    
    
    
    <category term="技能-修行-进步-Web3" scheme="http://example.com/categories/%E6%8A%80%E8%83%BD-%E4%BF%AE%E8%A1%8C-%E8%BF%9B%E6%AD%A5-Web3/"/>
    
    
    <category term="chainlink" scheme="http://example.com/tags/chainlink/"/>
    
  </entry>
  
  <entry>
    <title>openzeppelin学习</title>
    <link href="http://example.com/2024/03/01/Web3/solidity/openzepplin_study/"/>
    <id>http://example.com/2024/03/01/Web3/solidity/openzepplin_study/</id>
    <published>2024-03-01T04:22:30.000Z</published>
    <updated>2024-03-01T04:41:47.297Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a class="link"   href="https://www.openzeppelin.com/" >openzeppelin official<i class="fas fa-external-link-alt"></i></a><br><font color="red"> ChatGPT生成： </font> OpenZeppelin 是一个开源的智能合约库和开发框架，它提供了一系列已经经过安全审计和测试的通用智能合约，帮助开发人员构建安全、可靠的去中心化应用（DApps）和智能合约。</li></ul><h3 id="主要功能和特点包括："><a href="#主要功能和特点包括：" class="headerlink" title="主要功能和特点包括："></a>主要功能和特点包括：</h3><ol><li><p><strong>安全的智能合约：</strong> OpenZeppelin 提供了一系列经过审计和测试的智能合约，涵盖了代币标准（如 ERC-20、ERC-721）、众筹合约、权限管理、多重签名钱包等常用的智能合约模块。这些合约已经被广泛使用，并得到了社区的认可和信任。</p></li><li><p><strong>模块化设计：</strong> OpenZeppelin 的智能合约库采用了模块化的设计，使得开发人员可以根据自己的需求选择性地使用其中的部分功能。这样可以提高代码的可重用性和可维护性。</p></li><li><p><strong>安全审计：</strong> OpenZeppelin 的智能合约经过了严格的安全审计和测试，以确保合约的安全性和可靠性。它们经过了专业的安全团队的审查，并且经过了时间的验证，已被广泛应用于生产环境中。</p></li><li><p><strong>社区支持：</strong> OpenZeppelin 拥有一个庞大的开发者社区，其中包括了来自世界各地的开发者、安全专家和区块链爱好者。开发者可以在社区中分享经验、提出问题、提交问题报告和贡献代码。</p></li><li><p><strong>开发工具和文档：</strong> OpenZeppelin 提供了丰富的开发工具和文档，包括代码示例、开发指南、安全建议等，帮助开发人员快速入门和使用 OpenZeppelin 的智能合约库。</p></li></ol><ul><li>总的来说，OpenZeppelin 是一个功能丰富、安全可靠的智能合约库和开发框架，为开发人员提供了构建安全、可靠的去中心化应用的重要工具和资源。</li></ul><hr><h2 id="让我们开始吧"><a href="#让我们开始吧" class="headerlink" title="让我们开始吧"></a>让我们开始吧</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;link&quot;   href=&quot;https://www.openzeppelin.com/&quot; &gt;openzeppelin official&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;font </summary>
      
    
    
    
    <category term="技能-修行-进步-Web3" scheme="http://example.com/categories/%E6%8A%80%E8%83%BD-%E4%BF%AE%E8%A1%8C-%E8%BF%9B%E6%AD%A5-Web3/"/>
    
    
    <category term="openzeppelin" scheme="http://example.com/tags/openzeppelin/"/>
    
  </entry>
  
  <entry>
    <title>停一停 心呼吸 每日銘言 202403</title>
    <link href="http://example.com/2024/03/01/%E8%AE%A4%E7%9F%A5-%E4%BF%AE%E8%A1%8C-%E5%B9%B3%E8%A1%A1/%E5%BF%83%E9%9D%92%E5%B9%B4-202403/"/>
    <id>http://example.com/2024/03/01/%E8%AE%A4%E7%9F%A5-%E4%BF%AE%E8%A1%8C-%E5%B9%B3%E8%A1%A1/%E5%BF%83%E9%9D%92%E5%B9%B4-202403/</id>
    <published>2024-03-01T01:01:33.000Z</published>
    <updated>2024-03-13T01:14:22.939Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>日期</th><th>銘言</th></tr></thead><tbody><tr><td>3月13号</td><td><img src="/img/wuweiwu/zen_sayings/2024/03/13-min.jpg"></td></tr><tr><td>3月12号</td><td><img src="/img/wuweiwu/zen_sayings/2024/03/12-min.jpg"></td></tr><tr><td>3月11号</td><td><img src="/img/wuweiwu/zen_sayings/2024/03/11-min.jpg"></td></tr><tr><td>3月10号</td><td><img src="/img/wuweiwu/zen_sayings/2024/03/10-min.jpg"></td></tr><tr><td>3月9号</td><td><img src="/img/wuweiwu/zen_sayings/2024/03/9-min.jpg"></td></tr><tr><td>3月8号</td><td><img src="/img/wuweiwu/zen_sayings/2024/03/8-min.jpg"></td></tr><tr><td>3月6号</td><td><img src="/img/wuweiwu/zen_sayings/2024/03/6-min.jpg"></td></tr><tr><td>3月5号</td><td><img src="/img/wuweiwu/zen_sayings/2024/03/5-min.jpg"></td></tr><tr><td>3月4号</td><td><img src="/img/wuweiwu/zen_sayings/2024/03/4-min.jpg"></td></tr><tr><td>3月3号</td><td><img src="/img/wuweiwu/zen_sayings/2024/03/3-min.jpg"></td></tr><tr><td>3月2号</td><td><img src="/img/wuweiwu/zen_sayings/2024/03/2-min.jpg"></td></tr><tr><td>3月1号</td><td><img src="/img/wuweiwu/zen_sayings/2024/03/1-min.jpg"></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;日期&lt;/th&gt;
&lt;th&gt;銘言&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;3月13号&lt;/td&gt;
&lt;td&gt;&lt;img src=&quot;/img/wuweiwu/zen_sayings/2024/03/13-min</summary>
      
    
    
    
    <category term="认知-修行-平衡" scheme="http://example.com/categories/%E8%AE%A4%E7%9F%A5-%E4%BF%AE%E8%A1%8C-%E5%B9%B3%E8%A1%A1/"/>
    
    
    <category term="佛学" scheme="http://example.com/tags/%E4%BD%9B%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>solidity高级主题</title>
    <link href="http://example.com/2024/02/28/Web3/solidity/02-solidity%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98/"/>
    <id>http://example.com/2024/02/28/Web3/solidity/02-solidity%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98/</id>
    <published>2024-02-28T07:01:30.000Z</published>
    <updated>2024-03-03T03:10:01.979Z</updated>
    
    <content type="html"><![CDATA[<h2 id="高级主题目录"><a href="#高级主题目录" class="headerlink" title="高级主题目录"></a>高级主题目录</h2><h3 id="继承-inheritance"><a href="#继承-inheritance" class="headerlink" title="继承 inheritance"></a>继承 inheritance</h3><ul><li>Solidity继承<ul><li>关键字is，合约继承父合约</li><li>对于变量和函数，如果父合约中的权限是private则不能被子合约继承</li><li>对于变量，如果父合约中的权限是internal和public，则能被子合约继承，而如果是external时就不能继承</li><li>对于函数，如果父合约中的权限是internal和public, 则能被子合约继承，而如果是external时也能继承，但是在调用时使用的是：this.functionName()</li></ul></li><li><font color="red"> ChatGPT生成： </font> Internal Protected：<ul><li>Solidity 0.8.0 版本引入了 internal protected 关键字修饰符，用于在派生合约中继承父合约的 internal 变量。这样的变量在父合约中是 internal 访问权限，但在派生合约中则是 protected 访问权限。</li><li>示例：internal protected uint256 myVariable;</li></ul></li></ul><h3 id="接口-interface"><a href="#接口-interface" class="headerlink" title="接口 interface"></a>接口 interface</h3><ul><li>Solidity接口<ul><li>无法实现任何功能</li><li>可以继承其他接口</li><li>所有声明的函数必须是外部的</li><li>无法声明构造函数, 无法声明状态变量</li></ul></li></ul><h3 id="库函数-library"><a href="#库函数-library" class="headerlink" title="库函数 library"></a>库函数 library</h3><ul><li>Solidity库函数，一种函数集合-library<ul><li>库与合约类似，但你不能声明任何状态变量，也不能发送以太币。</li><li>库的目的是重用代码，库的函数可以被其他合约调用。</li><li>如果所有库函数都是内部的，则库将嵌入到合约中。否则，必须在部署合约之前部署并链接库。</li></ul></li></ul><h3 id="多态-polymorphism"><a href="#多态-polymorphism" class="headerlink" title="多态 polymorphism"></a>多态 polymorphism</h3><ul><li>Solidity多态</li></ul><h3 id="异常处理-exception"><a href="#异常处理-exception" class="headerlink" title="异常处理 exception"></a>异常处理 exception</h3><ul><li>Solidity异常处理</li></ul><h3 id="安全性-security"><a href="#安全性-security" class="headerlink" title="安全性 security"></a>安全性 security</h3><ul><li>Solidity安全性</li></ul><h3 id="日志-log"><a href="#日志-log" class="headerlink" title="日志 log"></a>日志 log</h3><ul><li>event(), emit()</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;高级主题目录&quot;&gt;&lt;a href=&quot;#高级主题目录&quot; class=&quot;headerlink&quot; title=&quot;高级主题目录&quot;&gt;&lt;/a&gt;高级主题目录&lt;/h2&gt;&lt;h3 id=&quot;继承-inheritance&quot;&gt;&lt;a href=&quot;#继承-inheritance&quot; class=&quot;</summary>
      
    
    
    
    <category term="技能-修行-进步-Web3" scheme="http://example.com/categories/%E6%8A%80%E8%83%BD-%E4%BF%AE%E8%A1%8C-%E8%BF%9B%E6%AD%A5-Web3/"/>
    
    
    <category term="solidity" scheme="http://example.com/tags/solidity/"/>
    
  </entry>
  
  <entry>
    <title>什么是视觉语言？</title>
    <link href="http://example.com/2024/02/27/%E6%8A%80%E8%83%BD-%E4%BF%AE%E8%A1%8C-%E8%BF%9B%E6%AD%A5-%E5%BD%B1%E8%A7%86%E5%9B%BE%E5%83%8F/%E8%A7%86%E8%A7%89%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2024/02/27/%E6%8A%80%E8%83%BD-%E4%BF%AE%E8%A1%8C-%E8%BF%9B%E6%AD%A5-%E5%BD%B1%E8%A7%86%E5%9B%BE%E5%83%8F/%E8%A7%86%E8%A7%89%E6%A8%A1%E5%BC%8F/</id>
    <published>2024-02-27T11:43:30.000Z</published>
    <updated>2024-02-29T10:23:49.165Z</updated>
    
    <content type="html"><![CDATA[<h2 id="视觉语言-Visual-Language"><a href="#视觉语言-Visual-Language" class="headerlink" title="视觉语言-Visual Language"></a>视觉语言-Visual Language</h2><ul><li>定义：视觉语言和书面语言一样，是一种传达信息的方式，是一种视觉传达的方式。</li><li>人们常说没有既定的规则，因为通常规则都是用来打破的。(“Rules are meant to be broken.”)，但这是一个谎言，因为在视觉语言中，有很多规则是可以遵循的，这就是所谓的模式(pattern)。</li><li>Patterns have implied meanings. 模式是有隐含意义的。</li><li>视觉模式的本质就是拍摄的规则的组合。</li></ul><h2 id="视觉语言的基本元素"><a href="#视觉语言的基本元素" class="headerlink" title="视觉语言的基本元素"></a>视觉语言的基本元素</h2><h3 id="Frame-框架"><a href="#Frame-框架" class="headerlink" title="Frame - 框架"></a>Frame - 框架</h3><ul><li>正方形，三角形，圆形等各种框框用来突出主题，这就是框架。</li></ul><h3 id="Negative-Space-负空间"><a href="#Negative-Space-负空间" class="headerlink" title="Negative Space - 负空间"></a>Negative Space - 负空间</h3><ul><li>既然有负空间，那么就有正空间，positive space，正空间是指画面中有主题的地方。</li><li>负空间是指画面中除了主题以外的地方，有空白空间(empty space)和填充空间(fulfill space)2种，负空间可以用来辅助突出主题，这就是负空间。</li></ul><h3 id="Leading-lines-引导线"><a href="#Leading-lines-引导线" class="headerlink" title="Leading lines - 引导线"></a>Leading lines - 引导线</h3><ul><li>定义：引导线是指画面中的线条，用来引导观众的视线，这就是引导线。(Elements in your image that direct the viewer’s eye to where you want them to look.)</li></ul><h3 id="Color-Theory-颜色理论"><a href="#Color-Theory-颜色理论" class="headerlink" title="Color Theory - 颜色理论"></a>Color Theory - 颜色理论</h3><ul><li>Hue Saturation Luminosity Temperature (HSL) - 色相 饱和度 亮度 冷暖色 </li><li>color model - 色彩模型<ul><li>YMCK 通常在打印时使用 - 黄 青 洋红 黑</li><li>RGB 通常在数位显示器上使用 - 红 绿 蓝</li><li>sRGB 标准RGB</li></ul></li><li>由于不同文化对颜色的理解不同，所以颜色的意义也不同。以下是一些常见的颜色的意义：</li><li><img src="/img/wuweiwu/photography/visual-lang/01-color-meaning.jpg" alt="general color meaning"></li><li>Color harmoney - 色彩和谐 <a class="link"   href="https://color.adobe.com/create/color-wheel" >adobe color<i class="fas fa-external-link-alt"></i></a><ul><li>Analogous - 相似色</li><li>Complementary - 互补色</li><li>Monochromatic - 单色</li></ul></li></ul><h3 id="Constract-对比度"><a href="#Constract-对比度" class="headerlink" title="Constract - 对比度"></a>Constract - 对比度</h3><ul><li>tonal contrast - 色调对比</li><li>color contrast - 色彩对比</li><li>conceptual contrast - 概念对比</li></ul><h3 id="Visual-hierarchy-视觉层次"><a href="#Visual-hierarchy-视觉层次" class="headerlink" title="Visual hierarchy - 视觉层次"></a>Visual hierarchy - 视觉层次</h3><ul><li>内容异常的主观</li></ul><h3 id="Scale-尺度"><a href="#Scale-尺度" class="headerlink" title="Scale - 尺度"></a>Scale - 尺度</h3><ul><li>参考点</li></ul><h3 id="Composition-and-position-构图和位置"><a href="#Composition-and-position-构图和位置" class="headerlink" title="Composition and position - 构图和位置"></a>Composition and position - 构图和位置</h3><ul><li>the rule of thirds - 三分法</li><li>angle - 角度</li><li>golden ratio - 黄金比例</li></ul><h3 id="Balance-平衡"><a href="#Balance-平衡" class="headerlink" title="Balance - 平衡"></a>Balance - 平衡</h3><ul><li>可以令人放松的组合</li></ul><h3 id="Pattern-Analysis-模式分析"><a href="#Pattern-Analysis-模式分析" class="headerlink" title="Pattern Analysis - 模式分析"></a>Pattern Analysis - 模式分析</h3><p>- </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;视觉语言-Visual-Language&quot;&gt;&lt;a href=&quot;#视觉语言-Visual-Language&quot; class=&quot;headerlink&quot; title=&quot;视觉语言-Visual Language&quot;&gt;&lt;/a&gt;视觉语言-Visual Language&lt;/h2&gt;&lt;</summary>
      
    
    
    
    <category term="技能-修行-进步-影视图像" scheme="http://example.com/categories/%E6%8A%80%E8%83%BD-%E4%BF%AE%E8%A1%8C-%E8%BF%9B%E6%AD%A5-%E5%BD%B1%E8%A7%86%E5%9B%BE%E5%83%8F/"/>
    
    
    <category term="摄影" scheme="http://example.com/tags/%E6%91%84%E5%BD%B1/"/>
    
    <category term="视觉语言" scheme="http://example.com/tags/%E8%A7%86%E8%A7%89%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>拍照原理 Photography Theory</title>
    <link href="http://example.com/2024/02/24/%E6%8A%80%E8%83%BD-%E4%BF%AE%E8%A1%8C-%E8%BF%9B%E6%AD%A5-%E5%BD%B1%E8%A7%86%E5%9B%BE%E5%83%8F/%E6%8B%8D%E7%85%A7%E5%8E%9F%E7%90%86/"/>
    <id>http://example.com/2024/02/24/%E6%8A%80%E8%83%BD-%E4%BF%AE%E8%A1%8C-%E8%BF%9B%E6%AD%A5-%E5%BD%B1%E8%A7%86%E5%9B%BE%E5%83%8F/%E6%8B%8D%E7%85%A7%E5%8E%9F%E7%90%86/</id>
    <published>2024-02-24T02:41:30.000Z</published>
    <updated>2024-02-27T14:11:56.546Z</updated>
    
    <content type="html"><![CDATA[<ul><li><em><strong>拍照的核心：对光线的控制和管理，就是曝光的程度。</strong></em></li></ul><h2 id="曝光-Exposure"><a href="#曝光-Exposure" class="headerlink" title="曝光-Exposure"></a>曝光-Exposure</h2><ul><li>曝光越多，进光量越大，画面越亮。</li><li>曝光越少，进光量越小，画面越暗。</li><li>曝光的单位是EV，EV&#x3D;光圈值+快门值+ISO值。</li></ul><h2 id="曝光三要素-Exposure-Triangle"><a href="#曝光三要素-Exposure-Triangle" class="headerlink" title="曝光三要素-Exposure Triangle"></a>曝光三要素-Exposure Triangle</h2><h3 id="快门-Shutter-Speed"><a href="#快门-Shutter-Speed" class="headerlink" title="快门-Shutter Speed"></a>快门-Shutter Speed</h3><ul><li><img src="/img/wuweiwu/photography/three-ele/shutter-speed.jpeg"></li><li>光线通过镜头进入相机的过程中，经过3个部分：镜头-&gt;快门-&gt;感光元件，而控制快门就是控制感光元件接收光线的时间。</li><li>快门越快，进光量越小，运动越清晰。</li><li>快门越慢，进光量越大，运动越模糊。</li><li>快门速度的单位是秒，1&#x2F;1000秒是快门速度，1秒是慢门速度。</li></ul><h3 id="光圈-Aperture"><a href="#光圈-Aperture" class="headerlink" title="光圈-Aperture"></a>光圈-Aperture</h3><ul><li><img src="/img/wuweiwu/photography/three-ele/aperture.jpeg"></li><li>“景深”是指当焦距对准某一点时，其前后都仍可清晰的范围。通常肖像需要小景深，风景需要大景深。</li><li>光圈越大，进光量越大，景深越小。</li><li>光圈越小，进光量越小，景深越大。</li><li>光圈大小的单位是F，F越小，光圈越大。</li><li>光圈大小的单位是F，F越大，光圈越小。</li><li>光圈大小的单位是F，F&#x3D;焦距&#x2F;光圈直径。</li></ul><h3 id="感光度-ISO"><a href="#感光度-ISO" class="headerlink" title="感光度-ISO"></a>感光度-ISO</h3><ul><li><img src="/img/wuweiwu/photography/three-ele/ISO.jpeg"></li><li>ISO越高，进光量越大，画质越差。</li><li>ISO越低，进光量越小，画质越好。</li><li>ISO的单位是ISO，100是低感光度，1600是高感光度。</li></ul><h2 id="三要素的关系"><a href="#三要素的关系" class="headerlink" title="三要素的关系"></a>三要素的关系</h2><ul><li>在快门和光圈都调正确的情况下，ISO越低，画质越好。所以通常情况下，先调快门和光圈，再调ISO。</li><li>拍照通常考虑问题的顺序：<ul><li>首先确定拍摄画面是动态的还是静态的，调节快门。</li><li>然后考虑景深的问题，如果需要大景深，就调小光圈，如果需要小景深，就调大光圈。</li><li>最后考虑画质的问题，调节ISO。</li></ul></li></ul><h2 id="Trouble-Shooting"><a href="#Trouble-Shooting" class="headerlink" title="Trouble Shooting"></a>Trouble Shooting</h2><ul><li>如果光线太暗，可以调大光圈，调慢快门，调高ISO。</li><li>如果光线太亮，可以调小光圈，调快快门，调低ISO。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a class="link"   href="https://www.sony.com/zh-cn/electronics/support/articles/00081746" >镜头的基础知识系列：光圈和景深-sony China<i class="fas fa-external-link-alt"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;拍照的核心：对光线的控制和管理，就是曝光的程度。&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;曝光-Exposure&quot;&gt;&lt;a href=&quot;#曝光-Exposure&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="技能-修行-进步-影视图像" scheme="http://example.com/categories/%E6%8A%80%E8%83%BD-%E4%BF%AE%E8%A1%8C-%E8%BF%9B%E6%AD%A5-%E5%BD%B1%E8%A7%86%E5%9B%BE%E5%83%8F/"/>
    
    
    <category term="摄影" scheme="http://example.com/tags/%E6%91%84%E5%BD%B1/"/>
    
    <category term="影像" scheme="http://example.com/tags/%E5%BD%B1%E5%83%8F/"/>
    
  </entry>
  
  <entry>
    <title>停一停 心呼吸 每日銘言 202402</title>
    <link href="http://example.com/2024/02/23/%E8%AE%A4%E7%9F%A5-%E4%BF%AE%E8%A1%8C-%E5%B9%B3%E8%A1%A1/%E5%BF%83%E9%9D%92%E5%B9%B4-202402/"/>
    <id>http://example.com/2024/02/23/%E8%AE%A4%E7%9F%A5-%E4%BF%AE%E8%A1%8C-%E5%B9%B3%E8%A1%A1/%E5%BF%83%E9%9D%92%E5%B9%B4-202402/</id>
    <published>2024-02-23T01:01:33.000Z</published>
    <updated>2024-03-02T12:27:32.320Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>日期</th><th>銘言</th></tr></thead><tbody><tr><td>2月29号</td><td><img src="/img/wuweiwu/zen_sayings/2024/02/29-min.jpg"></td></tr><tr><td>2月28号</td><td><img src="/img/wuweiwu/zen_sayings/2024/02/28-min.jpg"></td></tr><tr><td>2月27号</td><td><img src="/img/wuweiwu/zen_sayings/2024/02/27-min.jpg"></td></tr><tr><td>2月26号</td><td><img src="/img/wuweiwu/zen_sayings/2024/02/26-min.jpg"></td></tr><tr><td>2月23号</td><td><img src="/img/wuweiwu/zen_sayings/2024/02/23-min.jpg"></td></tr><tr><td>2月22号</td><td><img src="/img/wuweiwu/zen_sayings/2024/02/22-min.jpg"></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;日期&lt;/th&gt;
&lt;th&gt;銘言&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;2月29号&lt;/td&gt;
&lt;td&gt;&lt;img src=&quot;/img/wuweiwu/zen_sayings/2024/02/29-min</summary>
      
    
    
    
    <category term="认知-修行-平衡" scheme="http://example.com/categories/%E8%AE%A4%E7%9F%A5-%E4%BF%AE%E8%A1%8C-%E5%B9%B3%E8%A1%A1/"/>
    
    
    <category term="佛学" scheme="http://example.com/tags/%E4%BD%9B%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>我的情绪为何总被他人左右-读书笔记</title>
    <link href="http://example.com/2024/02/22/books/2024/first-half/%E6%88%91%E7%9A%84%E6%83%85%E7%BB%AA%E4%B8%BA%E4%BD%95%E6%80%BB%E8%A2%AB%E4%BB%96%E4%BA%BA%E5%B7%A6%E5%8F%B3/"/>
    <id>http://example.com/2024/02/22/books/2024/first-half/%E6%88%91%E7%9A%84%E6%83%85%E7%BB%AA%E4%B8%BA%E4%BD%95%E6%80%BB%E8%A2%AB%E4%BB%96%E4%BA%BA%E5%B7%A6%E5%8F%B3/</id>
    <published>2024-02-22T09:37:30.000Z</published>
    <updated>2024-02-22T10:11:29.604Z</updated>
    
    <content type="html"><![CDATA[<ol><li>一个人一直在重复3件事：thinking思考，feeling感受，acting行为，3者互相影响</li></ol><ul><li><img src="/img/books/2024-1-half/001-3things.png"></li><li>人的认知决定思考的高度，思考会产生情绪感受，同时影响人的行为。</li></ul><ol start="2"><li>一个被忽略的事实：人的焦虑抑郁或者不开心并不是当前发生的事情，而是发生的事情给你带来的感受feeling情绪，所以通常人是容易被自己的不好的感受和情绪勒索，困住自己的通常是自己的内心。</li><li>通常对人产生负面的feelings包含以下四种，被称为“致命四人组”：</li></ol><ul><li><img src="/img/books/2024-1-half/002-4bad-feelings.png"></li></ul><ol start="4"><li>它们有一个共同的副词：过分，过分是极端主义的代表。不理智的人儿都容易从一个极端走到另一个极端。</li><li>诱因ABC’s</li></ol><table><thead><tr><th>编号</th><th>具体</th><th>解析</th></tr></thead><tbody><tr><td>A</td><td>触发事件</td><td>诱因</td></tr><tr><td>B</td><td>3种病态思维方式（screw ball thinking）1. 第一种叫灾难性思维方式（catastrophic thinking）；2. 第二种病态思维方式被称作绝对论者思维方式（absolutist thinking）；3. 第三种类型的神经病想法恰好是另一个极端：合理化（rationalization）合理化就是弱反应。</td><td>过程</td></tr><tr><td>C</td><td>失当的感受和行为</td><td>结果</td></tr></tbody></table><ol start="6"><li>10中疯狂的非理性信条</li></ol><table><thead><tr><th>编号</th><th>非理性信条</th></tr></thead><tbody><tr><td>1</td><td>我太在乎别人怎么看待你。</td></tr><tr><td>2</td><td>我决不能在重要任务上失败（生意上，学业，体育项目，性生活，关系等），否则太可怕了，我无法忍受。</td></tr><tr><td>3</td><td>人和事都应该总是朝我要他们去的方向发展，如果不是，那就太糟糕、太可怕、太恐怖了，我无法忍受！</td></tr><tr><td>4</td><td>如果前面三种坏事中的任何一种出现了（如果我不讨喜或不被尊重，如果我失败了，或结果不像我想的那样好或至少过得去），我总要找个人骂骂才痛快！他们做错了，早就不该这么做，事情做得那么糟糕，一帮烂人！</td></tr><tr><td>5</td><td>假如我对即将发生的事或别人对我的看法抱有挥之不去的忧虑，当事情真发生时，定会比我想象的要好。</td></tr><tr><td>6</td><td>每个问题都有完美的解决方法，我必须立即找到这些方法！</td></tr><tr><td>7</td><td>逃避困境和责任比正视它们要容易得多。</td></tr><tr><td>8</td><td>如果我事事不投入，只保持若即若离的关注，我会永远开心。</td></tr><tr><td>9</td><td>我的过去、小时候、最近恋情和最近工作中发生的所有可怕的事造成了我此时的感觉和行为。</td></tr><tr><td>10</td><td>坏人坏事应该存在，当它们的确存在时，我真不知道该怎么办才好！</td></tr></tbody></table><ol start="7"><li>解决问题的框架REBT(Rational Emotive Behavior Therapy)，理性情绪行为疗法</li></ol><ul><li><img src="/img/books/2024-1-half/003-REBT.png"></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;一个人一直在重复3件事：thinking思考，feeling感受，acting行为，3者互相影响&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&quot;/img/books/2024-1-half/001-3things.png&quot;&gt;&lt;/li&gt;
&lt;li&gt;人的</summary>
      
    
    
    
    <category term="认知-修行-平衡" scheme="http://example.com/categories/%E8%AE%A4%E7%9F%A5-%E4%BF%AE%E8%A1%8C-%E5%B9%B3%E8%A1%A1/"/>
    
    
    <category term="自愈, 情绪管理" scheme="http://example.com/tags/%E8%87%AA%E6%84%88-%E6%83%85%E7%BB%AA%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>区块链白皮书与轶事</title>
    <link href="http://example.com/2023/09/04/Web3/%E5%8C%BA%E5%9D%97%E9%93%BE%E8%BD%B6%E4%BA%8B/"/>
    <id>http://example.com/2023/09/04/Web3/%E5%8C%BA%E5%9D%97%E9%93%BE%E8%BD%B6%E4%BA%8B/</id>
    <published>2023-09-04T04:04:30.000Z</published>
    <updated>2023-09-16T06:40:22.329Z</updated>
    
    <content type="html"><![CDATA[<h2 id="比特币白皮书"><a href="#比特币白皮书" class="headerlink" title="比特币白皮书"></a>比特币白皮书</h2><ul><li><a class="link"   href="https://drive.google.com/file/d/1FHAEj23M1Lej80pKD_RBuwDcpcqbFaLK/view?usp=sharing" >比特币白皮书-中文<i class="fas fa-external-link-alt"></i></a></li><li></li></ul><h2 id="以太坊白皮书"><a href="#以太坊白皮书" class="headerlink" title="以太坊白皮书"></a>以太坊白皮书</h2><ul><li><a class="link"   href="https://ethereum.org/zh/whitepaper/" >以太坊白皮书-中文<i class="fas fa-external-link-alt"></i></a></li></ul><h2 id="比特币“冤大头”Laszlo-Hanyecz与披萨的故事"><a href="#比特币“冤大头”Laszlo-Hanyecz与披萨的故事" class="headerlink" title="比特币“冤大头”Laszlo Hanyecz与披萨的故事"></a>比特币“冤大头”Laszlo Hanyecz与披萨的故事</h2><ul><li>2010年5月22日，著名比特币“冤大头”Laszlo Hanyecz为表父爱，用1万个比特币给女儿买了两个披萨，披萨价值41美元。这是比特币第一次实现价值转移，也是比特币史上的第一次真实交易。这些比特币如果留到现在，价值约为4.5亿美元。</li></ul><h2 id="Mt-Gox交易所的故事"><a href="#Mt-Gox交易所的故事" class="headerlink" title="Mt.Gox交易所的故事"></a>Mt.Gox交易所的故事</h2><h2 id="2023-Web3-HK峰会"><a href="#2023-Web3-HK峰会" class="headerlink" title="2023 Web3 HK峰会"></a>2023 Web3 HK峰会</h2><ul><li><p>1月份：POW’ER 2023 香港 Web3 创新者峰会（1月9-10日）</p><ul><li>内容链接：<a class="link"   href="https://www.marsbit.cc/live/24313621" >https://www.marsbit.cc/live/24313621<i class="fas fa-external-link-alt"></i></a></li></ul></li><li><p>4月份：Foresight 2023 HK (4月10日)</p><ul><li>内容链接：<a class="link"   href="https://as.alltuu.com/album/1455240419/1350344075/" >https://as.alltuu.com/album/1455240419/1350344075/<i class="fas fa-external-link-alt"></i></a> <a class="link"   href="https://foresightnews.pro/event/event2023" >https://foresightnews.pro/event/event2023<i class="fas fa-external-link-alt"></i></a></li></ul></li><li><p>4月份：HK Web3 festival 2023(香港web3嘉年华)（4月12-15日）</p><ul><li>内容链接：<a class="link"   href="https://group.hashkey.com/cn/newsroom/hong-kong-web3-festival-2023-event-summary" >https://group.hashkey.com/cn/newsroom/hong-kong-web3-festival-2023-event-summary<i class="fas fa-external-link-alt"></i></a></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;比特币白皮书&quot;&gt;&lt;a href=&quot;#比特币白皮书&quot; class=&quot;headerlink&quot; title=&quot;比特币白皮书&quot;&gt;&lt;/a&gt;比特币白皮书&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;link&quot;   href=&quot;https://drive.google.com</summary>
      
    
    
    
    <category term="技能-修行-进步-Web3" scheme="http://example.com/categories/%E6%8A%80%E8%83%BD-%E4%BF%AE%E8%A1%8C-%E8%BF%9B%E6%AD%A5-Web3/"/>
    
    
    <category term="区块链" scheme="http://example.com/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>3天回顾web3学习3周(8/7-8/27)</title>
    <link href="http://example.com/2023/08/25/Web3/3day-renew-web3-august/"/>
    <id>http://example.com/2023/08/25/Web3/3day-renew-web3-august/</id>
    <published>2023-08-25T03:49:30.000Z</published>
    <updated>2023-08-29T02:48:34.694Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h2><h3 id="为什么我会学习这门课程？"><a href="#为什么我会学习这门课程？" class="headerlink" title="为什么我会学习这门课程？"></a>为什么我会学习这门课程？</h3><p>-《moledao基建之周8周课程》 因为我目前身处自我转型，我想学习Web3相关知识，加上自己AI的相关工作经验，为自己的未来做准备。以我在AI工作的经验中，越是基础的就越有话语权，越是基础的就越能够在未来的发展中有更多的选择。所以我入门web3首选的是基础设施，但是基础设施是一个很大的范畴，所以我希望从这门课程入手，了解web3的基础设施是什么，以及如何搭建基础设施。</p><h3 id="整个web3圈子的分类"><a href="#整个web3圈子的分类" class="headerlink" title="整个web3圈子的分类"></a>整个web3圈子的分类</h3><ul><li>矿圈：寻求基础算力的突破</li><li>币圈：资本的操作</li><li>链圈：寻求基础设施的突破</li><li>鄙视链：链圈（技术清高）-&gt; 矿圈（算力清高）-&gt; 币圈（资本清高），但是现实世界资本话语权最高，哈哈😄</li></ul><h3 id="web3存在的不可能三角关系"><a href="#web3存在的不可能三角关系" class="headerlink" title="web3存在的不可能三角关系"></a>web3存在的不可能三角关系</h3><ul><li>去中心化</li><li>高性能</li><li>高安全性</li></ul><h3 id="web3的系统架构"><a href="#web3的系统架构" class="headerlink" title="web3的系统架构"></a>web3的系统架构</h3><ul><li><img src="/img/wuweiwu/3day-renew-web3/web3-structure.png"></li></ul><h3 id="区块链基础"><a href="#区块链基础" class="headerlink" title="区块链基础"></a>区块链基础</h3><ul><li>区块链有下列特征：<ul><li>去中心化，分布式，数据库，账本 </li><li>区块链的本质是一个分布式的记账本</li><li>分布式P2P协议 </li><li>密码学：数字签名，哈希函数</li><li>共识算法：POW，POS，DPOS，PBFT，RAFT，POA，POE，POI，POB</li><li>分叉 &#x2F; 双花</li></ul></li><li>区块链有下列用途：<ul><li>信任</li><li>自治性</li><li>去中介化</li></ul></li></ul><h3 id="智能合约"><a href="#智能合约" class="headerlink" title="智能合约"></a>智能合约</h3><ul><li>什么是智能合约<ul><li>一段代码，部署到区块链上，可以实现自动化的执行，不可篡改，不可停止，不可拦截</li><li>代码部署到区块链上，就是智能合约</li><li>智能合约是一种特殊的账户，可以接收交易，可以发送交易，可以存储数据，可以执行代码</li><li>智能合约的代码是不可篡改的，一旦部署，就不可修改</li></ul></li><li>以太坊<ul><li>以太坊是第一个支持智能合约的区块链</li><li>以太坊的运作原理：以太坊虚拟机EVM，以太坊账户，以太坊交易，以太坊区块</li></ul></li></ul><h2 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h2><ul><li>do nothing,be happy !</li></ul><h2 id="Day-3"><a href="#Day-3" class="headerlink" title="Day 3"></a>Day 3</h2><h3 id="以太坊学习框架"><a href="#以太坊学习框架" class="headerlink" title="以太坊学习框架"></a>以太坊学习框架</h3><h4 id="以太坊白皮书"><a href="#以太坊白皮书" class="headerlink" title="以太坊白皮书"></a>以太坊白皮书</h4><ul><li>以太坊是对比特币区块链的拓展，它支持在链上运行智能合约，智能合约是一段代码，可以自动执行，不可篡改，不可停止，不可拦截，它可以实现更多的功能。</li><li>以太坊内置的加密货币是以太币（ETH）。</li><li>以太坊运行在一个去中心化的虚拟机上，这个虚拟机叫做以太坊虚拟机（EVM），EVM是一个图灵完备的虚拟机，它可以运行任何代码。</li><li>以太坊的共识算法是POS，它的区块时间是15秒，区块大小是1M，每个区块的gas限制是8M，gas是以太坊的计价单位，每个操作都需要消耗一定的gas，gas的价格是由矿工决定的，矿工可以自由决定每个gas的价格，矿工会优先打包gas价格高的交易。</li><li>上海升级：以太坊的拓展方案，创建了一个“上海分叉”，允许用户转移他们的ETH和通过解绑获得的奖励。简而言之，就是要让以太坊更加灵活、易用和用户友好。</li></ul><h4 id="智能合约部署的过程："><a href="#智能合约部署的过程：" class="headerlink" title="智能合约部署的过程："></a>智能合约部署的过程：</h4><ul><li>1.编写智能合约代码sol</li><li>2.编译智能合约代码 byte code + abi</li><li>3.ether.js &#x2F; web3.js 编写包装和运行程序</li><li>4.运行在EVM的实例中，部署并广播到以太坊网络中</li></ul><h4 id="EVM的运行原理"><a href="#EVM的运行原理" class="headerlink" title="EVM的运行原理"></a>EVM的运行原理</h4><ul><li>EVM &#x3D; 运行交易、执行操作和更新区块链状态的虚拟机，所有操作的通货是gas fee。</li><li>EVM 使用基于堆栈的虚拟机架构，这意味着它将数据存储在堆栈中，并使用堆栈中的数据执行指令。</li><li>EVM 有一组 256 位寄存器，用于存储当前程序计数器、堆栈指针和内存指针等数据。</li><li>EVM 使用一种名为 EVM bytecode 的字节码语言，这是一种专为 EVM 设计的高度优化的低级语言。</li><li><a class="link"   href="https://www.evm.codes/?fork=shanghai" >An Ethereum Virtual Machine Opcodes Interactive Reference<i class="fas fa-external-link-alt"></i></a></li><li>总结来说，我们编写的智能合约代码最终会变成一串opcode，每个opcode指定EVM的一种操作，EVM会根据这些操作来执行智能合约代码。</li></ul><h4 id="学习solidity编程语言，ehther-js-x2F-web3-js"><a href="#学习solidity编程语言，ehther-js-x2F-web3-js" class="headerlink" title="学习solidity编程语言，ehther.js&#x2F; web3.js"></a>学习solidity编程语言，ehther.js&#x2F; web3.js</h4><h4 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h4><ul><li>just do it and give birth a new production.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Day-1&quot;&gt;&lt;a href=&quot;#Day-1&quot; class=&quot;headerlink&quot; title=&quot;Day 1&quot;&gt;&lt;/a&gt;Day 1&lt;/h2&gt;&lt;h3 id=&quot;为什么我会学习这门课程？&quot;&gt;&lt;a href=&quot;#为什么我会学习这门课程？&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="技能-修行-进步-Web3" scheme="http://example.com/categories/%E6%8A%80%E8%83%BD-%E4%BF%AE%E8%A1%8C-%E8%BF%9B%E6%AD%A5-Web3/"/>
    
    
    <category term="solidity" scheme="http://example.com/tags/solidity/"/>
    
  </entry>
  
  <entry>
    <title>solidity study by ChatGPT</title>
    <link href="http://example.com/2023/08/22/Web3/solidity/solidity101/"/>
    <id>http://example.com/2023/08/22/Web3/solidity/solidity101/</id>
    <published>2023-08-22T02:22:30.000Z</published>
    <updated>2024-03-01T04:19:31.948Z</updated>
    
    <content type="html"><![CDATA[<p>chenyuqing: 请生成一个学习solidity的目录。<br>GitHub Copilot: 好的，以下是一个学习Solidity的目录，供您参考：</p><h1 id="Solidity学习笔记"><a href="#Solidity学习笔记" class="headerlink" title="Solidity学习笔记"></a>Solidity学习笔记</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ul><li>Solidity简介</li><li>Solidity开发环境搭建</li><li>Solidity数据类型</li><li>Solidity运算符</li><li>Solidity控制结构</li><li>Solidity函数</li><li>Solidity事件</li><li>Solidity修饰器</li></ul><h2 id="高级主题"><a href="#高级主题" class="headerlink" title="高级主题"></a>高级主题</h2><ul><li>Solidity面向对象编程</li><li>Solidity库</li><li>Solidity接口</li><li>Solidity继承</li><li>Solidity多态</li><li>Solidity异常处理</li><li>Solidity安全性</li></ul><h2 id="智能合约开发"><a href="#智能合约开发" class="headerlink" title="智能合约开发"></a>智能合约开发</h2><ul><li>智能合约开发流程</li><li>智能合约部署</li><li>智能合约调用</li><li>智能合约测试</li><li>智能合约优化</li><li>智能合约安全</li></ul><h2 id="DApp开发"><a href="#DApp开发" class="headerlink" title="DApp开发"></a>DApp开发</h2><ul><li>DApp开发流程</li><li>DApp前端开发</li><li>DApp后端开发</li><li>DApp测试</li><li>DApp部署</li><li>DApp安全</li></ul><h2 id="Solidity生态系统"><a href="#Solidity生态系统" class="headerlink" title="Solidity生态系统"></a>Solidity生态系统</h2><ul><li>Solidity工具</li><li>Solidity框架</li><li>Solidity库</li><li>Solidity应用</li></ul><h2 id="我想学的"><a href="#我想学的" class="headerlink" title="我想学的"></a>我想学的</h2><ul><li>openzeppelin</li><li>chainlink</li></ul><p>希望这个目录能够帮助您更好地学习Solidity。如果您有任何问题或需要进一步的帮助，请随时告诉我。</p><ul><li>What are smart contracts ?<ul><li>A smart contract is a computer program or a transaction protocol which is intended to automatically execute, control or document legally relevant events and actions according to the terms of a contract or an agreement.</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;chenyuqing: 请生成一个学习solidity的目录。&lt;br&gt;GitHub Copilot: 好的，以下是一个学习Solidity的目录，供您参考：&lt;/p&gt;
&lt;h1 id=&quot;Solidity学习笔记&quot;&gt;&lt;a href=&quot;#Solidity学习笔记&quot; class=&quot;h</summary>
      
    
    
    
    <category term="技能-修行-进步-Web3" scheme="http://example.com/categories/%E6%8A%80%E8%83%BD-%E4%BF%AE%E8%A1%8C-%E8%BF%9B%E6%AD%A5-Web3/"/>
    
    
    <category term="solidity" scheme="http://example.com/tags/solidity/"/>
    
  </entry>
  
  <entry>
    <title>EVM硬核底层原理</title>
    <link href="http://example.com/2023/08/16/Web3/evm-core/"/>
    <id>http://example.com/2023/08/16/Web3/evm-core/</id>
    <published>2023-08-16T10:54:30.000Z</published>
    <updated>2023-08-17T07:35:28.747Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一问：智能合约是怎么部署到链上的？"><a href="#一问：智能合约是怎么部署到链上的？" class="headerlink" title="一问：智能合约是怎么部署到链上的？"></a>一问：智能合约是怎么部署到链上的？</h2><ul><li>字节码 bytecode：智能合约通过编译器编译后生成的二进制代码，它是一种中间代码，可以被EVM虚拟机执行。</li><li>操作码&#x2F;指令码 <a class="link"   href="https://www.ethervm.io/" >opcode<i class="fas fa-external-link-alt"></i></a>：操作码是一种特殊的字节码，它是EVM虚拟机的指令集，用于执行智能合约的逻辑。</li><li>GitHub Copilot的回答：<ul><li>GitHub Copilot: 您好！智能合约是通过将其编译为字节码(bytecode)，然后将字节码发送到区块链网络上的节点来部署的。一旦节点接收到字节码，它将创建一个合约地址，并将字节码存储在该地址下。这样，其他用户就可以通过调用该地址上的函数来与合约进行交互。</li></ul></li><li>ChatGPT的回答：</li></ul><h2 id="opcode的分类"><a href="#opcode的分类" class="headerlink" title="opcode的分类"></a>opcode的分类</h2><ul><li>GitHub Copilot: 您好！EVM虚拟机的操作码可以分为以下几类：<br>GitHub Copilot: 以下是EVM操作码按类分类的列表：</li></ul><h3 id="栈操作（Stack-Operations）17个"><a href="#栈操作（Stack-Operations）17个" class="headerlink" title="栈操作（Stack Operations）17个"></a>栈操作（Stack Operations）17个</h3><ul><li>0x80 - 0x8f: DUP1-DUP16</li><li>0x90 - 0x9f: SWAP1-SWAP16</li><li>0x58: POP</li><li>0x59: MLOAD</li><li>0x5a: MSTORE</li><li>0x5b: MSTORE8</li><li>0x50: PUSH1</li><li>0x51: PUSH2</li><li>…</li><li>0x5f: PUSH32</li><li>PUSH1 - PUSH32共32个</li></ul><h3 id="流程控制（Flow-Control）3个"><a href="#流程控制（Flow-Control）3个" class="headerlink" title="流程控制（Flow Control）3个"></a>流程控制（Flow Control）3个</h3><ul><li>0x56: JUMP</li><li>0x57: JUMPI</li><li>0x5b: JUMPDEST</li></ul><h3 id="环境信息（Environmental-Information）15个"><a href="#环境信息（Environmental-Information）15个" class="headerlink" title="环境信息（Environmental Information）15个"></a>环境信息（Environmental Information）15个</h3><ul><li>0x30: ADDRESS</li><li>0x31: BALANCE</li><li>0x32: ORIGIN</li><li>0x33: CALLER</li><li>0x34: CALLVALUE</li><li>0x35: CALLDATALOAD</li><li>0x36: CALLDATASIZE</li><li>0x37: CALLDATACOPY</li><li>0x38: CODESIZE</li><li>0x39: CODECOPY</li><li>0x3a: GASPRICE</li><li>0x3b: EXTCODESIZE</li><li>0x3c: EXTCODECOPY</li><li>0x3d: RETURNDATASIZE</li><li>0x3e: RETURNDATACOPY</li></ul><h3 id="存储和内存（Storage-and-Memory）4个"><a href="#存储和内存（Storage-and-Memory）4个" class="headerlink" title="存储和内存（Storage and Memory）4个"></a>存储和内存（Storage and Memory）4个</h3><ul><li>0x54: SLOAD</li><li>0x55: SSTORE</li><li>0x5a: MSTORE</li><li>0x5b: MSTORE8</li></ul><h3 id="数学运算（Mathematical-Operations）11个"><a href="#数学运算（Mathematical-Operations）11个" class="headerlink" title="数学运算（Mathematical Operations）11个"></a>数学运算（Mathematical Operations）11个</h3><ul><li>0x01: ADD</li><li>0x02: MUL</li><li>0x03: SUB</li><li>0x04: DIV</li><li>0x05: SDIV</li><li>0x06: MOD</li><li>0x07: SMOD</li><li>0x08: ADDMOD</li><li>0x09: MULMOD</li><li>0x0a: EXP</li><li>0x0b: SIGNEXTEND</li></ul><h3 id="比较和逻辑运算（Comparison-and-Bitwise-Logic-Operations）15个"><a href="#比较和逻辑运算（Comparison-and-Bitwise-Logic-Operations）15个" class="headerlink" title="比较和逻辑运算（Comparison and Bitwise Logic Operations）15个"></a>比较和逻辑运算（Comparison and Bitwise Logic Operations）15个</h3><ul><li>0x10: LT</li><li>0x11: GT</li><li>0x12: SLT</li><li>0x13: SGT</li><li>0x14: EQ</li><li>0x15: ISZERO</li><li>0x16: AND</li><li>0x17: OR</li><li>0x18: XOR</li><li>0x19: NOT</li><li>0x1a: BYTE</li><li>0x1b: SHL</li><li>0x1c: SHR</li><li>0x1d: SAR</li></ul><h3 id="加载和存储（Loading-and-Storing）14个"><a href="#加载和存储（Loading-and-Storing）14个" class="headerlink" title="加载和存储（Loading and Storing）14个"></a>加载和存储（Loading and Storing）14个</h3><ul><li>0x32: ORIGIN</li><li>0x33: CALLER</li><li>0x34: CALLVALUE</li><li>0x35: CALLDATALOAD</li><li>0x36: CALLDATASIZE</li><li>0x37: CALLDATACOPY</li><li>0x38: CODESIZE</li><li>0x39: CODECOPY</li><li>0x3a: GASPRICE</li><li>0x3b: EXTCODESIZE</li><li>0x3c: EXTCODECOPY</li><li>0x3d: RETURNDATASIZE</li><li>0x3e: RETURNDATACOPY</li></ul><h3 id="合约调用（Contract-Calls）10个"><a href="#合约调用（Contract-Calls）10个" class="headerlink" title="合约调用（Contract Calls）10个"></a>合约调用（Contract Calls）10个</h3><ul><li>0xf0: CREATE</li><li>0xf1: CALL</li><li>0xf2: CALLCODE</li><li>0xf3: RETURN</li><li>0xf4: DELEGATECALL</li><li>0xf5: CREATE2</li><li>0xfa: STATICCALL</li><li>0xfd: REVERT</li><li>0xff: SELFDESTRUCT</li></ul><h3 id="杂项（Miscellaneous）11个"><a href="#杂项（Miscellaneous）11个" class="headerlink" title="杂项（Miscellaneous）11个"></a>杂项（Miscellaneous）11个</h3><ul><li>0x00: STOP</li><li>0x0f: BREAKPOINT</li><li>0x3f: BLOCKHASH</li><li>0x40: COINBASE</li><li>0x41: TIMESTAMP</li><li>0x42: NUMBER</li><li>0x43: DIFFICULTY</li><li>0x44: GASLIMIT</li><li>0x45: CHAINID</li><li>0x46: SELFBALANCE</li><li>0x47: BASEFEE</li></ul><p>了解这些操作码的分类可以帮助开发者更好地理解EVM虚拟机的指令集，从而更好地编写和优化智能合约的代码。</p><h2 id="二问：如何写智能合约才能更省gas费用？"><a href="#二问：如何写智能合约才能更省gas费用？" class="headerlink" title="二问：如何写智能合约才能更省gas费用？"></a>二问：如何写智能合约才能更省gas费用？</h2><ul><li>GitHub Copilot: 在Solidity中，通常有以下几种省费用的操作码：</li></ul><ol><li><p>使用<code>view</code>和<code>pure</code>关键字：在Solidity中，如果一个函数不修改合约状态并且不访问合约存储，那么可以使用<code>view</code>或<code>pure</code>关键字来标记该函数。这样可以避免在执行函数时进行状态变更和存储访问，从而减少gas费用。</p></li><li><p>使用<code>memory</code>关键字：在Solidity中，如果一个函数需要使用临时内存来存储数据，那么可以使用<code>memory</code>关键字来标记该数据。这样可以避免在执行函数时将数据存储到合约存储中，从而减少gas费用。</p></li><li><p>使用<code>bytes32</code>类型：在Solidity中，如果一个变量需要存储一个固定长度的字节序列，那么可以使用<code>bytes32</code>类型来存储。这样可以避免使用动态数组或映射类型，从而减少gas费用。</p></li><li><p>避免重复计算和存储：在Solidity中，如果一个变量的值可以通过其他变量计算得出，那么可以避免重复计算和存储该变量的值。这样可以减少gas费用。</p></li><li><p>避免使用循环：在Solidity中，循环语句的执行会消耗大量的gas费用。因此，如果可以使用其他方式来实现相同的功能，那么应该避免使用循环语句。</p></li></ol><p>这些操作码可以帮助开发者减少智能合约的gas费用，从而提高智能合约的性能和可用性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一问：智能合约是怎么部署到链上的？&quot;&gt;&lt;a href=&quot;#一问：智能合约是怎么部署到链上的？&quot; class=&quot;headerlink&quot; title=&quot;一问：智能合约是怎么部署到链上的？&quot;&gt;&lt;/a&gt;一问：智能合约是怎么部署到链上的？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;字节码 </summary>
      
    
    
    
    <category term="技能-修行-进步-Web3" scheme="http://example.com/categories/%E6%8A%80%E8%83%BD-%E4%BF%AE%E8%A1%8C-%E8%BF%9B%E6%AD%A5-Web3/"/>
    
    
    <category term="EVM" scheme="http://example.com/tags/EVM/"/>
    
  </entry>
  
  <entry>
    <title>solidity基础知识</title>
    <link href="http://example.com/2023/08/16/Web3/solidity/01-solidity%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://example.com/2023/08/16/Web3/solidity/01-solidity%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2023-08-16T02:32:30.000Z</published>
    <updated>2024-03-01T07:24:46.953Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础知识目录"><a href="#基础知识目录" class="headerlink" title="基础知识目录"></a>基础知识目录</h2><ul><li>Solidity数据类型</li><li>Solidity运算符</li><li>Solidity控制结构</li><li>Solidity函数</li><li>Solidity事件</li><li>Solidity修饰器</li></ul><h2 id="类型和值"><a href="#类型和值" class="headerlink" title="类型和值"></a>类型和值</h2><ul><li>所有的数据类型都有默认值，如果没有赋值，就是默认值。也有一定的数值范围。</li><li>它们通常还包含增、删、改、查4个操作中的其中一个或者几个。(set&#x2F;get, push&#x2F;pop, delete)</li><li>数据类型也包含基础类型和复合类型两种。<ul><li>基础类型：整数，浮点数，布尔值，地址，字节。</li><li>复合类型：数组，枚举，结构体，映射。</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.18</span>;</span><br><span class="line"></span><br><span class="line">contract dataType&#123;</span><br><span class="line">    uint <span class="keyword">public</span> uint_min = <span class="built_in">type</span>(uint).min;</span><br><span class="line">    uint <span class="keyword">public</span> uint_max = <span class="built_in">type</span>(uint).max;</span><br><span class="line">    uint <span class="keyword">public</span> uint_def;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="keyword">public</span> int_min = <span class="built_in">type</span>(<span class="type">int</span>).min;</span><br><span class="line">    <span class="type">int</span> <span class="keyword">public</span> int_max = <span class="built_in">type</span>(<span class="type">int</span>).max;</span><br><span class="line">    <span class="type">int</span> <span class="keyword">public</span> int_def;</span><br><span class="line"></span><br><span class="line">    address <span class="keyword">public</span> addr;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">public</span> bol;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details> <summary><font color="red">点我查看图片：solidity数据类型大小范围 </font></summary><ul><li><img src="/img/wuweiwu/solidity-study/sol-datatype-1.png"></li></ul></details>- 有符号整数，无符号整数<table><thead><tr><th>类型</th><th>默认值</th><th>最小值</th><th>最大值</th></tr></thead><tbody><tr><td>int(默认: int256)</td><td>0</td><td>-2**255</td><td>2**255-1</td></tr><tr><td>int128</td><td>0</td><td>-2**127</td><td>2**127-1</td></tr><tr><td>int64</td><td>0</td><td>-2**63</td><td>2**63-1</td></tr><tr><td>int32</td><td>0</td><td>-2**31</td><td>2**31-1</td></tr><tr><td>int16</td><td>0</td><td>-2**15</td><td>2**15-1</td></tr><tr><td>int8</td><td>0</td><td>-2**7</td><td>2**7-1</td></tr><tr><td>uint(默认: uint256)</td><td>0</td><td>0</td><td>2**256-1</td></tr><tr><td>uint128</td><td>0</td><td>0</td><td>2**128-1</td></tr><tr><td>uint64</td><td>0</td><td>0</td><td>2**64-1</td></tr><tr><td>uint32</td><td>0</td><td>0</td><td>2**32-1</td></tr><tr><td>uint16</td><td>0</td><td>0</td><td>2**16-1</td></tr><tr><td>uint8</td><td>0</td><td>0</td><td>2**8-1</td></tr></tbody></table><ul><li>字节，布尔值</li></ul><table><thead><tr><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td>address</td><td>0x0…(total 40 zeros)</td></tr><tr><td>｜bool</td><td>false</td></tr></tbody></table><h2 id="数组-array（增、删、改、查）"><a href="#数组-array（增、删、改、查）" class="headerlink" title="数组 - array（增、删、改、查）"></a>数组 - array（增、删、改、查）</h2><ul><li><font color="red"> Copilot生成： </font></li><li>在memory中不能定义动态数组，不能使用push()和pop()方法</li><li>动态数组只能存在于状态变量中,stableVariable</li><li>固定数组可以存在于memory中，也可以存在于状态变量中</li><li>固定数组的长度是固定的，不能改变；动态数组的长度是动态的，可以改变</li><li>固定数组的长度是在编译时确定的，动态数组的长度是在运行时确定的</li><li>固定数组的长度是在定义数组的时候确定的，动态数组的长度是在定义数组的时候确定的，也可以在运行时确定</li></ul><h2 id="枚举-enum（改、查）"><a href="#枚举-enum（改、查）" class="headerlink" title="枚举 - enum（改、查）"></a>枚举 - enum（改、查）</h2><ul><li>枚举：是对一个对象的所有可能取到的值的集合。</li><li>set的时候，传入的参数是数字0，1，2…，如果不在枚举定义的范围内，会报错。</li><li>delete会重置默认值，默认值是枚举定义中的第一个值0。</li></ul><h2 id="结构体-struct-（增、删、改、查）"><a href="#结构体-struct-（增、删、改、查）" class="headerlink" title="结构体 - struct （增、删、改、查）"></a>结构体 - struct （增、删、改、查）</h2><ul><li>结构体：是对一个对象的所有属性的集合。</li><li>push()方法</li></ul><h2 id="映射-mapping-（增、删、改、查）"><a href="#映射-mapping-（增、删、改、查）" class="headerlink" title="映射 - mapping （增、删、改、查）"></a>映射 - mapping （增、删、改、查）</h2><ul><li>delete map[key]，不会删除value，而是把value重置为默认值了</li></ul><h2 id="函数返回值-returns"><a href="#函数返回值-returns" class="headerlink" title="函数返回值 - returns"></a>函数返回值 - returns</h2><ul><li><font color="red"> Copilot生成： </font></li><li>函数返回值可以有多个，也可以没有返回值</li><li>函数返回值可以是任何类型，包括自定义的类型</li><li>函数返回值可以是内部函数，也可以是外部函数</li><li>函数返回值可以是可见的，也可以是不可见的</li><li>函数返回值可以是常量，也可以是变量</li><li>函数返回值可以是单个值，也可以是数组，映射，结构体等复合类型</li></ul><h2 id="pure-view-关键字"><a href="#pure-view-关键字" class="headerlink" title="pure view 关键字"></a>pure view 关键字</h2><ul><li><p>view &gt; pure</p></li><li><p><font color="red"> ChatGPT生成： </font></p></li><li><p>在 Solidity 中，<code>pure</code> 和 <code>view</code> 关键字用于标识函数的状态修改行为，以便在编译时进行优化和验证。它们之间的主要区别在于函数对合约状态的访问和修改：</p><ol><li><strong><code>pure</code> 函数：</strong></li></ol><ul><li><code>pure</code> 函数声明表示函数不访问合约的状态变量，也不修改状态。它是一个纯函数，仅通过输入参数来计算并返回结果。</li><li><code>pure</code> 函数不会访问合约的存储区域，也不会调用其他合约或发送以太币。</li><li>使用 <code>pure</code> 关键字声明的函数对于调用者和其他合约的状态都是完全透明的，可以保证函数的执行结果不受外部环境的影响。</li></ul><ol start="2"><li><strong><code>view</code> 函数：</strong></li></ol><ul><li><code>view</code> 函数声明表示函数只读取合约的状态变量，而不修改状态。它也是一个纯函数，因为它不会改变合约的状态。</li><li><code>view</code> 函数可以访问合约的存储区域，但不能对其进行修改。它也不能调用其他修改状态的函数。</li><li>使用 <code>view</code> 关键字声明的函数可以在不消耗 gas 的情况下被调用，因为它们不会改变区块链的状态。</li></ul></li><li><p>总的来说，<code>pure</code> 和 <code>view</code> 关键字都用于标识函数的纯度和对状态的访问和修改行为，但<code>pure</code> 函数不允许访问状态变量，而 <code>view</code> 函数允许读取状态变量但不允许修改。</p></li></ul><h2 id="异常报错-error"><a href="#异常报错-error" class="headerlink" title="异常报错 - error"></a>异常报错 - error</h2><ul><li>gas费用：require &gt; assert &gt; error</li><li>asser()：断言，不能带说明信息，如果断言失败，会消耗所有的gas，所有的状态变量都会被重置，所以不要使用断言。一般不会用，通常在调试的时候使用。</li></ul><h2 id="修饰器-modifier"><a href="#修饰器-modifier" class="headerlink" title="修饰器 - modifier"></a>修饰器 - modifier</h2><ul><li>类似于java中的注解，可以在函数前面加修饰器，修饰器可以用来检查函数的输入，比如检查函数的调用者是否是合约的拥有者，是否是合约的管理员，是否是合约的成员等等。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.18</span>;</span><br><span class="line"></span><br><span class="line">contract PauseFuncion&#123;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">public</span> paused;</span><br><span class="line">    uint <span class="keyword">public</span> num;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">setPause</span><span class="params">(<span class="type">bool</span> _paused)</span> external </span>&#123;</span><br><span class="line">        paused = _paused;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">modifier <span class="title">whenNotPaused</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">require</span>(!paused, <span class="string">&quot;paused&quot;</span>);</span><br><span class="line">        _; <span class="comment">// _;代表被调用的代码块如果符合条件会在这里继续运行</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">inc</span><span class="params">()</span> external whenNotPaused</span>&#123;</span><br><span class="line">        <span class="comment">// require(!paused, &quot;paused&quot;);</span></span><br><span class="line">        num += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">dec</span><span class="params">()</span> external whenNotPaused</span>&#123;</span><br><span class="line">        <span class="comment">// require(!paused, &quot;paused&quot;);</span></span><br><span class="line">        num -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="payable关键字"><a href="#payable关键字" class="headerlink" title="payable关键字"></a>payable关键字</h2><ul><li><font color="red"> ChatGPT生成： </font> 在 Solidity 中，<code>payable</code> 是一个关键字，用于标记函数或变量可以接收以太币。它通常用于两个地方：</li></ul><ol><li><p><strong>函数修饰符：</strong> 使用 <code>payable</code> 修饰符标记的函数可以接收以太币。这些函数可以被其他账户发送以太币调用，并且可以执行向其他账户发送以太币的操作。</p></li><li><p><strong>合约构造函数：</strong> 在合约构造函数中，如果你想要合约在部署时接收以太币，你可以将构造函数标记为 <code>payable</code>。</p></li></ol><ul><li>以下是使用 <code>payable</code> 的两个示例：</li></ul><ol><li><strong>函数修饰符：</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract MyContract &#123;</span><br><span class="line">    // 接收以太币的函数，标记为 payable</span><br><span class="line">    function receiveEther() public payable &#123;</span><br><span class="line">        // 函数逻辑</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>在这个示例中，<code>receiveEther</code> 函数被标记为 <code>payable</code>，表示它可以接收以太币。调用这个函数时，可以通过 <code>msg.value</code> 获取发送的以太币数量。</li></ul><ol start="2"><li><strong>构造函数：</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract MyContract &#123;</span><br><span class="line">    // 合约构造函数，标记为 payable</span><br><span class="line">    constructor() payable &#123;</span><br><span class="line">        // 构造函数逻辑</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>在这个示例中，合约的构造函数被标记为 <code>payable</code>，这意味着在部署合约时可以发送以太币。在构造函数中，可以通过 <code>msg.value</code> 获取发送的以太币数量。</li></ul><h2 id="payable-中transfer-send-call-的区别"><a href="#payable-中transfer-send-call-的区别" class="headerlink" title="payable 中transfer(), send(), call()的区别"></a>payable 中transfer(), send(), call()的区别</h2><ul><li><font color="red"> ChatGPT生成： </font> 在 Solidity 中，<code>payable</code> 关键字用于标记合约函数，以表示该函数可以接收以太币。当一个合约需要处理以太币时，通常会使用 <code>transfer</code>、<code>send</code> 或 <code>call</code> 函数之一来执行支付操作。这些函数之间有一些区别，下面是它们的简要比较：</li></ul><ol><li><p><strong><code>transfer</code>：</strong></p><ul><li><code>transfer</code> 是 Solidity 中最简单的发送以太币的方法。</li><li>它是 <code>address</code> 类型的成员函数，只能发送固定的 2300 gas，并且在失败时会抛出异常（即抛出异常后所有状态改变都会被回滚）。</li><li>它被认为是比较安全的发送以太币的方式，因为它不允许发生回调（也就是说，接收方不能执行代码以影响交易的结果）。</li></ul></li><li><p><strong><code>send</code>：</strong></p><ul><li><code>send</code> 函数与 <code>transfer</code> 函数相似，但它返回一个布尔值来指示发送是否成功，而不是抛出异常。</li><li><code>send</code> 函数会发送所有可用的 gas（最多 2300 gas），但是在发送失败时不会抛出异常，而是返回 <code>false</code>。</li><li>这个函数通常用于与外部地址进行简单的支付操作，但不建议在需要确保交易原子性的情况下使用。</li></ul></li><li><p><strong><code>call</code>：</strong></p><ul><li><code>call</code> 函数是最通用的发送以太币的方法，它允许发送任意数量的 gas，并且返回一个布尔值来指示调用是否成功。</li><li><code>call</code> 函数可以传递额外的数据和设置 gas 限制，也可以捕获执行过程中的异常。</li><li>这个函数通常用于与合约进行交互，或者需要更复杂逻辑的支付操作。</li></ul></li></ol><ul><li>总的来说，<code>transfer</code> 是最简单且最安全的发送以太币的方法，适用于大多数情况。<code>send</code> 函数在需要检查支付是否成功时比较有用，但在复杂场景下不够灵活。<code>call</code> 函数是最通用的方法，可以满足各种需求，但需要更小心地处理异常情况和 gas 的使用。</li></ul><h2 id="public-internal-external-private关键字"><a href="#public-internal-external-private关键字" class="headerlink" title="public internal external private关键字"></a>public internal external private关键字</h2><h3 id="修饰变量：internal-public-private"><a href="#修饰变量：internal-public-private" class="headerlink" title="修饰变量：internal public private"></a>修饰变量：internal public private</h3><ul><li>权限开放程度：public &gt; internal &gt; private</li><li>public：公开的，自动生成getter()函数，可以在合约内部外部访问。</li><li>private: 私有的，只能在当前合约中访问，不会生成getter()函数，也不能被子合约继承。</li><li>internal：只能在当前合约或子合约中访问<ul><li><p>适用情况<font color="red"> ChatGPT生成： </font> </p></li><li><p><code>internal</code> 关键字通常用于需要在当前合约及其派生合约中共享和访问的状态变量。它提供了一种在合约内部实现继承和代码重用的方式，并且可以限制对变量的访问权限，以提高合约的安全性和封装性。</p><ul><li>以下是一些常见的情况下使用 <code>internal</code> 修饰变量的示例：</li></ul><ol><li><p><strong>共享状态数据：</strong> 如果你希望在当前合约及其派生合约中共享和访问某个状态变量的值，但不希望它被合约外部的调用者直接访问，你可以将该状态变量声明为 <code>internal</code>。</p></li><li><p><strong>内部状态追踪：</strong> 在复杂的合约中，可能会有一些状态需要在多个函数之间共享和更新。使用 <code>internal</code> 修饰的状态变量可以确保这些状态只能在合约内部被访问和修改，从而降低了出错的可能性。</p></li><li><p><strong>继承和重用：</strong> 在使用继承的合约结构中，<code>internal</code> 修饰的状态变量可以在父合约和子合约之间共享，从而实现代码的重用和扩展。子合约可以直接访问父合约中的 <code>internal</code> 变量，而不需要重新定义相同的变量。</p></li></ol><ul><li>总的来说，使用 <code>internal</code> 修饰变量可以在合约内部提供数据共享和封装的能力，同时限制对变量的访问权限，使得合约更加安全和可靠。</li></ul></li></ul></li></ul><h3 id="修饰函数-internal-external-public-private"><a href="#修饰函数-internal-external-public-private" class="headerlink" title="修饰函数: internal external public private"></a>修饰函数: internal external public private</h3><ul><li><p>权限开放程度：public &gt; internal &gt; external &gt; private</p></li><li><p>public：公开的，可以在合约内部外部访问。</p></li><li><p>private: 私有的，只能在当前合约中访问，不能被子合约继承。</p></li><li><p>internal：只能在当前合约或子合约中访问.</p></li><li><p>external：外部函数，只能在外部调用，不能在合约内部调用。</p></li><li><p><font color="red"> ChatGPT生成： </font>在 Solidity 中，<code>internal</code> 和 <code>external</code> 是用于修饰函数的访问权限的关键字，它们在修饰函数时有以下区别：</p><ol><li><p><strong>Internal（内部）：</strong></p><ul><li>使用 <code>internal</code> 关键字修饰的函数只能在当前合约及其派生合约内部调用，无法被合约外部的调用者访问。这种访问权限对于实现合约内部逻辑提供了保护和封装。</li><li>示例：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">contract MyContract &#123;</span><br><span class="line">    // 内部函数</span><br><span class="line">    function internalFunction() internal &#123;</span><br><span class="line">        // 函数逻辑</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>External（外部）：</strong></p><ul><li>使用 <code>external</code> 关键字修饰的函数只能通过外部调用方式来访问，不能在合约内部被直接调用。这种访问权限通常用于合约的接口函数，供合约外部的调用者调用。</li><li>示例：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">contract MyContract &#123;</span><br><span class="line">    // 外部函数</span><br><span class="line">    function externalFunction() external &#123;</span><br><span class="line">        // 函数逻辑</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li>总的来说，<code>internal</code> 修饰的函数适用于合约内部调用和继承，而 <code>external</code> 修饰的函数适用于合约外部调用。这两种修饰符的选择取决于你希望函数被调用的方式以及对函数的访问权限的要求。</li></ul></li></ul><h2 id="msg-关键字"><a href="#msg-关键字" class="headerlink" title="msg 关键字"></a>msg 关键字</h2><ul><li><font color="red"> ChatGPT生成： </font>在 Solidity 中，<code>msg</code> 是一个全局预定义变量，用于提供有关当前交易或消息的信息。它是一个包含以下属性的特殊对象：</li></ul><ol><li><code>msg.sender</code>：返回当前交易或消息的发送者（即合约调用者的地址）。</li><li><code>msg.value</code>：返回当前交易发送的以太币数量（以 wei 为单位）。</li><li><code>msg.data</code>：返回当前消息的数据。</li><li><code>msg.gas</code>：返回当前交易还剩余的 gas 数量。</li></ol><ul><li><p>这些属性可以在合约的函数中使用，以便根据当前交易或消息的上下文进行逻辑判断或处理。</p></li><li><p>以下是一个简单的示例，演示了如何在 Solidity 中使用 <code>msg</code>：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract MyContract &#123;</span><br><span class="line">    address public owner;</span><br><span class="line">    uint256 public valueReceived;</span><br><span class="line"></span><br><span class="line">    // 构造函数，在部署合约时设置合约的拥有者</span><br><span class="line">    constructor() &#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 接收以太币的函数</span><br><span class="line">    receive() external payable &#123;</span><br><span class="line">        // 更新接收到的以太币数量</span><br><span class="line">        valueReceived = msg.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 提取合约中的以太币的函数</span><br><span class="line">    function withdraw() external &#123;</span><br><span class="line">        require(msg.sender == owner, &quot;Only the owner can withdraw&quot;);</span><br><span class="line">        </span><br><span class="line">        // 向合约拥有者发送合约中的所有以太币</span><br><span class="line">        payable(owner).transfer(address(this).balance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在这个示例中，我们使用了 <code>msg.sender</code> 和 <code>msg.value</code> 属性：</li><li>在构造函数中，<code>owner</code> 变量被设置为部署合约的账户地址，即 <code>msg.sender</code>。</li><li>在 <code>receive</code> 函数中，接收到的以太币数量被记录在 <code>valueReceived</code> 变量中，并且该函数被标记为 <code>external</code> 和 <code>payable</code>，表示它可以接收以太币。</li><li>在 <code>withdraw</code> 函数中，我们检查调用者是否是合约的拥有者（即 <code>msg.sender == owner</code>），然后将合约中的所有以太币发送给拥有者地址。</li></ul><h2 id="address-this"><a href="#address-this" class="headerlink" title="address(this)"></a>address(this)</h2><ul><li><font color="red"> ChatGPT生成： </font>在 Solidity 中，<code>address(this)</code> 是一个特殊的表达式，用于获取当前合约的地址。它通常用于以下场景：</li></ul><ol><li><p><strong>合约内部调用：</strong> 当合约需要获取自身的地址时，可以使用 <code>address(this)</code> 表达式来获取。例如，合约可以在部署时记录自己的地址，或者在与其他合约进行交互时将自己的地址传递给它们。</p></li><li><p><strong>支付操作：</strong> 当合约需要将自己的地址作为收款地址进行支付操作时，可以使用 <code>address(this)</code> 表达式来获取。例如，在向其他地址发送以太币或者接收以太币时，合约可以使用 <code>address(this)</code> 表达式作为收款地址。</p></li></ol><ul><li>以下是一些示例，演示了 <code>address(this)</code> 的用法：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract MyContract &#123;</span><br><span class="line">    address public contractAddress;</span><br><span class="line"></span><br><span class="line">    // 构造函数，在部署时记录合约地址</span><br><span class="line">    constructor() &#123;</span><br><span class="line">        contractAddress = address(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 向指定地址发送以太币</span><br><span class="line">    function sendEther(address payable receiver) external payable &#123;</span><br><span class="line">        // 发送以太币给指定地址</span><br><span class="line">        receiver.transfer(msg.value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在这个示例中，合约在构造函数中使用 <code>address(this)</code> 表达式来获取自身的地址，并将其记录在 <code>contractAddress</code> 变量中。在 <code>sendEther</code> 函数中，合约可以使用 <code>address(this)</code> 表达式作为收款地址来接收以太币。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基础知识目录&quot;&gt;&lt;a href=&quot;#基础知识目录&quot; class=&quot;headerlink&quot; title=&quot;基础知识目录&quot;&gt;&lt;/a&gt;基础知识目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Solidity数据类型&lt;/li&gt;
&lt;li&gt;Solidity运算符&lt;/li&gt;
&lt;li&gt;Solid</summary>
      
    
    
    
    <category term="技能-修行-进步-Web3" scheme="http://example.com/categories/%E6%8A%80%E8%83%BD-%E4%BF%AE%E8%A1%8C-%E8%BF%9B%E6%AD%A5-Web3/"/>
    
    
    <category term="solidity" scheme="http://example.com/tags/solidity/"/>
    
  </entry>
  
  <entry>
    <title>solidity导语</title>
    <link href="http://example.com/2023/08/16/Web3/solidity/00-%E5%AF%BC%E8%AF%AD-solidity/"/>
    <id>http://example.com/2023/08/16/Web3/solidity/00-%E5%AF%BC%E8%AF%AD-solidity/</id>
    <published>2023-08-16T02:32:30.000Z</published>
    <updated>2024-03-01T02:20:38.167Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>Github库地址： <a class="link"   href="https://github.com/chenyuqing/solidity-by-example/tree/main" >solidity-by-example<i class="fas fa-external-link-alt"></i></a></p></li><li><p>solidity是一门编译性语言，需要经过编译器编译成字节码，然后再部署到区块链上，所以需要安装编译器，推荐使用<a class="link"   href="https://remix.ethereum.org/" >remix<i class="fas fa-external-link-alt"></i></a>在线编译器，也可以使用<a class="link"   href="https://www.trufflesuite.com/" >truffle<i class="fas fa-external-link-alt"></i></a>本地编译器，但是truffle需要安装nodejs，npm，ganache等环境，比较麻烦，所以推荐使用remix。</p></li><li><p>solidity是一门面向合约的语言，所以需要有合约的概念，合约是一种特殊的类，合约中可以定义状态变量，函数，事件，修饰器，结构体，枚举等。</p></li><li><p><img src="/img/wuweiwu/solidity-study/solidity-basic.png"></p></li></ul><h2 id="Remix-IDE"><a href="#Remix-IDE" class="headerlink" title="Remix-IDE"></a>Remix-IDE</h2><ul><li><a class="link"   href="https://remix.ethereum.org/" >remix<i class="fas fa-external-link-alt"></i></a></li><li>面板介绍<ul><li><img src="/img/wuweiwu/solidity-study/remix-ide.png"></li></ul></li></ul><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.18</span>;</span><br><span class="line">contract helloWorld&#123;</span><br><span class="line">    string <span class="keyword">public</span> _str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>代码解释<ul><li><code>// SPDX-License-Identifier: MIT</code>：开源协议</li><li><code>pragma solidity ^0.8.18;</code>：版本声明</li><li><code>contract helloWorld</code>：合约声明</li><li><code>string public _str = &quot;hello world&quot;;</code>：状态变量声明</li></ul></li></ul><h2 id="Solidity基础知识"><a href="#Solidity基础知识" class="headerlink" title="Solidity基础知识"></a>Solidity基础知识</h2><ul><li><a href="/2023/08/16/Web3/solidity/01-solidity%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/" title="solidity基础知识">solidity基础知识</a></li></ul><h2 id="Solidity高级主题"><a href="#Solidity高级主题" class="headerlink" title="Solidity高级主题"></a>Solidity高级主题</h2><ul><li><a href="/2024/02/28/Web3/solidity/02-solidity%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98/" title="solidity高级主题">solidity高级主题</a></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a class="link"   href="https://github.com/ethereum/wiki/wiki/%5B%E4%B8%AD%E6%96%87%5D-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%99%BD%E7%9A%AE%E4%B9%A6" >以太坊白皮书<i class="fas fa-external-link-alt"></i></a></li><li>极力推荐入门教程，配合食用更佳！写智能合约，节省gas费用永远放在第一位。<ul><li><a class="link"   href="https://solidity-cn.readthedocs.io/zh/develop/" >solidity中文网<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://cryptozombies.io/en/solidity" >僵尸打怪-Solidity: Beginner to Intermediate Smart Contracts<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://www.wtf.academy/solidity-start" >WTF-Solidity 101 入门<i class="fas fa-external-link-alt"></i></a></li><li>Solidity8.0全面精通-B站崔棉大师<ul><li><iframe src="//player.bilibili.com/player.html?aid=810148091&bvid=BV1E34y147JC&cid=562223215&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></li></ul></li><li><a class="link"   href="https://www.youtube.com/@thinkingchain/playlists" >理想区块链<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://www.youtube.com/@fredsolidity4455/playlists" >Fred带你学solidity<i class="fas fa-external-link-alt"></i></a></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Github库地址： &lt;a class=&quot;link&quot;   href=&quot;https://github.com/chenyuqing/solidity-by-example/tree/main&quot; &gt;solidity-by-example&lt;i class=&quot;fa</summary>
      
    
    
    
    <category term="技能-修行-进步-Web3" scheme="http://example.com/categories/%E6%8A%80%E8%83%BD-%E4%BF%AE%E8%A1%8C-%E8%BF%9B%E6%AD%A5-Web3/"/>
    
    
    <category term="solidity" scheme="http://example.com/tags/solidity/"/>
    
  </entry>
  
  <entry>
    <title>近代史大事件</title>
    <link href="http://example.com/2023/08/07/%E8%AE%A4%E7%9F%A5-%E4%BF%AE%E8%A1%8C-%E5%B9%B3%E8%A1%A1/%E4%B8%AD%E5%9B%BD%E8%BF%91%E4%BB%A3%E5%8F%B2%E5%A4%A7%E4%BA%8B%E4%BB%B6/"/>
    <id>http://example.com/2023/08/07/%E8%AE%A4%E7%9F%A5-%E4%BF%AE%E8%A1%8C-%E5%B9%B3%E8%A1%A1/%E4%B8%AD%E5%9B%BD%E8%BF%91%E4%BB%A3%E5%8F%B2%E5%A4%A7%E4%BA%8B%E4%BB%B6/</id>
    <published>2023-08-07T07:47:30.000Z</published>
    <updated>2023-08-07T10:07:03.041Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Part-1-从鸦片战争开始"><a href="#Part-1-从鸦片战争开始" class="headerlink" title="Part 1 从鸦片战争开始"></a>Part 1 从鸦片战争开始</h2><h2 id="Part-2-辛亥革命来了"><a href="#Part-2-辛亥革命来了" class="headerlink" title="Part 2 辛亥革命来了"></a>Part 2 辛亥革命来了</h2><ul><li>1911年10月10号，武昌起义来开辛亥革命序幕，清皇朝濒于灭亡</li><li>1912年1月1号晚10点，中华民国宣告成立，孙文宣誓就任临时大总统</li><li>1912年2月12日，溥仪宣布退位，孙文领导的辛亥革命推翻了清王朝</li><li>1912年2月15日，孙文宣布辞去临时大总统职务</li><li>1912年3月10日，袁世凯出任临时大总统</li><li>1913年3月20号晚10点45分，宋教仁在上海火车站被刺杀</li><li>1913年12月23日，袁世凯在天坛举行仪式，妄想称帝</li><li>1916年6月6日，袁世凯在举国声讨中死去</li><li>1917年6月14日，张勋在保皇党策动下入京</li><li>1917年7月12日，张勋复辟12天即告失败，孙文在广州发起护发运动</li><li></li></ul><h2 id="Part-3-新中国成立了"><a href="#Part-3-新中国成立了" class="headerlink" title="Part 3 新中国成立了"></a>Part 3 新中国成立了</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Part-1-从鸦片战争开始&quot;&gt;&lt;a href=&quot;#Part-1-从鸦片战争开始&quot; class=&quot;headerlink&quot; title=&quot;Part 1 从鸦片战争开始&quot;&gt;&lt;/a&gt;Part 1 从鸦片战争开始&lt;/h2&gt;&lt;h2 id=&quot;Part-2-辛亥革命来了&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="认知-修行-平衡" scheme="http://example.com/categories/%E8%AE%A4%E7%9F%A5-%E4%BF%AE%E8%A1%8C-%E5%B9%B3%E8%A1%A1/"/>
    
    
    <category term="从历史中进行学习" scheme="http://example.com/tags/%E4%BB%8E%E5%8E%86%E5%8F%B2%E4%B8%AD%E8%BF%9B%E8%A1%8C%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>成瘾始于痛苦，戒瘾终于平衡！</title>
    <link href="http://example.com/2023/08/07/books/2024/first-half/addition/"/>
    <id>http://example.com/2023/08/07/books/2024/first-half/addition/</id>
    <published>2023-08-07T04:39:30.000Z</published>
    <updated>2023-08-09T02:55:18.170Z</updated>
    
    <content type="html"><![CDATA[<p><a class="link"   href="https://youtu.be/LbbyLeR1ZRk" >read a book with me,<i class="fas fa-external-link-alt"></i></a></p><h2 id="听第一遍总结："><a href="#听第一遍总结：" class="headerlink" title="听第一遍总结："></a>听第一遍总结：</h2><ul><li>目录<ul><li><ol><li>对快乐成瘾源自于痛苦的驱使</li></ol></li><li><ol start="2"><li>成瘾以及难以戒瘾的底层原理</li></ol></li><li><ol start="3"><li>利用多巴胺机制恢复身体平衡<br>Part 1</li></ol></li></ul></li><li>人的痛苦是一种常态。痛苦和快乐是天平两边的对手，我们终将要找到一种平衡。</li><li>很多成瘾者在重复成瘾行为的时候，已经感受不到快乐，但如果不重复成瘾行为，他们会感觉非常痛苦。</li><li>在完成成瘾行为后得到短暂的多巴胺快乐，但快乐过后痛苦还在原地等着你，而且前后落差会让你觉得更痛苦。这样的痛苦反过来又促使你再次成瘾，这就是成瘾的恶性循环。</li><li>身体本身就是一个系统，根据系统思考的原理，我们可以通过调节回路来恢复身体的平衡。但同时如果我们放手不管，身体就会记着某种快乐的源泉，并且不断的去重复这种行为。</li><li>多巴胺有一种奖赏预测误差机制，就是每一次的快乐需要比上一次的快乐要的更多才能满足。这也是人所说的，欲望是越来越难以满足的。<br>Part 2</li><li>成瘾的底层原理其实就是多巴胺作祟。因为人的痛苦是一种常态，而痛苦又是驱使你去寻找快乐的动力。<ul><li><ol><li>人的快乐是由脑中的多巴胺分泌决定的，人们会追求多巴胺分泌的行为；</li></ol></li><li><ol start="2"><li>多巴胺的分泌是有限的，一旦分泌完了，由于落差你就会感觉到更痛苦；</li></ol></li><li><ol start="3"><li>多巴胺有一种奖赏预测误差机制，就是每一次的快乐需要比上一次的快乐要的更多才能满足，所以人就会不断的重复某种成瘾的行为。</li></ol></li><li><ol start="4"><li></li></ol></li></ul></li></ul><p>Part 3</p><ul><li>应对方法<ul><li><ol><li>以痛制痛</li></ol></li><li><ol start="2"><li>物理阻断</li></ol></li><li><ol start="3"><li>激进诚实</li></ol></li></ul></li></ul><h2 id="听第二遍总结："><a href="#听第二遍总结：" class="headerlink" title="听第二遍总结："></a>听第二遍总结：</h2><ul><li>为什么你会没有动力？因为你没有目标，也没有奖励回路。有了目标，把目标切割成一小段一小段，然后通过奖励来推动你一步一步完成目标。奖励就是一种动力。</li><li>重置大脑奖赏回路的时间最短需要一个月。也就是系统思考中的调节回路，通过调节回路来恢复身体的平衡。</li><li>痛苦是我们为快乐付出的代价，而快乐是我们从痛苦中获得的回报。</li><li>人都是求生的，从我们受精开始的那一刻，我们就具备了竞争力和求生的本能。</li><li>时间是最能代表民主，自由，平等的东西。有些东西是随着时间增值，有些东西是随着时间而贬值的。</li><li>坐而论道容易，要找到出路很难，也许要一生一世。</li><li>所有的系统都需要一个激励机制，来驱动系统的运转。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a class=&quot;link&quot;   href=&quot;https://youtu.be/LbbyLeR1ZRk&quot; &gt;read a book with me,&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;听第一遍总</summary>
      
    
    
    
    <category term="认知-修行-平衡" scheme="http://example.com/categories/%E8%AE%A4%E7%9F%A5-%E4%BF%AE%E8%A1%8C-%E5%B9%B3%E8%A1%A1/"/>
    
    
    <category term="成瘾戒瘾" scheme="http://example.com/tags/%E6%88%90%E7%98%BE%E6%88%92%E7%98%BE/"/>
    
  </entry>
  
  <entry>
    <title>web3基础设施八周课程</title>
    <link href="http://example.com/2023/08/04/Web3/web3%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%85%AB%E5%91%A8%E8%AF%BE%E7%A8%8B/"/>
    <id>http://example.com/2023/08/04/Web3/web3%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%85%AB%E5%91%A8%E8%AF%BE%E7%A8%8B/</id>
    <published>2023-08-04T02:52:30.000Z</published>
    <updated>2023-08-04T04:17:00.939Z</updated>
    
    <content type="html"><![CDATA[<ul><li>课程总览</li><li><img src="/img/wuweiwu/web3-8week/course-review.jpg"></li></ul><h2 id="week1a-基础知识"><a href="#week1a-基础知识" class="headerlink" title="week1a-基础知识"></a>week1a-基础知识</h2><ul><li>关键字<ul><li>中心化&#x2F;去中心化</li><li>区块链</li><li>共识机制</li><li>分叉&#x2F;之链</li><li>web3的商业：合作共赢，而是大小通吃。Inter-Operation。常言道：赢者垄断（Apple），输者竞争（卷起来）</li><li>web3的工作方式：多数是远程，以结果为导向，员工需要更多的自主性，沟通很重要</li><li>web3的运营：online，多人参与，DAO，抱着“信仰”而前进的。</li></ul></li></ul><h2 id="week1b-加密"><a href="#week1b-加密" class="headerlink" title="week1b-加密"></a>week1b-加密</h2><ul><li>全同态加密，FHE，Fully Homomorphic Encryption</li><li><img src="/img/wuweiwu/web3-8week/fhe-background.png"></li><li>zkPass，zk：zero knowledge，零知识证明</li></ul><h2 id="week1c-chainlink预言机"><a href="#week1c-chainlink预言机" class="headerlink" title="week1c-chainlink预言机"></a>week1c-chainlink预言机</h2><ul><li>关键字<ul><li>oracle，区块链上的智能合约</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;课程总览&lt;/li&gt;
&lt;li&gt;&lt;img src=&quot;/img/wuweiwu/web3-8week/course-review.jpg&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;week1a-基础知识&quot;&gt;&lt;a href=&quot;#week1a-基础知识&quot; class=&quot;h</summary>
      
    
    
    
    <category term="技能-修行-进步-Web3" scheme="http://example.com/categories/%E6%8A%80%E8%83%BD-%E4%BF%AE%E8%A1%8C-%E8%BF%9B%E6%AD%A5-Web3/"/>
    
    
    <category term="web3基础设施" scheme="http://example.com/tags/web3%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD/"/>
    
  </entry>
  
</feed>
