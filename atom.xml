<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-07-20T03:54:03.233Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Tim Chan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>何为系统思考？</title>
    <link href="http://example.com/2023/07/20/system_thinking/"/>
    <id>http://example.com/2023/07/20/system_thinking/</id>
    <published>2023-07-20T03:53:30.000Z</published>
    <updated>2023-07-20T03:54:03.233Z</updated>
    
    <content type="html"><![CDATA[<p><a class="link"   href="https://www.youtube.com/watch?v=75EOg3njVdI" >read a book with me,<i class="fas fa-external-link-alt"></i></a></p><h2 id="听第一遍总结："><a href="#听第一遍总结：" class="headerlink" title="听第一遍总结："></a>听第一遍总结：</h2><p>增强回路：因果关系，正反馈<br>调节回路：</p><p>我们终将找到一个平衡点</p><h2 id="听第二遍总结："><a href="#听第二遍总结：" class="headerlink" title="听第二遍总结："></a>听第二遍总结：</h2><ol><li>为什么我们需要系统思考？<ol><li>系统思考可以改变我们的单向思维模式，从全局看待问题；</li><li>透过现象看本质；</li><li>看清事物之间存在的延迟现象。</li></ol></li><li>如何掌握系统思考的能力？<ol><li>有且仅有2种回路：增强回路和调节回路；</li><li>回路是一种闭合的因果循环；</li><li>增强回路：事物之间的关系是正反馈的关系；</li><li>调节回路：调节因素，是一种解决问题的机制；</li><li>延迟：不能忽略时间延迟的因素，效果存在延迟性。</li></ol></li><li>工具：系统循环图<ol><li>拿出纸和笔</li><li>列出当前的问题</li><li>找原因</li><li>找后果</li><li>找回路</li><li>注意：使用名词，不实用动词，箭头是单向的</li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a class=&quot;link&quot;   href=&quot;https://www.youtube.com/watch?v=75EOg3njVdI&quot; &gt;read a book with me,&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p</summary>
      
    
    
    
    <category term="认知-修行-平衡" scheme="http://example.com/categories/%E8%AE%A4%E7%9F%A5-%E4%BF%AE%E8%A1%8C-%E5%B9%B3%E8%A1%A1/"/>
    
    
    <category term="系统思考" scheme="http://example.com/tags/%E7%B3%BB%E7%BB%9F%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>任正非：让工程师成为技术商人</title>
    <link href="http://example.com/2023/07/20/be-a-bussinessman/"/>
    <id>http://example.com/2023/07/20/be-a-bussinessman/</id>
    <published>2023-07-20T03:01:26.000Z</published>
    <updated>2023-07-20T03:43:48.937Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一节：概述"><a href="#第一节：概述" class="headerlink" title="第一节：概述"></a>第一节：概述</h2><ul><li>进入21世纪以来，市场导向已经成为绝大多数企业尤其是高科技企业的共识。但是，正如赵本山在央视春晚的小品里的表演一样：“感谢CCTV，感谢MTV，感谢TV……”然而他并不知道他嘴里说的这一大堆TV到底是什么？就像很多企业并不知道真正的市场导向是什么一样，因此，市场导向无法真正落实，空喊口号就成了大多数中国高科技企业的通病。</li><li>例如，由于缺乏真正了解市场的职能和手段，无法找到充分了解市场状况和客户需求的集成的市场营销方法，很多企业只能照顾到眼前的利益，企业经营是远远落后于市场的，客户不断流失，满意度日益降低，甚至犯了方向性的错误。</li><li>又如，随着企业的不断成长和业务的多元化，不可避免的使得产品组合和业务模型变得愈加复杂。这导致很多企业在产品开发方面反应开始变得迟缓，日益与市场脱节，运作效果和效率明显降低。</li><li>再如，由于客户需要的是一个系统的解决方案，高科技企业不可避免的从产品&#x2F;技术向服务转型，很多中国的高科技企业没有及时认识到这一点，不得不面临被整合甚至被淘汰的命运。</li><li>在种种困难和阵痛面前，企业界进行了不停的探索，其中，中国高科技企业中当之无愧的标杆——华为——率先多年寻求到了业界最佳的业务管理模型，就是建立端到端的流程，从了解市场到产品开发，再到生命周期管理，流程中的每一步都是由客户的输入牵引的，每一步都直接面对客户。<br>这种业务管理模型的核心就在于它帮助企业找到了一个最佳平衡点，即既要保持技术的领先，更要确保技术在商业运作上的成功，我们称之为技术商业化。在这个大变革、大转型中，华为总裁任正非提出了鲜明的口号：<span style="color:red">让工程师成为技术商人！</span></li><li>在全球领域，如IBM、微软等世界级领袖企业,也早就将技术商业化作为公司的战略付诸实施：<ul><li>IBM——从思考到服务，让技术走向市场，让技术满足市场与客户需求；</li><li>微软——人才战略：只找既懂技术又懂经营的精英人士。</li></ul></li><li>那么，这些领袖企业为什么不约而同的选择了这一路径，其内涵究竟是什么，它们又是如何做到这一点的？</li></ul><h2 id="第二节：技术领先企业，为何难逃衰退厄运？"><a href="#第二节：技术领先企业，为何难逃衰退厄运？" class="headerlink" title="第二节：技术领先企业，为何难逃衰退厄运？"></a>第二节：技术领先企业，为何难逃衰退厄运？</h2><ul><li>进入21世纪的前后一段时间，企业界发生了一次不可抗拒的洪流，就是那些曾经依靠技术取得领先的企业，试图继续带着技术领先的优势进入21世纪时，几乎不约而同地步入了衰落甚至消亡。</li><li>20世纪90年代的贝尔实验室和蓝色巨人IBM可以说是其中的典型。贝尔实验室代表了一个技术导向的顶尖研发机构的没落，IBM则代表了一个技术导向型的领袖企业的没落——它们的经历有着惊人的相似：依靠技术取得空前的成功，曾经非常富有，把技术的重要性摆在市场前面，以及缺乏把技术市场化的动力和能力，最终不约而同的步入没落。</li></ul><h3 id="一、贝尔实验室：从翘楚到房地产商的猎物"><a href="#一、贝尔实验室：从翘楚到房地产商的猎物" class="headerlink" title="一、贝尔实验室：从翘楚到房地产商的猎物"></a>一、贝尔实验室：从翘楚到房地产商的猎物</h3><ul><li>贝尔实验室的名气，无人不晓，在过去的近一个世纪里，贝尔实验室有11位科学家在诺贝尔奖中榜上有名，其中有位科学家验证了“宇宙大爆炸”理论。这里诞生过镭射，光纤、卫星通讯、调制解调器、太阳能电池、电子麦克风和数字式计算机等。虽然贝尔实验室获得了无数殊荣，它自身却几乎没有将相关科研成果应用到市场上并获利。AT&amp;T几乎垄断了电话通讯业务，因此钱多得数不过来。一点都不缺钱的贝尔实验室经理们从来都没有将新技术商业化的动力，进而也失去了这种能力。因此，长期以来，贝尔实验室的科研活动没有走出实验室，相关的科研成果不能及时转化为市场需要的东西。但是，美国电话电报公司1984年进行了拆分，后来朗讯科技于1996年从美国电话电报中剥离出去，从此贝尔实验室进入了动荡时期。在科技电讯业泡沫破灭及公司产品需求下降后，朗讯科技削减了对贝尔实验室的资助。人们理所当然的认为贝尔实验室将一如既往地充当商业技术研究的翘楚，然而随着母公司在市场竞争的一系列不利，实验室慢慢的丧失了影响力。研究项目逐项被砍掉，科学家相继离去，这个全球闻名的实验室变得人去楼空，“如今，贝尔实验室的走廊到处都黑乎乎。在走廊里随便看看，有一大堆的空屋子”，以至于成为房地产商收购的猎物。</li></ul><h3 id="二、IBM：带着思考走向悬崖"><a href="#二、IBM：带着思考走向悬崖" class="headerlink" title="二、IBM：带着思考走向悬崖"></a>二、IBM：带着思考走向悬崖</h3><ul><li>在IBM成立早期，老华尔森为IBM定下了一个口号“思考”，以此作为IBM的精神。这个口号引导了IBM人对科学技术的不懈探索，激起了一代又一代IBM人的技术热情。<br>带着这个口号，IBM从20世纪50年代进入计算机行业，并于80年代登上辉煌的顶峰，蓝色巨人一路高歌，以势如潮水的趋势不断扩张壮大，终于垄断了大型计算机领域。“IBM永远是第一”，IBM人对此确信不疑。</li><li>IBM在技术领先的路上一路狂跑，以至于忘记了市场环境的变化。它一味地沉迷于大型计算机市场所获得的成功，对数据设备公司、苹果公司进入个人电脑市场的个人计算机视而不见，并且将中央处理芯片CPU交给了英特尔公司，将DOS操作系统交给了微软，为自己培养了未来最为强大的敌人。</li><li>IBM将主要精力集中于对技术的思考的另一个后果是，IBM的组织机构逐步地、远远地脱离了市场，臃肿、反应迟缓、毫无创新精神。</li><li>IBM终于错失多次良机，迎来了接二连三的失败，到1992年已经是一发而不可收拾，净损失49．7亿美元，埃克斯引咎辞职，大批员工被裁减。</li><li>IBM总部的杰克-贝尔如此描述当时的情形：“我们就要从悬崖上坠落，对此我们却一无所知。”的确如此，即使在IBM跌落到最低谷的时候， IBM人依然是一帮对技术充满了幻想和崇拜的疯子，对于早已到来的外部危机毫无感觉，在一次战略会议上，刚刚入主IBM的郭士纳发现，那些高级经理们在会议上使用的技术行话、缩略语以及晦涩的术语，足以让任何人晕倒，以至于郭士纳置身其中的时候，发现身为总裁的自己纯属多余，“我宁可变成墙上的一只苍蝇”。</li><li>郭士纳重振IBM的最重要举措，就是改变IBM的这种技术至上的文化，他提出了一个新的口号——“服务”。从思考走向服务，代表着IBM从技术走向市场，对技术商业化的坚定决心。</li><li>贝尔实验室和IBM这两个不同领域的翘楚，以同样的方式取得成功，也以同样的方式衰落下去，它们身上浓缩了最近几十年来单纯依赖旧的商业模式（仅仅把成功建立在技术或产品的基础上）取得成功并不可避免的进入衰败的一代企业的经历。列在它们身后的企业名单还有很长，包括：通用汽车、加拿大北电网络、中国巨人电脑、大唐电讯…….</li><li>IBM比贝尔实验室幸运的是，它提前了十年采取行动，而韩国人金锺勋(Jeong Kim)接管贝尔实验室，成立“技术商业化”小组，提出让实验室振兴的计划时，已是2005年。</li></ul><h2 id="第三节-技术商业化模式的兴起"><a href="#第三节-技术商业化模式的兴起" class="headerlink" title="第三节 技术商业化模式的兴起"></a>第三节 技术商业化模式的兴起</h2><ul><li>此消则彼涨。曾经靠技术领先获得优势的企业逐步淡出商业舞台，取而代之的是那些在“技术商业化”方面有着卓越能力的企业。</li></ul><h3 id="一、微软的崛起"><a href="#一、微软的崛起" class="headerlink" title="一、微软的崛起"></a>一、微软的崛起</h3><ul><li>这期间，微软作为其中的代表崛起了。与其说，微软在上世纪90年代的崛起是一个商业神话，不如说，这是新商业模式适应新的市场环境的必然。微软崛起的秘诀：聘用一大批既懂技术又善于经营的高素质人才</li><li>说比尔-盖茨是一个电脑技术天才是不准确的，确切的说，他是一个深谙如何利用经营技术的天才。微软在IBM没落的同时崛起，似乎一开始就吸收了IBM的教训，即聘用一大批既懂技术又善于经营的精明的高素质人才来经营公司。微软的管理人员和工程师，似乎和比尔-盖茨是一个模板刻出来的：这些人都深刻理解软件技术以及如何将这种技术转化为市场需要的东西。</li><li>如果总裁、管理人员及工程师们真正理解他们的技术和市场，那么，公司就能始终走在别人前面，因此，微软总是能在市场激烈竞争中操作自如，叱咤风云。<br>微软公司为此专门组建了职能交叉的专家小组，以便把这种技术商业化的能力以组织的形式进行强化。</li><li>同时，微软不断的向未来进军，不断创新，并且找到了一种令技术的市场价值最大化的办法，即把大规模市场作为目标，开发出了理论上让每个家庭、每个个人均可使用的产品。</li><li>从最近二十年的全球经济进程来看，微软崛起的另一层意义在于，它引领了一批新兴企业，正式宣布了一种新的商业模式的诞生（尽管该模式非微软首创），无论是西方，还是东方，我们都可以看到，近20年，那些活跃在市场上，具有旺盛生命力的领先企业身上，都印刻着这种商业模式。</li><li>特别需要提起的是，曾一度没落的IBM，一旦真正面对自己的问题，就立刻发起了强大的变革，在技术商业化道路上，演绎了新的神话，重新站起来的蓝色巨人不但夺回了失去的市场，走到了行业的最前端，并且，在商业运作模式上更为成功，还帮助一大批企业构建了世界级水平的组织体系，其中就包括中国的华为公司。后者在短短20年时间里实现了从零到250亿美元的井喷式增长，毫无争议的跨入了世界500强之列，其速度之快，效率之高，堪称奇迹。</li></ul><h3 id="二、构建技术商业化的组织体系"><a href="#二、构建技术商业化的组织体系" class="headerlink" title="二、构建技术商业化的组织体系"></a>二、构建技术商业化的组织体系</h3><ul><li><p>这些新的世界领袖级企业的成功，似乎暗示了一条很重要的商业规律，市场和技术应该是同一个东西，反过来说，如果你不能把它们有机的结合起来，就会在竞争中收获失败。</p></li><li><p>过去几十年来，我国以市场换技术已经被证明是失败的，其失败就在于，我们误以为市场和技术是两个完全不同的东西，摸石头过河20载后才发现，市场换不来技术，技术也换不来市场。被市场充分接受的技术才是有价值的技术，富有技术含量的市场才是有生命力的市场。</p></li><li><p>当然，在如此巨大的代价下，也不是完全没有斩获，华为公司就在摸爬滚打中，最终有效地把二者融合起来，成为中国目前唯一一家在市场领域和研发领域同时具有世界级竞争力的企业，并建立了与之对应的组织运作体系。</p></li><li><p>如果以组织体系的形式对技术商业化模式进行诠释的话，那就是，构建从传统的流线型组织体系到端到端的组织体系。</p></li><li><p>传统的流线型组织，在工业时代是非常有效的，在今天的知识经济、网络经济环境下，则由于客户需求、市场竞争变化的快速性和不确定性，暴露除了一系列问题：缺乏准确、前瞻的客户需求关注，组织的前端、中端、后端衔接不畅甚至脱节，反复做无用功，浪费资源，造成高成本；没有跨部门的结构化流程，部门流程之间是靠人工衔接，运作过程割裂；组织上存在本位主义各自为政，内耗大；项目计划无效，项目实施混乱等等。</p></li><li><p>端到端组织流程则从客户需求端出发，到满足客户需求端去，提供端到端服务，端到端的输入端是市场，输出端也是市场。这个端到端非常快捷，非常有效，好比中间没有水库、没有三峡的长江，流程很顺畅。如果达到这么快速的服务，降低了人工成本，降低了财务成本，降低了管理成本，也就是降低了运作成本。其实，端到端的改革就是进行内部最简单的最科学的管理体系的改革，形成一支最精简的队伍。</p></li><li><p>常山之灵蛇，现代商业组织的榜样</p></li><li><p>说到这个端对端的组织，最好的比喻，当然是我们大家都熟悉的“常山之灵蛇”，击其首则尾至，击其尾则首至，击其中则首尾俱至。而这条灵蛇的灵，就在于它节节贯通，各个关节配合无间，没有丝毫阻滞，就像没有三峡，没有水库的长江，畅通无阻。这正是现代商业组织需要达到的境界，可以说，这常山之灵蛇，正是现代商业组织的榜样。</p></li><li><p>我们可以看到，华为的端到端组织，从战略规划，到市场，到产品开发，到销售，到工程交付等等，从头到尾，都是直接面对客户，无疑具备了常山之灵蛇的特点，可以快速应对市场和客户的各种需求和变化。</p></li></ul><h2 id="第四节：技术商业化的必然路径——让工程师成为商人"><a href="#第四节：技术商业化的必然路径——让工程师成为商人" class="headerlink" title="第四节：技术商业化的必然路径——让工程师成为商人"></a>第四节：技术商业化的必然路径——让工程师成为商人</h2><h3 id="一、技术商业化的核心在于工程师"><a href="#一、技术商业化的核心在于工程师" class="headerlink" title="一、技术商业化的核心在于工程师"></a>一、技术商业化的核心在于工程师</h3><ul><li>在传统的组织流程里，前端通常是市场销售人员，中端是技术工程师，后端是售后服务人员。<br>很明显，这样的人才结构无法适应端到端的组织流程的要求。因为前面的人不懂技术，后面的人不了解市场变化和客户需求，将前、中、后三节打通的成本非常高，也很难实现。</li><li>端对端组织流程的一个重要特点是，工程师存在于在前、中、后三节之中，并发挥核心作用，就像前面提到的常山之灵蛇一样，首、躯干、尾密切协作，共同发挥作用。这些工程师就是新型的商业工程师。</li><li>前端的工程师即是售前工程师，包括企业里通常称谓的产品经理、技术支援工程师、方案设计工程师等，其责任是方案营销（包括技术需求了解、技术牵引、方案设计、技术交流）。在这样的组织里，实际上存在两类销售人员，一类即以上所言售前工程师，另一类才是传统意义上的销售人员，负责客户信息和客户关系。</li><li>中端的工程师就是我们通常所言的研发工程师。在端到端的组织里，研发工程师与前面讲的售前工程师一样，既懂技术又懂市场。好比我们在前面微软案例里提到的，他们必须是既懂技术懂经营之道的高素质人才；华为的研发工程师也一样，都是从市场上摸爬滚打下来的。</li><li>后端的工程师包括工程项目经理、技术服务工程师等。除了传统的技术工作以外，他们还要承担更重要、更贴近客户的职责，包括：项目利润策划、服务产品设计与营销、通过对客户需求的深入了解驱动研发等等。在很多公司，后端的工程师往往被当成没人管的小孩子，但是，在端对端组织里，后端工程师的作用是极为重要的，请留意以下数据：2008年，IBM的服务收入已经占总收入的约70%，华为公司的数据为约30%！</li><li>由此可见，端到端组织有效运作的核心，在于工程师。一个组织只有具备上述所说的三类工程师，才有可能真正做到从客户需求端出发，到满足客户需求端去，提供端到端服务，两端直通，没有任何水库的阻滞。一旦建立起这样的组织，则如常山之灵蛇，击其首则尾至，击其尾则首至，击其中则首尾俱至，可以做到以不变应万变，如兵法所云：“其疾如风，其徐如林；侵掠如火，不动如山”。</li><li>一言以蔽之，让工程师成为商人！</li><li>这是从技术领先型组织蜕变为技术商业化组织的必然路径。</li></ul><h3 id="二、什么是商业工程师，商业工程师的事业是什么？"><a href="#二、什么是商业工程师，商业工程师的事业是什么？" class="headerlink" title="二、什么是商业工程师，商业工程师的事业是什么？"></a>二、什么是商业工程师，商业工程师的事业是什么？</h3><ul><li>让工程师成为商人，就是企业需要造就一大批的商业工程师。<br>任正非则把商业工程师称之为科学商人，意思是对科学技术知识进行商业经营的高素质人才。</li><li>简言之，商业工程师就是技术工程师和商人的结合者。</li><li>技术和市场、业务和商业经营，对多数人而言，是两个不同截然不同的领域，对人有着截然不同的要求。要同时掌握二者的知识和运作规则，确非易事。一流企业的高明之处就在于它们找到了这样的人才，或者通过某些不寻常的方法把上述两样东西成功的融入到员工身上。</li><li>商业工程师的来源通常是企业原有的技术工程师，当需要跨越自身的技术领域，去掌握商业经营这一新领域的知识和运作规则时，其难点主要在于如何成为商人。<br>古人认为商人就是那些能够做到“变贵贱，调余缺，度远近”的人，意即通过对不同地域的有余和不足物资的调剂，把南方的东西运输到北边以较高的价格卖出，在满足人们的要求的同时自己也获利。这里包含了商人定义的两个要点：对市场行情的敏锐把握，以及满足人们的需要。</li><li>这个定义放在今天，用于商业工程师身上，依然是非常准确的：对市场行情的敏锐把握，代表了商业工程师必须具备的商业意识；如何满足人们的需要，则代表了商业工程师满足客户需求的商业技能。</li><li>因此，技术工程师转化为商业工程师，其要点就在于如何具备商业意识和商业技能。</li><li>我们不主张如社会有些观点所言，把商业或商人等同于一味追逐利润，实践证明，那些把利润放在第一位而漠视社会民众真正需求的企业，如安然等，其成功终究是昙花一现，社会最终会选择放弃它们，因此不足以为代表，这种企业也缺乏延续的根基。正如管理大师德鲁克所言，企业存在的目的是为了满足社会的某些需要，因此确切的说，企业并不存在利润，利润只是企业正确的履行了责任之后的一个自然的结果。刻意地、不计手段地追逐利润，其结果必会适得其反。</li><li>从事业的角度讲，无论个人还是企业，不关赚多少钱，获取多少利润，并不代表就成功了，或者说事业有成了。所谓事业，不是个人，也不是一个单个组织的所谓成功，而在于其对社会的贡献程度。孔子在《易经-系辞》对事业做了非常贴切的定义：举而措之天下之民，谓之事业。就是你做的事情对天下人们都有利益，才能算事业。对于商业工程师而言，凭借自己对技术和市场的双重了解，从社会的真实需求中来，到真正满足人们的需求中去，做到了这两点，就算是在做事业。我们今天的社会，在技术主导、商业利润主导下，已经走了很远很偏了，其结果就如我们今天经历的，我们制造了一切我们所能想象和制造的东西，社会资源以飞快的速度在浪费着，日益枯竭，污染加剧；在以商业利润为基础的剧烈竞争下，人文环境也日益恶化，如今的社会整体环境日益不适合人居。了解社会的真实需求，真正满足人们的需求，既是商业工程师群体的事业，也是一份使命。</li></ul><h3 id="三、商业工程师的诞生：以技术为主体开展市场营销的优势"><a href="#三、商业工程师的诞生：以技术为主体开展市场营销的优势" class="headerlink" title="三、商业工程师的诞生：以技术为主体开展市场营销的优势"></a>三、商业工程师的诞生：以技术为主体开展市场营销的优势</h3><ul><li>华为、微软、复兴后的IBM等领袖企业的成功的同时，也完成了对企业最核心的人力资源即工程师的全新定义，传统的技术工程师成为了新型的商业工程师。<br>新型的工程师们也改变了市场营销的模式，尤其是在高科技行业。<br>在商业工程师诞生以前，企业市场营销的主体通常是营销人员；现在，市场营销的则以技术为主体展开。<br>以技术为主体展开市场营销有着传统营销无可比拟的优势。要之，有以下三点：</li><li><ol><li>真正把握市场和理解客户需求<br>技术工程师从公司内部走向市场，走向客户，会同销售人员一起，可以实现对市场需求和客户需求的真正了解。<br>高科技行业的营销不同于快速消费品营销，是解决方案的营销，具有非常高的技术含量，专业性强，要求前端的人员具备从解决方案的角度对客户需求有深刻理解的能力。当前很多高科技企业还没有完成营销模式的转型，常遇到的情况是，客户在前期往往对自己的需求未必能描述清楚，传统的销售人员又不懂技术，对企业内部的运作不甚了解，最擅长做的事情就是请客户吃饭、洗脚、打球、培训、旅游，先签下单再说，二者碰到一起，往往是瞎猫撞死耗子，签下的合同无法执行，研发说版本出不来，采购说货到不了，财务说没有现金流……甚至签下一些非常怪异的合同。<br>你见过要服务一辈子的合同吗？<br>有一家高科技企业，由于销售人员缺乏对工程服务知识和产品生命周期的理解，在与客户所签订的合同里，注明的服务期限竟然是永久。最后再加上公司内部合同审核环节的疏忽，该公司于是与客户签订了承诺服务一辈子的合同！</li></ol></li><li><ol start="2"><li>最低成本运作<br>以技术为主体展开营销，企业的营销队伍其实是由两部分组成的，一部分就是传统的销售人员，负责客户关系，一部分就是我们说的商业工程师，他们往往是研发技术或工程技术出身，对产品、解决方案有着非常透彻的了解。这两个队伍一起参与营销，从不同的角度同时与市场、客户进行深入接触，既能做到对市场趋势的准确把握，又能深刻了解客户的个性化需求，因此可以做到一开始就做正确的事情，并且一次把事情做对，相对于多数企业十次八次反反复复还不能把事情做好，这在很大程度上既节约了社会资源，也节约了企业内部资源，可以做到最低成本运作。</li></ol></li><li><ol start="3"><li>通过技术引导，达到不战而胜<br>兵法云：“胜兵，先胜而后求战”，战争的胜负不是在战场上决定的，而是在战前决定的，战前的人心向背、地形、敌我之众寡、将能与不能等因素，已经在战前就宣布了战争的胜负。历史上有名的淝水之战、官渡之战、赤壁之战等等，几乎是“胜兵，先胜而后求战”的同一个版本。<br>销售也是一样，从一个长期来看，签单往往不是在招标会上决定的，标前的一系列工作，如参展、标准引导、软文宣传、样板店、专家讲座等等，这一系列的工作，在无形中，已经让客户形成了决策。而这种引导，客观上也让客户变得更专业，可以提前做出一些业务规划方面的预测或决策，有利于形成供需双方的良性理解和良性循环。<br>反之，如果没有这些技术引导的工作，公司的销售就会陷入无休止的抢单，天天救火，疲于奔命，这恰恰是当前大多数企业的现状。<br>商业工程师积极参与市场工作，充当销售的先锋、主力，就是要让企业打有准备的仗、打胜利的仗，避免以大量资源消耗为代价的恶性竞争。<br>华为在全球布置了数千名售前工程师，他们准确地把握了海外市场的真实需求，提前做好了一系列的铺垫工作，正是他们让华为2007年、2008年的爆炸式增长成为可能，并且支撑了华为未来3-5年1000亿美金的市场。</li></ol></li></ul><h2 id="第五节-华为技术商业化之路——造就商业工程师"><a href="#第五节-华为技术商业化之路——造就商业工程师" class="headerlink" title="第五节 华为技术商业化之路——造就商业工程师"></a>第五节 华为技术商业化之路——造就商业工程师</h2><ul><li>自中国企业进入世界经济体以来，道路就极为曲折、艰辛，并且真正获得成功的企业非常少。尤其是在代表一国经济核心竞争力的高科技行业，中国的绝大多数高科技企业其实缺乏真正的技术含量，即使少数企业具备了自主研发的能力，也因为缺乏对商业运作知识和规则的理解而在走向世界的路上举步维艰。</li><li>中国的国有企业，由于资源便利，加上体制的原因，缺乏自力更生的动力，大多民营企业，则先天基础薄弱，在种种条件的挤压下，往往成长乏力。</li><li>在这种背景下，在一些缺乏资源支持，竞争极为残酷的地区（如深圳），一些企业经过艰苦卓绝的奋斗，在与世界级企业的贴身肉搏和学习过程中，率先成长起来，具备了在世界舞台上与西方企业共舞的能力。华为公司就是其中一个，它用短短20年的时间，在没有任何外部资源可依赖的条件下，自力更生，从一无所有到250亿美元，成为目前中国唯一一家在研发、市场两个领域同时具备世界级竞争力的企业，并且，它的成功绝非偶然，通过市场管理流程（MM）、集成产品开发流程（IPD）、任职资格体系的建设，在机制和人才两方面都具有了核心竞争力。</li><li>在华为的核心竞争力中，数量庞大的商业工程师队伍尤其是核心中的核心。因为西方的高科技企业巨头早已完成了商业工程师队伍的建设，因此能在全球市场叱咤风云，而中国的高科技企业，在该方面还只是刚刚起步。在很多企业还在概念、摸索、尝试阶段时，华为公司已经率先数年系统、完整地建立起了这支队伍，成为其在国内外市场称雄的秘密武器。</li><li>下面，我们就以华为公司为例，看看在华为的技术商业化进程中，商业工程师队伍是如何建立起来的。</li></ul><h3 id="一、“最幼稚的研发部门”"><a href="#一、“最幼稚的研发部门”" class="headerlink" title="一、“最幼稚的研发部门”"></a>一、“最幼稚的研发部门”</h3><ul><li>到９０年代中期的时候，华为在国内市场已经取得了空前的成功，但是也曝露出一系列的问题，产品品质不稳定，交付周期长，维护成本高，过于依赖人海战术等等，这种在国内成功的模式，根本无法在国际上立足，而如果无法走出国门，通讯行业的残酷竞争将很快把华为打回原形，华为再次面临生死抉择。华为将进行的变革的所有方面，几乎都与研发队伍有关。<br>而当年华为的研发部门，从组织体系上讲，一片迷茫和混乱；从研发工程师个体上讲，一方面如郭士纳曾描述过的IBM人，充满了自信、狂热、执着，另一方面，又如任正非描述的，像刚从青纱帐走出来的土八路，浑身是土，一点也不职业化，对面临的国际化竞争不知所措。<br>任正非曾把研发部门描述成华为最幼稚、管理最差的部门。从当年“研发部门发放呆死物料、机票”活动及一系列的反思批判会上可见一斑。<br>为了使华为研发人员能够铭心牢记“从对科研成果负责转变为对产品的市场成功负责”这句话，华为在年终将把库房里的呆滞物料打成一个个包，发给研发人员做奖状。把用户中心的飞机票（为了维修而导致的大量往返），也打成一个个包，发给中研人员做奖状，让他拿回家去对亲人说是自己得的浪费奖！<br>任正非在会议上阐述他对“从对科研成果负责转变为对产品市场成功负责”这一口号的理解：<br>“对待产品也要像对待你的儿子一样”<br>“现在在座的所有的人都必须对产品的市场成功负责，产品犹如你的儿子，你会不会只是关心你儿子的某一方面？你不会吧。一个产品能生存下来，最重要的可能不是它的功能，而只是一个螺丝钉，一根线条，甚至一个电阻。因此，需要你对待产品也要像对待你的儿子一样。”<br>结合这次活动，研发部人员举办了反思批判会，其中详细记载了华为研发的不少“幼稚”故事，而通过对这些幼稚做法的自省，华为人的思维受到的根本性的触动。兹举几例：<br>你到底是研发工程师还是售后工程师？<br>因为产品质量经常出问题，研发工程师需要在国内各城市不断穿梭往返现场解决问题，有些人几乎把天上的飞机都坐遍了。一次，某位研发工程师对一位新来的没怎么出过差的同事吹嘘，他对各种飞机型号和性能的熟练程度，结果该同事反唇相讥，“我还以为你是做售后服务的，真不敢相信，你居然是一个开发人员，是不是国内的研发都这个样子？”<br>上海市话局某部长的牢骚<br>上海市话局的某部长对华为研发的评价：“我对你们的产品很不满意，特别是对你们的态度很不满意，你们总以为你们的产品很先进，总以为是我们的维护人员水平低才出的问题。国外的机器也出问题，但是人家几个小时就定位出来，你们是东派一个高手，西派一个高手，不晓得要多少天才能定位出来……”<br>“亩产十万斤”的华为软件工程师<br>印度高级软件师每人月可以编写300行代码，华为的数据则是10000-20000行，结果就是印度的软件很稳定，华为的软件则漏洞百出……<br>就是在这样反思和批判中，华为人，特别是技术工程师们的头脑中，一种新的思维方式逐渐的孕育起来。华为技术工程师的商业意识也逐步形成。</li></ul><h3 id="二、卖出去的技术才有价值——研发是地狱之门"><a href="#二、卖出去的技术才有价值——研发是地狱之门" class="headerlink" title="二、卖出去的技术才有价值——研发是地狱之门"></a>二、卖出去的技术才有价值——研发是地狱之门</h3><ul><li>任正非对公司的研发做了一个形象的比喻：研发是地狱之门。一个公司的研发水平高还是不高，都非常有可能进入地狱，万劫不复。公司研发水平高，一方面意味着很大的投入，也许在没有收回成本以前就死掉了；另一方面，研发水平高，代表你的技术非常先进，非常超前，就容易重蹈贝尔实验室之辙，也是死路一条；公司的研发水平不高，你拿什么去和人家竞争，结局还是死。可见研发之难。<br>任正非意识到，华为必须保持技术上的优势，但是，如果死抱着一定要做世界上最先进的产品的理想，华为人能不能在市场上生存下来都成问题，就像梵高的“向日葵”，作品固然好，固然价值连城，可那都是在梵高饿死多年后的事情了。因此，华为公司的调整要以商业为导向，而不能以技术为导向，在对技术部门、技术工程师的评价体系中同样一定要以商业为导向。<br>华为的战略由此发生了根本性的变化，即从技术驱动转变为市场驱动，既要保持技术的领先，更要强调技术商业化的能力。坚决不研发“卖不掉的世界顶尖水平”，华为人认为，“卖出去的技术才有价值。”</li></ul><h3 id="三、培养技术商人而不是培养科学家：华为工程师任职资格体系"><a href="#三、培养技术商人而不是培养科学家：华为工程师任职资格体系" class="headerlink" title="三、培养技术商人而不是培养科学家：华为工程师任职资格体系"></a>三、培养技术商人而不是培养科学家：华为工程师任职资格体系</h3><ul><li>要增强公司技术商业化的能力，做到卖出去的技术才有价值，华为的人才战略也必须进行重大转型，那就是，华为必须培养工程商人而不是培养科学家，并且必须大批量培养。<br>围绕成批培养商业工程师的问题，华为开始了新的探索。<br>探索的结果，就是华为必须建立一套国内没有过的、全新的人才培养体系。这套体系以英国的职业资格体系为蓝本，充分吸取IBM、微软等西方企业和日本企业的特点，在结合中国国情的基础上，逐步发育起来了。它就是被任正非称为华为过去十年三大变革的任职资格体系。<br>华为工程师任职资格体系不同于外部的能力体系，它涵盖内容更广、对能力的要求程度更深，更重要的是，它针对具体的职位类的理解非常透彻，是由当初IBM、华为等一批最为顶级的相关领域内的专家，在借鉴最佳实践和华为成功经验上得出来的，因此，决不能把它当成是简单的人才能力体系，确切的说，它是一套关于如何做到业界最佳的最佳组织能力宝典。<br>不同于以往的能力体系，华为的工程师任职资格体系可以说是集采众长，而又独具特色。<br>它首先对每个岗位需要的知识点进行了详细的提炼，每个员工在走向岗位前就知道，自己需要具备哪些知识。<br>其次，它针对不同职位类的特点，建立了对应的素质模型，一开始就选对人，让最合适的人最做合适的事情。关于素质模型，值得一提的是，很多企业认为建员工能力体系，就是建素质模型，这实在是一个很严重的误会。素质，无论如何，都是一个人在走向工作岗位前就已经形成的，所谓江山易改本性难移，素质一旦形成就很难改变，对在岗人员建立素质模型，试图以培训的方式来改变员工素质，无异于愚公移山，也许最终可以移走，但是估计没有几家现代企业就可接受其时间成本。华为建立素质模型，主要是用于岗前的人才选择，以及用作长期培养。例如，从现有的技术工程师中，找出那些具备市场素质的人员，让他们冲到市场一线，完成从技术工程师到售前工程师的转变。<br>正因为素质较难改变的特点，华为从另一个角度来帮助员工能力的提升，这就是专业技能。华为从IBM的请来了操作指导书，针对转变为专业、职业人所需要的专业技能，华为以操作指导书的形式固化下来，并将其尊为圣经，任正非曾公开表示，华为的员工总是认为自己很聪明，自以为是，现在，华为从IBM买来了美国鞋，华为“削足适履”也要适应它。华为工程师的操作指导书，巧妙的将工程师需要的商业意识、商业技能融入到日常的作业行为中，既便于操作，又易于考量。例如，我们无法考量一个售前工程师是否具有良好的商业意识，但是，如果他能够按操作指导书的要求，在拜访客户前详细收集信息，资料准备充分，拜访时提出正确的问题，能根据事前的准备对现场的不同情况做出相对应的调整，拜访后及时总结，提出相应策略，这个过程既培养了他的商业意识，也形成了他的商业技能。如果他能认真遵照有关要求操作，我们就认为他具备了良好的商业意识和技能。<br>华为工程师任职资格标准最重要的一点，就是它从成果出发，对工程师以市场贡献为重点进行考量。在华为的工程师任职资格标准里，对售前工程师、研发工程师、售后工程师，都从市场成果的角度进行了的要求：<br>售前工程师：从被动技术方案设计到主动方案营销，提炼卖点，引导销售成功。<br>研发工程师：关注市场需求，对产品的市场成功负责。<br>售后工程师：从被动服务到主动创造客户价值，营造收费氛围，发现客户需求，拓展服务领域。<br>以上是从大类的角度进行的宏观要求，对于具体到不同类别、不同层级的工程师，华为都规定了非常详细的衡量成果。<br>成果是最可衡量的，也是大家最容易关注到的，正是这一点，真正的把华为工程师从技术工程师转变为商业工程师。<br>在建立工程师任职资格标准的基础上，华为通过培训培训再培训，按照资格要求，开展了大量的商业化课程培训。从华为后来的培训课程设置来看，我们可以看出商业工程师任职资格标准的建立所起到的巨大作用，例如，华为先后对市场人员进行过国学、奢侈品知识培训等，如果不是事先完成了商业工程师的角色转变和相关任职资格标准的建立，任何人都很难想象这些培训课程跟售前工程师们有什么关系，如今，这些课程的设置则更深入的反映了华为在商业化方面的超前思维和务实作风，华为最近几年的巨大成功，足资证明。<br>为了使商业工程师队伍的建设更为迅速、更为有效、更为深入，华为同时也做出了许多相关的配套措施，例如：<br>没有市场一线经验的研发人员不能提拔。<br>公司明确规定，每年必须有一定比例的研发人员走向市场，同时有一定比例的市场人员转做研发；<br>成立战略市场部，主要由技术工程师出身的人员担任其中职责，这些人凭着对技术的敏感，把触角伸到市场的每一个角落，深入了解客户当前和未来的需求，他们成了华为前进过程中的“侦察连”。<br>从市场的角度考核研发人员。评价研发人员，不仅仅是技术、开发周期维度，更重要的是新产品获利、上市周期等指标。<br>……<br>通过这一系列的战略调整，华为的工程师队伍完成了脱胎换骨的变化，华为在技术商业化的路上越走越顺了。其中的两个关键数据最能说明问题，一是，华为在最初打入国际市场的时候，到处碰壁，有些地区甚至长达两三年颗粒无收，最后华为在全球各地派出一支合计1000多人的技术工程师队伍进行市场工作，国际市场的缺口很快就打开了；二是，随着华为国际市场的成功，以及10年来在商业工程师队伍培养方面逐步开花结果，组织人才建设有力地推动了业务增长，华为迎来的业务上的井喷式增长，到2008年达到250亿美元！<br>如果没有早在10年前做出的这一系列举措，以及长期不懈的坚持，很难想象华为会有今天的巨大成功。<br>中国不缺乏技术人才，缺乏的是商业化环境下的产品研发工程师、售前工程师、售后工程师。一个企业的工程师商业化水平决定了这家企业的市场竞争力的高低。<br>中国高科技企业成长的障碍就是技术人员商业化问题。当技术人才商业化之后，它的能量将是无限的。摆在绝大多数高科技企业面临的最大挑战，就是如何批量培养商业工程师。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第一节：概述&quot;&gt;&lt;a href=&quot;#第一节：概述&quot; class=&quot;headerlink&quot; title=&quot;第一节：概述&quot;&gt;&lt;/a&gt;第一节：概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;进入21世纪以来，市场导向已经成为绝大多数企业尤其是高科技企业的共识。但是，正如赵本山在央视春晚</summary>
      
    
    
    
    <category term="认知-修行-平衡" scheme="http://example.com/categories/%E8%AE%A4%E7%9F%A5-%E4%BF%AE%E8%A1%8C-%E5%B9%B3%E8%A1%A1/"/>
    
    
    <category term="技术商人" scheme="http://example.com/tags/%E6%8A%80%E6%9C%AF%E5%95%86%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>桥水基金Ray Dalio给年轻人的建议</title>
    <link href="http://example.com/2023/07/20/advice4young_raydalio/"/>
    <id>http://example.com/2023/07/20/advice4young_raydalio/</id>
    <published>2023-07-20T02:45:30.000Z</published>
    <updated>2023-07-20T03:48:54.695Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a class="link"   href="https://youtu.be/GDuXvOs0d_k" >Ray Dalio - Modern Wisdom, youtube<i class="fas fa-external-link-alt"></i></a></li></ul><ol><li>了解自己的天性，性格，原动力是什么。可以通过pricipleyou.com测试</li><li>去学习，去经历，去反思。<br>(1). Ray Dalio的进步公式：痛苦pain + 反思reflection &#x3D; 进步improvement</li><li>培养自己的远见<br>(1). 理解发生的事情-&gt;发现事情的周期-&gt;获得自己的观点-&gt;清楚自己在周期中的位置-&gt;了解自己的生命周期<br>(2). 佛曰：成住败空，Anything has a cycle.</li><li>如何在动乱不安的世界中寻找慰藉？<br>(1). 活在当下，知足常乐，回归自然，冥想🧘</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;link&quot;   href=&quot;https://youtu.be/GDuXvOs0d_k&quot; &gt;Ray Dalio - Modern Wisdom, youtube&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/</summary>
      
    
    
    
    <category term="认知-修行-平衡" scheme="http://example.com/categories/%E8%AE%A4%E7%9F%A5-%E4%BF%AE%E8%A1%8C-%E5%B9%B3%E8%A1%A1/"/>
    
    
    <category term="人生建议" scheme="http://example.com/tags/%E4%BA%BA%E7%94%9F%E5%BB%BA%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>问题解决框架</title>
    <link href="http://example.com/2023/07/20/methodology/"/>
    <id>http://example.com/2023/07/20/methodology/</id>
    <published>2023-07-20T02:18:38.000Z</published>
    <updated>2023-07-20T03:44:36.900Z</updated>
    
    <content type="html"><![CDATA[<h2 id="办公室教授"><a href="#办公室教授" class="headerlink" title="办公室教授"></a>办公室教授</h2><p><img src="/img/wuweiwu/methology/office-staff.jpg"></p><h2 id="7步工作法-Seven-Steps-to-Efficitive-Problem-Solving"><a href="#7步工作法-Seven-Steps-to-Efficitive-Problem-Solving" class="headerlink" title="7步工作法 Seven Steps to Efficitive Problem Solving"></a>7步工作法 Seven Steps to Efficitive Problem Solving</h2><p><img src="/img/wuweiwu/methology/7step-1.png"><br><img src="/img/wuweiwu/methology/7step-2.png"></p><h2 id="根源分析-Root-Cause-Analysis"><a href="#根源分析-Root-Cause-Analysis" class="headerlink" title="根源分析 Root Cause Analysis"></a>根源分析 Root Cause Analysis</h2><p><img src="/img/wuweiwu/methology/problem-solving-framework-Root-Cause-Analysis-Process.jpg"></p><h2 id="CIRCLES-method-for-problem-solving"><a href="#CIRCLES-method-for-problem-solving" class="headerlink" title="CIRCLES method for problem-solving"></a>CIRCLES method for problem-solving</h2><p><img src="/img/wuweiwu/methology/Circles-Framework-problem-solving.png"></p><h2 id="Product-Kano-analysis"><a href="#Product-Kano-analysis" class="headerlink" title="Product Kano analysis"></a>Product Kano analysis</h2><p><img src="/img/wuweiwu/methology/framework-problem-solving-kano.jpg"></p><h2 id="DMAIC-framework-for-problem-solving"><a href="#DMAIC-framework-for-problem-solving" class="headerlink" title="DMAIC framework for problem-solving"></a>DMAIC framework for problem-solving</h2><p><img src="/img/wuweiwu/methology/problem-solving-framework-DMAIC.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;办公室教授&quot;&gt;&lt;a href=&quot;#办公室教授&quot; class=&quot;headerlink&quot; title=&quot;办公室教授&quot;&gt;&lt;/a&gt;办公室教授&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/img/wuweiwu/methology/office-staff.jpg&quot;&gt;&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    <category term="认知-修行-平衡" scheme="http://example.com/categories/%E8%AE%A4%E7%9F%A5-%E4%BF%AE%E8%A1%8C-%E5%B9%B3%E8%A1%A1/"/>
    
    
    <category term="方法论" scheme="http://example.com/tags/%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>人类简史/人类发展周期</title>
    <link href="http://example.com/2023/07/19/huamn_his/"/>
    <id>http://example.com/2023/07/19/huamn_his/</id>
    <published>2023-07-19T03:19:38.000Z</published>
    <updated>2023-07-19T04:01:34.832Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/wuweiwu/human_his/human-cycle.png"></p><h2 id="狩猎社会"><a href="#狩猎社会" class="headerlink" title="狩猎社会"></a>狩猎社会</h2><ul><li>公元前200万年</li></ul><h2 id="认知革命"><a href="#认知革命" class="headerlink" title="认知革命"></a>认知革命</h2><ul><li>公元前5万年到10万年</li><li>智人产生，想象力，虚构的神</li><li>开始出现了部落社会</li><li>大家开始学会了合作，智人的合作事建立在虚构的故事上的</li><li>开发并学习使用工具</li><li>把其他人种挤出了历史跑道</li></ul><h2 id="农业革命"><a href="#农业革命" class="headerlink" title="农业革命"></a>农业革命</h2><ul><li>公元前1万年前，想要获得更多的蔬果粮食</li><li>开始了定居社会，因为农田搬不动</li><li>农民的历史总结为一句话：日出而作，日落而息</li><li>历史的发展说明：没有平等，公义可言</li><li>国家就是一个想象的秩序，人们无法逃离</li><li>为什么人们会逃不出呢？<ul><li><ol><li>现实世界就是一个想象的秩序，如果你打破了秩序，就是打破了现实世界</li></ol></li><li><ol start="2"><li>人们都有欲望</li></ol></li><li><ol start="3"><li>主观意志</li></ol></li></ul></li><li>为什么人们会趋于统一呢？<ul><li><ol><li>金钱，信用</li></ol></li><li><ol start="2"><li>帝国</li></ol></li><li><ol start="3"><li>宗教</li></ol></li></ul></li></ul><h2 id="工业革命"><a href="#工业革命" class="headerlink" title="工业革命"></a>工业革命</h2><ul><li>18世纪末，纺织工业新技术革命</li><li>19世纪中期，蒸汽和钢铁技术革命</li><li>20世纪初，电气和化学技术革命，汽车工业革命</li><li>20世纪中叶，人们意识到经济的制高点不在于对现有工业的控制，而是在于创造未来的能力</li></ul><h2 id="资本革命"><a href="#资本革命" class="headerlink" title="资本革命"></a>资本革命</h2><p>- </p><h2 id="科技革命"><a href="#科技革命" class="headerlink" title="科技革命"></a>科技革命</h2><ul><li>的</li></ul><h2 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h2><ul><li>生物工程&#x2F;基因工作</li><li>仿生工程</li><li>无机的生命&#x2F;数字个体</li></ul><h2 id="快乐是怎么来的"><a href="#快乐是怎么来的" class="headerlink" title="快乐是怎么来的"></a>快乐是怎么来的</h2><ul><li>放弃主动追求快乐，因为快乐是一时的，佛教最是支持去快乐，众生皆苦，皆要成佛，去掉贪嗔痴</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a class="link"   href="https://www.bilibili.com/video/BV1z3411Z7W1/?spm_id_from=333.337.search-card.all.click&vd_source=22a442828b11ac7475c8bd5407da1afb" >B站-1小时看透人类10万年，《人类简史》从动物到上帝<i class="fas fa-external-link-alt"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/img/wuweiwu/human_his/human-cycle.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;狩猎社会&quot;&gt;&lt;a href=&quot;#狩猎社会&quot; class=&quot;headerlink&quot; title=&quot;狩猎社会&quot;&gt;&lt;/a&gt;狩猎社会&lt;/h2&gt;&lt;ul&gt;
&lt;l</summary>
      
    
    
    
    <category term="认知-修行-平衡" scheme="http://example.com/categories/%E8%AE%A4%E7%9F%A5-%E4%BF%AE%E8%A1%8C-%E5%B9%B3%E8%A1%A1/"/>
    
    
    <category term="人类简史" scheme="http://example.com/tags/%E4%BA%BA%E7%B1%BB%E7%AE%80%E5%8F%B2/"/>
    
    <category term="发展周期" scheme="http://example.com/tags/%E5%8F%91%E5%B1%95%E5%91%A8%E6%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>什么是人性？</title>
    <link href="http://example.com/2023/07/13/%E4%BA%BA%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <id>http://example.com/2023/07/13/%E4%BA%BA%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88/</id>
    <published>2023-07-13T01:59:33.000Z</published>
    <updated>2023-07-15T02:41:32.868Z</updated>
    
    <content type="html"><![CDATA[<ul><li>人性是一个概念性的词语，它是人对事物反应的情绪总和。</li><li>世上所有关系的结合和打破，就是关乎两个字：利益。人性背后的本质就是利益，而利益包含了物质利益和精神利益。</li><li>如何懂得人性？就是要有认知，认知来之两个途径：学习和实践。</li><li>道德，道和德拆解。道是一种自然规律。德是人自我约制的表象。舍得，先舍后得。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;人性是一个概念性的词语，它是人对事物反应的情绪总和。&lt;/li&gt;
&lt;li&gt;世上所有关系的结合和打破，就是关乎两个字：利益。人性背后的本质就是利益，而利益包含了物质利益和精神利益。&lt;/li&gt;
&lt;li&gt;如何懂得人性？就是要有认知，认知来之两个途径：学习和实践。&lt;/li</summary>
      
    
    
    
    <category term="认知-修行-平衡" scheme="http://example.com/categories/%E8%AE%A4%E7%9F%A5-%E4%BF%AE%E8%A1%8C-%E5%B9%B3%E8%A1%A1/"/>
    
    
    <category term="人性" scheme="http://example.com/tags/%E4%BA%BA%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>中国历史路线演进图</title>
    <link href="http://example.com/2023/07/13/%E4%B8%AD%E5%9B%BD%E5%8E%86%E5%8F%B2%E8%B7%AF%E7%BA%BF%E5%9B%BE/"/>
    <id>http://example.com/2023/07/13/%E4%B8%AD%E5%9B%BD%E5%8E%86%E5%8F%B2%E8%B7%AF%E7%BA%BF%E5%9B%BE/</id>
    <published>2023-07-13T01:59:33.000Z</published>
    <updated>2023-07-16T01:38:06.431Z</updated>
    
    <content type="html"><![CDATA[<h3 id="从历史学习经验，人生充满希望！"><a href="#从历史学习经验，人生充满希望！" class="headerlink" title="从历史学习经验，人生充满希望！"></a>从历史学习经验，人生充满希望！</h3><p> <img src="/img/wuweiwu/world/china/history-line/01.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;从历史学习经验，人生充满希望！&quot;&gt;&lt;a href=&quot;#从历史学习经验，人生充满希望！&quot; class=&quot;headerlink&quot; title=&quot;从历史学习经验，人生充满希望！&quot;&gt;&lt;/a&gt;从历史学习经验，人生充满希望！&lt;/h3&gt;&lt;p&gt; &lt;img src=&quot;/img/wu</summary>
      
    
    
    
    <category term="认知-修行-平衡" scheme="http://example.com/categories/%E8%AE%A4%E7%9F%A5-%E4%BF%AE%E8%A1%8C-%E5%B9%B3%E8%A1%A1/"/>
    
    
    <category term="中国历史路线" scheme="http://example.com/tags/%E4%B8%AD%E5%9B%BD%E5%8E%86%E5%8F%B2%E8%B7%AF%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>monica AI GPT 总结视频内容2</title>
    <link href="http://example.com/2023/06/15/monica-ai-exam2/"/>
    <id>http://example.com/2023/06/15/monica-ai-exam2/</id>
    <published>2023-06-15T05:25:10.000Z</published>
    <updated>2023-07-16T11:52:06.754Z</updated>
    
    <content type="html"><![CDATA[<p>Sam Altman - How to Succeed with a Startup](<a class="link"   href="https://www.youtube.com/watch?v=0lJKucu6HJc&ab_channel=YCombinator)%E7%9A%84%E8%AF%A6%E7%BB%86%E6%91%98%E8%A6%81%EF%BC%9A" >https://www.youtube.com/watch?v=0lJKucu6HJc&amp;ab_channel=YCombinator)的详细摘要：<i class="fas fa-external-link-alt"></i></a> <a class="link"   href="https://monica.im/" >Monica<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://www.youtube.com/watch?v=0lJKucu6HJc&ab_channel=YCombinator&t=0.03" >00:00<i class="fas fa-external-link-alt"></i></a>打造一个人们自发告诉朋友的伟大产品是创业公司成功的关键。</p><ul><li>成功的程度与建立一个人们喜爱的伟大产品成正比。</li><li>像谷歌和Facebook这样成功的公司就是被人们通过口碑发现的。</li><li>一个简单易懂的产品是成功的重要指标。</li><li>初创企业需要寻找一个正在经历或即将经历指数级增长的市场。</li></ul><p><a class="link"   href="https://www.youtube.com/watch?v=0lJKucu6HJc&ab_channel=YCombinator&t=157.459" >02:37<i class="fas fa-external-link-alt"></i></a> 初创企业在下大赌注之前，需要有一个传道授业的创始人，一个雄心勃勃的愿景和每个用户的密集使用量。</p><ul><li>iPhone的成功表明，有些东西已经从根本上发生了变化，有一个新的计算平台将催生巨大的业务。</li><li>VR也许有一天会成为大生意，但目前，大多数拥有VR头盔的人从未或很少使用它。</li><li>初创企业至少需要一位传教士式的创始人，他可以用热情感染整个世界，让大家了解公司要做什么。</li><li>拥有一个雄心勃勃的愿景有助于建立一个团队和吸引投资者。</li></ul><p><a class="link"   href="https://www.youtube.com/watch?v=0lJKucu6HJc&ab_channel=YCombinator&t=317.21" >05:17<i class="fas fa-external-link-alt"></i></a>对未来有自信和明确的看法，有雄心勃勃的愿景，但如果成功的话，规模巨大的初创企业将吸引最好的人才。</p><ul><li>对未来有一个自信和明确的看法，并且是一个明确的领导者，这与成功相关。</li><li>建立一个伟大的团队是一个创始人可以做的最重要的事情之一。</li><li>创始人要经历一个从建立产品到建立公司的过渡。</li></ul><p><a class="link"   href="https://www.youtube.com/watch?v=0lJKucu6HJc&ab_channel=YCombinator&t=476.56" >07:56<i class="fas fa-external-link-alt"></i></a>让团队成员不断提出新的想法和 “我们会想出办法 “的精神对早期的创业团队很重要。</p><ul><li>初创企业通过快速行动和在事情不成功的情况下迅速调整来赢得胜利。</li><li>拥有说 “我知道了 “并偏重于行动的团队成员是很重要的。</li><li>没有经验的祝福会导致不可思议的事情，因为没有人告诉他们这很难。</li></ul><p><a class="link"   href="https://www.youtube.com/watch?v=0lJKucu6HJc&ab_channel=YCombinator&t=635.589" >10:35<i class="fas fa-external-link-alt"></i></a>初创企业需要保持势头，有竞争优势，有合理的商业模式，并有发展计划。</p><ul><li>势头对于初创企业继续提供超出预期的结果至关重要</li><li>长期竞争优势是成功的必要条件</li><li>合理的商业模式是很重要的，即使在开始时没有完全想好。</li><li>一个增长和获取用户的计划是成功的必要条件。</li></ul><p><a class="link"   href="https://www.youtube.com/watch?v=0lJKucu6HJc&ab_channel=YCombinator&t=793.58" >13:13<i class="fas fa-external-link-alt"></i></a>与大公司相比，初创企业在决策速度、在坏主意上取胜的能力以及在大平台转变上取胜方面具有优势。</p><ul><li>初创企业只需要一个人同意就可以追求一个想法，而大公司则需要所有人同意。</li><li>初创企业在不断变化的市场中具有敏捷性和速度的优势，使他们能够做出更好、更快的决定。</li><li>初创企业通常在大的平台转变中获胜，因为大公司在进行战略转移时比较慢。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Sam Altman - How to Succeed with a Startup](&lt;a class=&quot;link&quot;   href=&quot;https://www.youtube.com/watch?v=0lJKucu6HJc&amp;ab_channel=YCombinator)%E</summary>
      
    
    
    
    <category term="技能-修行-进步" scheme="http://example.com/categories/%E6%8A%80%E8%83%BD-%E4%BF%AE%E8%A1%8C-%E8%BF%9B%E6%AD%A5/"/>
    
    
    <category term="GPT" scheme="http://example.com/tags/GPT/"/>
    
    <category term="monica-AI" scheme="http://example.com/tags/monica-AI/"/>
    
  </entry>
  
  <entry>
    <title>monica AI GPT 总结视频内容1</title>
    <link href="http://example.com/2023/06/15/monica-ai-exam1/"/>
    <id>http://example.com/2023/06/15/monica-ai-exam1/</id>
    <published>2023-06-15T05:21:10.000Z</published>
    <updated>2023-07-16T11:52:21.108Z</updated>
    
    <content type="html"><![CDATA[<p>OpenAI Sam Altman &amp; Greg Brockman: Fireside Chat in Seoul, Korea | SoftBank Ventures Asia](<a class="link"   href="https://www.youtube.com/watch?v=_hpuPi7YZX8&ab_channel=SoftBankVenturesAsia)%E7%9A%84%E8%AF%A6%E7%BB%86%E6%91%98%E8%A6%81%EF%BC%9A%5BMonica%5D(https://monica.im)" >https://www.youtube.com/watch?v=_hpuPi7YZX8&amp;ab_channel=SoftBankVenturesAsia)的详细摘要：[Monica](https://monica.im)<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://www.youtube.com/watch?v=_hpuPi7YZX8&ab_channel=SoftBankVenturesAsia&t=0.9" >00:00<i class="fas fa-external-link-alt"></i></a> Sam Altman和Greg Brockman讨论了他们对韩国文化的尊重和钦佩，以及韩国的创新人工智能初创企业。</p><ul><li>萨姆会说韩语，他喜欢韩国文化中传统和新事物的结合</li><li>格雷格非常尊重韩国的技术，特别是在互联网接入方面。</li><li>两人都对韩国的人工智能初创企业的发展程度和对聊天GPT技术的热情印象深刻。</li></ul><p><a class="link"   href="https://www.youtube.com/watch?v=_hpuPi7YZX8&ab_channel=SoftBankVenturesAsia&t=435.9" >07:15<i class="fas fa-external-link-alt"></i></a>OpenAI不仅仅是一家语言模型公司，而是一家专注于深度学习和向AGI迈进的AI公司。</p><ul><li>OpenAI尝试了很多失败的东西，但只看到成功的东西。</li><li>实现AGI的进展可以用最大的项目规模来衡量。</li><li>OpenAI已经致力于不同的主题，包括机器人学和强化学习。</li></ul><p><a class="link"   href="https://www.youtube.com/watch?v=_hpuPi7YZX8&ab_channel=SoftBankVenturesAsia&t=870.6" >14:30<i class="fas fa-external-link-alt"></i></a>销售一个模糊的愿景需要自信心，并在从现实中学习时调整战术。</p><ul><li>在人工智能领域没有正确的答案，只有随着时间推移变得更加准确的答案。</li><li>相信技术并有一个基本的赌注是很重要的。</li><li>最初的战术可能经不起时间的考验，需要随着新挑战的出现进行调整。</li></ul><p><a class="link"   href="https://www.youtube.com/watch?v=_hpuPi7YZX8&ab_channel=SoftBankVenturesAsia&t=1306.919" >21:46<i class="fas fa-external-link-alt"></i></a>处理快速变化的技术的最佳建议是成为适应新技术的专家，并利用它来解决问题。</p><ul><li>具体的技术技能会很快变得过时。</li><li>适应新技术并找到使用它来解决问题的方法的元技能更重要。</li><li>不同的国家将以不同的方式监管人工智能的使用情况。</li></ul><p><a class="link"   href="https://www.youtube.com/watch?v=_hpuPi7YZX8&ab_channel=SoftBankVenturesAsia&t=1743" >29:03<i class="fas fa-external-link-alt"></i></a>OpenAI有失败的项目，也有成功的项目，一些项目由于技术还没有准备好而失败，而另一些项目尽管一开始就觉得注定要失败，但结果还是成功了。</p><ul><li>OpenAI Universe是一个由于技术还没有准备好而失败的项目。</li><li>另一方面，API项目最初感觉是注定要失败的，但最后却获得了巨大的成功。</li><li>对于API项目，OpenAI经历了与客户交谈的痛苦，并在推出之前获得了早期采用者。</li></ul><p><a class="link"   href="https://www.youtube.com/watch?v=_hpuPi7YZX8&ab_channel=SoftBankVenturesAsia&t=2178.78" >36:18<i class="fas fa-external-link-alt"></i></a> 人工智能将使人们更有生产力，并创造新的工作类型，但技术变革的速度是一个问题。</p><ul><li>许多领域对劳动力的需求过剩。</li><li>人工智能将创造出难以想象的新工作类别。</li><li>人类的创造力和能力将依然重要。</li><li>技术变革的速度是一个问题，UBI是潜在解决方案的一个有趣的组成部分。</li></ul><p><a class="link"   href="https://www.youtube.com/watch?v=_hpuPi7YZX8&ab_channel=SoftBankVenturesAsia&t=2615.46" >43:35<i class="fas fa-external-link-alt"></i></a> OpenAI认为，内容创作者应该从人工智能技术中获益，要找到补偿的机制，必须进行实验。</p><ul><li>OpenAI认为，内容创作者应该为他们帮助AI变得更好的工作得到补偿。</li><li>实验是必要的，以找到补偿的机制。</li><li>OpenAI直接与社区中正在创作的人接触。</li></ul><p><a class="link"   href="https://www.youtube.com/watch?v=_hpuPi7YZX8&ab_channel=SoftBankVenturesAsia&t=3051.24" >50:51<i class="fas fa-external-link-alt"></i></a>人工智能的进步是许多术语的乘法，计算硬件是一个重要因素，还有数据和工程口径。</p><ul><li>AI的进步是计算能力、数据和工程口径的产物。</li><li>为了优化人工智能的进展，所有因素都应该是相等的。</li><li>定制硅领域对建立新的架构很有意思。</li><li>定制硅领域的障碍是建立伟大的软件。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;OpenAI Sam Altman &amp;amp; Greg Brockman: Fireside Chat in Seoul, Korea | SoftBank Ventures Asia](&lt;a class=&quot;link&quot;   href=&quot;https://www.youtub</summary>
      
    
    
    
    <category term="技能-修行-进步" scheme="http://example.com/categories/%E6%8A%80%E8%83%BD-%E4%BF%AE%E8%A1%8C-%E8%BF%9B%E6%AD%A5/"/>
    
    
    <category term="GPT" scheme="http://example.com/tags/GPT/"/>
    
    <category term="monica-AI" scheme="http://example.com/tags/monica-AI/"/>
    
  </entry>
  
  <entry>
    <title>conda docker git vim ssr</title>
    <link href="http://example.com/2023/06/12/conda_docker_git_vim/"/>
    <id>http://example.com/2023/06/12/conda_docker_git_vim/</id>
    <published>2023-06-12T14:46:10.000Z</published>
    <updated>2023-07-16T11:46:27.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自建ssr服务器"><a href="#自建ssr服务器" class="headerlink" title="自建ssr服务器"></a>自建ssr服务器</h1><ul><li><a class="link"   href="https://github.com/Alvin9999/new-pac/wiki/%E8%87%AA%E5%BB%BAss%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B" >https://github.com/Alvin9999/new-pac/wiki/%E8%87%AA%E5%BB%BAss%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B<i class="fas fa-external-link-alt"></i></a></li></ul><h1 id="conda的使用笔记"><a href="#conda的使用笔记" class="headerlink" title="conda的使用笔记"></a>conda的使用笔记</h1><ol><li>创建环境conda create -n name python&#x3D;3.8</li><li>激活环境conda activate name</li><li>关闭环境conda deactivate</li><li>查看当前环境conda env –list</li><li>查看前期环境中pip列表pip list</li><li>查看指定pip包的安装pip list | grep packagename</li><li>删除环境conda remove -n name –all</li><li>克隆环境conda create -n BBB –clone AAA，B是A的克隆</li><li>转移环境<ol><li>conda转移：conda env export &gt; name.yaml,然后新系统下执行conda env create -f name.yaml</li><li>pip转移：pip freeze &gt; requirements.txt,然后新系统下pip install -r requirements.txt</li></ol></li></ol><h1 id="docker的使用笔记，轻量化虚拟技术"><a href="#docker的使用笔记，轻量化虚拟技术" class="headerlink" title="docker的使用笔记，轻量化虚拟技术"></a>docker的使用笔记，轻量化虚拟技术</h1><ol start="0"><li><p>缺点：争抢资源，权限过高；优点：可移植性高，环境封闭</p></li><li><p>基础概念：dockfile，images，container, volume</p><ol><li>dockfile：docker的配置文件</li><li>image：docker的镜像文件，用来创建container的母本</li><li>container：俗称容器，docker最终落地的形态，是一个运行程序的隔离环境。</li><li>volume：数据卷，</li></ol></li><li><p>dockerfile常见的命令(大写形式)：</p><ol><li>FROM：</li><li>WORKDIR：</li><li>COPY</li><li>RUN</li><li>CMD</li></ol></li><li><p>docker 常见命令</p><ol><li>docker create</li><li>docker ps -aq，查看所有的容器</li><li>docker images -q，查看所有的镜像</li><li>docker build</li><li>docker run -p -v<ol><li>数据和命令，通过映射的方式在宿主和容器之间进行传递，其中-p表示port，端口，-v表示volume，卷。 -d,daemon，在后台运行。–name，表示名字<figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -d --name music -p 264:264 -v /opt/musciplayer:/var/www/html/cache/music-player-docker</span></span><br></pre></td></tr></table></figure></li><li>例子：通过冒号作为宿主和容器之间的分隔符!<figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">宿主 : 容器</span><br></pre></td></tr></table></figure></li><li></li></ol></li><li>docker stop <container id>，停止指定容器，docker stop $(docker ps -aq)，停止所有容器</li><li>docker restart <container id></li><li>docker rm <container id>，删除指定容器，docker rm $(docker ps -aq)，删除所有容器</li><li>docker rmi <container id>，删除指定镜像，docker rmi $(docker images -q)，删除所有镜像</li><li>docker exec -it <container id> &#x2F;bin&#x2F;bash</li><li>docker volume create </li><li>docker cp <container id>:&#x2F;opt&#x2F;file.txt &#x2F;opt&#x2F;local&#x2F;</li><li>docker cp &#x2F;opt&#x2F;local&#x2F;file.txt <container id>:&#x2F;opt&#x2F;</li><li>docker有了专门清理资源(container、image、网络)的命令，docker system prune</li><li>docker image prune –force –all 或者docker image prune -f -a 删除所有不使用的镜像</li><li>docker container prune -f 删除所有停止的容器</li></ol></li><li><p>docker compose</p><ol><li>docker compose up</li><li>docker compose down</li></ol></li></ol><h1 id="git的使用笔记"><a href="#git的使用笔记" class="headerlink" title="git的使用笔记"></a>git的使用笔记</h1><h1 id="vim的使用笔记"><a href="#vim的使用笔记" class="headerlink" title="vim的使用笔记"></a>vim的使用笔记</h1><h1 id="ssh知识和问题集"><a href="#ssh知识和问题集" class="headerlink" title="ssh知识和问题集"></a>ssh知识和问题集</h1><ol><li><p>ssh连接发生错误信息：kex_exchange_identification: Connection closed by remote host</p><ul><li>解决方法：可能是认证的key失效了，进入~&#x2F;.ssh，删除know_hosts目录，重新连接一下</li></ul></li><li><p>基本命令<br>pwd 打印当前文件夹的路径<br>cd  改变目录, 相当于 windows 下的打开文件夹<br>ls  展示当前目录下的所有文件内容<br>mkdir 创建目录, 创建文件夹<br>rmdir 删除文件夹<br>touch 创建文件<br>rm 删除文件<br>cat 原意是指将文件与终端输出流连接, 通俗的说输出文件内容<br>less 或 more( Unix ) 命令可以分页的打开文件, 注意使用 q 退出<br>echo 命令 打印</p><blockquote><p>重定向, 如果文件存在, 则将文件截断, 并重新输入.</p><blockquote><p> 重定向. 不截断重定向<br>ipconfig&#x2F;all  查看ip信息<br>ping IP地址    查看是否连接成功<br>tips:<br>注意: 换行问题:在 linux 中使用 \n 表示换行;在 windows 中使用 \r\n 表示换行<br>注意:文件截断是指将文件的所有内容删除, 但是文件的创建时间等信息不更改</p></blockquote></blockquote></li><li><p>查看某一目录下所有文件夹的内存占用</p></li></ol><ul><li>du -sh .&#x2F;* –exclude proc</li></ul><ol start="4"><li>查看各磁盘内存情况</li></ol><ul><li>df -h</li></ul><ol start="5"><li><p>开启ssh远程连接服务</p><ol><li>测试是否安装了openssh server，sudo service ssh start</li><li>如果没有安装，则安装，sudo apt update &amp;&amp; sudo apt install openssh-server</li><li>安装完毕则可以开始连接了</li></ol></li><li><p>本地机器和远程服务器之间传送文件</p><ol><li>scp命令，scp  [参数] &lt;源地址（用户名@IP地址或主机名）&gt;:&lt;文件路径&gt; &lt;目的地址（用户名 @IP 地址或主机名）&gt;:&lt;文件路径&gt;</li><li>#拷贝文件夹，加-r参数</li><li>例子；scp -r &#x2F;home&#x2F;tim&#x2F;workspace&#x2F;github&#x2F;style <a class="link"   href="mailto:&#x74;&#105;&#109;&#64;&#49;&#57;&#50;&#x2e;&#x31;&#x36;&#x38;&#x2e;&#x78;&#120;&#120;&#46;&#120;&#x78;" >&#x74;&#105;&#109;&#64;&#49;&#57;&#50;&#x2e;&#x31;&#x36;&#x38;&#x2e;&#x78;&#120;&#120;&#46;&#120;&#x78;<i class="fas fa-external-link-alt"></i></a>:&#x2F;home&#x2F;tim&#x2F;github&#x2F;style</li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;自建ssr服务器&quot;&gt;&lt;a href=&quot;#自建ssr服务器&quot; class=&quot;headerlink&quot; title=&quot;自建ssr服务器&quot;&gt;&lt;/a&gt;自建ssr服务器&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;link&quot;   href=&quot;https://github.c</summary>
      
    
    
    
    <category term="技能-修行-进步" scheme="http://example.com/categories/%E6%8A%80%E8%83%BD-%E4%BF%AE%E8%A1%8C-%E8%BF%9B%E6%AD%A5/"/>
    
    
    <category term="conda-docker-git-vim-ssr" scheme="http://example.com/tags/conda-docker-git-vim-ssr/"/>
    
  </entry>
  
  <entry>
    <title>FLOPs</title>
    <link href="http://example.com/2023/05/31/FLOPs/"/>
    <id>http://example.com/2023/05/31/FLOPs/</id>
    <published>2023-05-31T05:19:10.000Z</published>
    <updated>2023-07-16T11:35:07.645Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NPU的性能参数分解"><a href="#NPU的性能参数分解" class="headerlink" title="NPU的性能参数分解"></a>NPU的性能参数分解</h1><p>注意相同 FLOPs 的两个模型其运行速度是会相差很多的，因为影响模型运行速度的两个重要因素只通过 FLOPs 是考虑不到的，比如 MAC（Memory Access Cost）和网络并行度；二是具有相同 FLOPs 的模型在不同的平台上可能运行速度不一样。</p><p>&#x3D;&#x3D;模型参数量的分析是为了了解内存占用情况，内存带宽其实比 FLOPs 更重要。目前的计算机结构下，单次内存访问比单次运算慢得多的多。&#x3D;&#x3D;对每一层网络，端侧设备需要：</p><p>从主内存中读取输入向量 &#x2F; feature map；<br>从主内存中读取权重并计算点积；<br>将输出向量或 feature map 写回主内存。</p><h2 id="双精度、单精度和半精度"><a href="#双精度、单精度和半精度" class="headerlink" title="双精度、单精度和半精度"></a>双精度、单精度和半精度</h2><p>CPU&#x2F;GPU 的浮点计算能力得区分不同精度的浮点数，分为双精度 FP64、单精度 FP32 和半精度 FP16。因为采用不同位数的浮点数的表达精度不一样，所以造成的计算误差也不一样，对于需要处理的数字范围大而且需要精确计算的科学计算来说，就要求采用双精度浮点数，而对于常见的多媒体和图形处理计算，32 位的单精度浮点计算已经足够了，对于要求精度更低的机器学习等一些应用来说，半精度 16 位浮点数就可以甚至 8 位浮点数就已经够用了。 对于浮点计算来说， CPU 可以同时支持不同精度的浮点运算，但在 GPU 里针对单精度和双精度就需要各自独立的计算单元。</p><h2 id="浮点计算能力"><a href="#浮点计算能力" class="headerlink" title="浮点计算能力"></a>浮点计算能力</h2><p>FLOPS：每秒浮点运算次数，每秒所执行的浮点运算次数，浮点运算包括了所有涉及小数的运算，比整数运算更费时间。下面几个是表示浮点运算能力的单位。我们一般常用 TFLOPS(Tops) 作为衡量 NPU&#x2F;GPU 性能&#x2F;算力的指标，比如海思 3519AV100 芯片的算力为 1.7Tops 神经网络运算性能。</p><p>MFLOPS（megaFLOPS）：等于每秒一佰万（&#x3D;10^6）次的浮点运算。<br>GFLOPS（gigaFLOPS）：等于每秒拾亿（&#x3D;10^9）次的浮点运算。<br>TFLOPS（teraFLOPS）：等于每秒万亿（&#x3D;10^12）次的浮点运算。<br>PFLOPS（petaFLOPS）：等于每秒千万亿（&#x3D;10^15）次的浮点运算。<br>EFLOPS（exaFLOPS）：等于每秒百亿亿（&#x3D;10^18）次的浮点运算。</p><h2 id="硬件利用率-Utilization"><a href="#硬件利用率-Utilization" class="headerlink" title="硬件利用率(Utilization)"></a>硬件利用率(Utilization)</h2><p>在这种情况下，利用率（Utilization）是可以有效地用于实际工作负载的芯片的原始计算能力的百分比。深度学习和神经网络使用相对数量较少的计算原语（computational primitives），而这些数量很少的计算原语却占用了大部分计算时间。矩阵乘法（MM）和转置是基本操作。MM 由乘法累加（MAC）操作组成。OPs&#x2F;s（每秒完成操作的数量）指标通过每秒可以完成多少个 MAC（每次乘法和累加各被认为是 1 个 operation，因此 MAC 实际上是 2 个 OP）得到。所以我们可以将利用率定义为实际使用的运算能力和原始运算能力的比值：<br>————————————————<br>版权声明：本文为CSDN博主「那个苏轼回不来了丶」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a class="link"   href="https://blog.csdn.net/qq_45763093/article/details/118519790" >https://blog.csdn.net/qq_45763093/article/details/118519790<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;NPU的性能参数分解&quot;&gt;&lt;a href=&quot;#NPU的性能参数分解&quot; class=&quot;headerlink&quot; title=&quot;NPU的性能参数分解&quot;&gt;&lt;/a&gt;NPU的性能参数分解&lt;/h1&gt;&lt;p&gt;注意相同 FLOPs 的两个模型其运行速度是会相差很多的，因为影响模型运行速</summary>
      
    
    
    
    <category term="技能-修行-进步" scheme="http://example.com/categories/%E6%8A%80%E8%83%BD-%E4%BF%AE%E8%A1%8C-%E8%BF%9B%E6%AD%A5/"/>
    
    
    <category term="机器学习" scheme="http://example.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="FLOPs" scheme="http://example.com/tags/FLOPs/"/>
    
  </entry>
  
  <entry>
    <title>水墨先生算命</title>
    <link href="http://example.com/2023/05/28/mozi91_luck/"/>
    <id>http://example.com/2023/05/28/mozi91_luck/</id>
    <published>2023-05-28T02:40:33.000Z</published>
    <updated>2023-07-16T11:23:43.887Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/wuweiwu/about/mozi_luck/01.png" alt="01"><br><img src="/img/wuweiwu/about/mozi_luck/02.png" alt="02"><br><img src="/img/wuweiwu/about/mozi_luck/03.png" alt="03"><br><img src="/img/wuweiwu/about/mozi_luck/04.png" alt="04"><br><img src="/img/wuweiwu/about/mozi_luck/05.png" alt="05"><br><img src="/img/wuweiwu/about/mozi_luck/06.png" alt="06"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/img/wuweiwu/about/mozi_luck/01.png&quot; alt=&quot;01&quot;&gt;&lt;br&gt;&lt;img src=&quot;/img/wuweiwu/about/mozi_luck/02.png&quot; alt=&quot;02&quot;&gt;&lt;br&gt;&lt;img src=&quot;/img/wu</summary>
      
    
    
    
    <category term="认知-修行-平衡" scheme="http://example.com/categories/%E8%AE%A4%E7%9F%A5-%E4%BF%AE%E8%A1%8C-%E5%B9%B3%E8%A1%A1/"/>
    
    
    <category term="命理" scheme="http://example.com/tags/%E5%91%BD%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>现代机器学习监控的混乱局面：重新思考流媒体评估（4/4）</title>
    <link href="http://example.com/2023/05/24/model_monitoring_mess_part04/"/>
    <id>http://example.com/2023/05/24/model_monitoring_mess_part04/</id>
    <published>2023-05-24T14:45:16.000Z</published>
    <updated>2023-07-16T12:11:32.245Z</updated>
    
    <content type="html"><![CDATA[<h2 id="作者：Shreya-Shankar-原文连接：rethinking-ml-monitoring-4"><a href="#作者：Shreya-Shankar-原文连接：rethinking-ml-monitoring-4" class="headerlink" title=" 作者：Shreya Shankar- 原文连接：rethinking ml monitoring 4"></a> 作者：Shreya Shankar<br>- 原文连接：<a class="link"   href="https://www.shreya-shankar.com/rethinking-ml-monitoring-4/" >rethinking ml monitoring 4<i class="fas fa-external-link-alt"></i></a></h2><ul><li>在过去的几篇文章中，我讨论了流式ML评估，思考了要监控的内容（跨状态和组件轴），并探索了现有软件监控工具（如Prometheus）的故障模式。在这最后一篇文章中，<strong>我为ML监控中的问题提出了一个更广泛的研究议程</strong>，由 “真实世界 “的ML部署后问题所激发。</li></ul><h2 id="预备工作"><a href="#预备工作" class="headerlink" title="预备工作"></a>预备工作</h2><ul><li>我们将用一个例子来阐述这个议程：</li><li><strong>任务</strong>：对于乘坐出租车，我们想预测出租车乘客给司机的小费超过车费10%的概率。这是一个二元分类问题。预测值是在0和1之间的浮点数。</li><li><strong>数据集</strong>：我们使用从纽约市出租车联盟收集的2020年1月1日至5月31日的数据。这是一个 “时间上演变的表格数据 “的例子（这句话是从阿伦-库马尔那里偷来的）。</li><li><strong>SLI</strong>：我们衡量准确度，或者当四舍五入到最接近的整数时，正确预测的例子的分数。在ML社区，SLI通常被称为评估指标。</li><li><strong>管道结构</strong>：我们的例子只包括一个模型。2有两条管道–代表训练和推理–共享一些组件，如清洗和特征生成。请参考本系列的第三篇文章中的图表。</li></ul><h2 id="挑战的保护伞"><a href="#挑战的保护伞" class="headerlink" title="挑战的保护伞"></a>挑战的保护伞</h2><ul><li>我的研究议程主要集中在数据管理，而不是算法。</li></ul><h3 id="度量衡计算"><a href="#度量衡计算" class="headerlink" title="度量衡计算"></a>度量衡计算</h3><ul><li>我将指标计算分为粗粒度和细粒度两类。3 粗粒度指标是SLI（如准确率、精确率、召回率），与商业价值最接近，需要一些反馈，或标签。我们使用粗粒度的指标来检测ML性能问题。细粒度指标是可能表明或解释粗粒度指标变化的指标，不一定需要标签（例如，一个特征的两个连续滑动窗口之间的KL分歧）。我们使用细粒度的指标来诊断ML的性能问题。相关的、<strong>我认为许多组织都落入了这样的陷阱，即首先监测细粒度的指标、</strong> 仿佛一个不起眼的特征的中位值的一些变化会对是否重新训练一个模型提供任何可操作的洞察力。<strong>当粗粒度的度量应该被视为一等公民时。</strong></li></ul><h4 id="粗粒度的监控：检测ML性能问题"><a href="#粗粒度的监控：检测ML性能问题" class="headerlink" title="粗粒度的监控：检测ML性能问题"></a>粗粒度的监控：检测ML性能问题</h4><ul><li>令人惊讶的是，各组织发现要了解其SLI的实时价值具有挑战性。一些原因是：<ul><li><p><strong>预测和反馈组件之间的分离</strong>。如果一条流水线进行预测，而另一条流水线摄取反馈，我们就需要对一个高权重的属性进行连接。这可能不是一个研究问题本身，但却是一个需要考虑的恼人的工程问题，特别是在流媒体环境中。</p></li><li><p><strong>改变感兴趣的子群体</strong>。许多组织监测不同子群体（如客户）的SLI 随着时间的推移，新的子群体或人口统计学可能逐渐进入数据流。组织很难知道要监测哪些子人群–考虑到覆盖面（即支持）、时间变化或高培训损失。</p></li><li><p><strong>标签滞后</strong>。由于预测和反馈部分的分离，在我们做出预测后，其相应的反馈（即标签）在一段时间后（或根本没有）到达系统中。不同的预测或子组之间的延迟可能并不一致。在需要人类手动标注数据的情况下，延迟会加剧。此外，我们假设<strong>标签滞后是一个非平稳的时间序列</strong>（即未预料到的问题可能导致滞后，而且可能没有一个模式）。</p></li></ul></li></ul><h5 id="Scalable-Monitoring-Infrastructure"><a href="#Scalable-Monitoring-Infrastructure" class="headerlink" title="Scalable Monitoring Infrastructure"></a>Scalable Monitoring Infrastructure</h5><ul><li><p>解决前两个问题，特别是在规模上，需要更好的监控基础设施，优先考虑增量维护的连接，灵活定义SLI（即用户定义的功能），智能建议监控的内容，以及在部署后添加新的SLI定义并通过历史数据窗口计算的能力。我的上一篇文章展示了Prometheus如何不满足这些需求。为此，我正在考虑一个具有以下层次的ML监控系统：</p></li><li><p><strong>存储</strong>。我们需要一个时间序列数据库用于持久性存储（计算的度量值、直方图或总结、原始输出和反馈），以及用于快速连接和度量计算的内存流。</p></li><li><p><strong>执行</strong>。用户应该能够将度量函数指定为Python UDFs，我们可以用一个基于数据流的差分系统（Murray等人）在数据窗口上增量运行。考虑一个假想的用户工作流：</p></li><li><p><img src="/img/wuweiwu/ml/model_monitor_translate/code3.png"></p></li><li><p>在上面的工作流程中，用户定义他们自己的度量函数，并用记录函数来记录他们的代码。我们将需要加入输出和反馈–增量的，以节省时间–并在任意的窗口大小上计算度量。一个初步的原型4计算流式ML SLI，定义为Python UDFs，跨越不同的组件，显示出有希望的度量计算时间和最小的日志开销：</p></li><li><p><img src="/img/wuweiwu/ml/model_monitor_translate/querylatencyall.png"></p></li><li><p><img src="/img/wuweiwu/ml/model_monitor_translate/loggingtimeall.png"></p></li><li><p>图1：ML查询和记录的延迟。</p></li><li><p><strong>查询</strong>。支持快速和灵活的查询是最重要的。在用户查询之前预先计算和存储摘要–包括连接和度量值–会产生最低的延迟查询；然而，用户可能希望在查询时改变窗口大小和其他参数。在查询时间之前进行预计算和在飞行中计算所有内容之间的最佳权衡是什么？此外，随着用户添加新的UDF和新的子群的出现，我们如何有效地回填部署以来所有窗口的度量值？</p></li></ul><h5 id="估计有标签滞后的实时SLI"><a href="#估计有标签滞后的实时SLI" class="headerlink" title="估计有标签滞后的实时SLI"></a>估计有标签滞后的实时SLI</h5><ul><li>我们不仅需要考虑监测基础设施，而且还需要能够正确计算SLI。滞后为计算SLI引入了有趣的算法挑战。如果用户不能及时收到所有预测的标签（反馈），我们如何尽可能正确地估计实时SLI？</li></ul><h6 id="全面反馈"><a href="#全面反馈" class="headerlink" title="全面反馈"></a>全面反馈</h6><ul><li>在这种情况下，为了计算一个窗口的SLI，我们只需要执行一个流式连接。挑战发生在规模上，或者当我们的窗口尺寸太大，无法在内存中容纳预测和反馈时。一个自然的解决方案可能是执行近似的流式连接，但是众所周知，在连接之前对流式进行均匀的子采样，可以在结果中产生四倍的少的图元（Chaudhuri等人）。现有的流式连接的近似查询处理（AQP）技术在图元的数量或所产生的连接的代表性之间权衡准确性。在我们的案例中，我们关心的是后者，因为我们想使我们的SLI近似的误差最小化（即近似的精度应该接近于精确的精度）。所以我们可能不想利用最先进的宇宙抽样技术（Kandula等人）来保留大量的连接结果图元，因为它们不一定能提供准确的估计（Huang等人）。</li><li>为了优先考虑我们连接样本的代表性，我们可以从渐进式近似连接的分层抽样技术中得到启发（Tok等人）。直观地说，为了使我们的SLI近似值的误差最小化，我们应该构建具有相似预测误差（即ML模型目标认为的损失）的阶层或子组。不幸的是，在我们的高数据设置中，我们无法计算每个预测的误差（因为我们无法将每个预测连接到其相应的标签上）!也许我们可以在高层特征分组中识别 “典范”（即 “重要 “的数据点），并在分组标签上加入典范。例如，在我们的高尖预测问题中，我们可以将我们的预测和标签按邻里（例如FiDi、Tribeca、Midtown）分组，在这些组中挑选典范，汇总这些典范的预测和标签，并将它们连接起来以计算指标。研究的挑战在于设计出高效、高准确度的方法–可能是混合的ML和数据处理技术–来计算群体和典范。</li></ul><h6 id="无反馈"><a href="#无反馈" class="headerlink" title="无反馈"></a>无反馈</h6><ul><li><p>这种情况通常在部署后立即发生。在我们纽约市出租车的例子中，假设我们有两个原始数据来源：出租车传感器遥测数据（如里程、位置）和计价器数据（如支付信息）。计价器数据可能会在以后分批出现，促使我们找到其他方法来估计没有标签的实时性能。</p></li><li><p>一个想法是使用重要性加权（IW）技术（Sugiyama等人）。在高层次上，我们可以根据输入特征确定子组，算出每个子组的训练SLI（例如准确度），并根据实时（部署后，未标记）数据中每个子组的点的数量来加权这些准确度。在我们的例子中，基本的子组定义可以是街区–对于纽约市的每一个街区，我们会找到训练的准确性，并通过相应街区中的实时点的比例来加权，以获得其 “估计 “的准确性。然后，我们将每个社区的估计值汇总，得到一个整体的估计精度。对于一个更复杂（和更高置信度）的方法，我们可以构建不同的分组，并对所产生的SLI估计值进行平均。同样，研究的挑战在于确定这些分组，当然也包括评估这些方法的效果。</p></li><li><p>我们可以在训练集或直播流中确定子群。最便宜的选择是根据训练数据点来计算子群，因为这可以做一次。然而，有了这个 “静态子群 “选项，实时的SLI估计就变得不那么准确了，因为子群的代表性随时间而变化。因此，我们希望在实时数据中计算出适应性的子群。我们可以利用流式聚类算法，这些算法对不断变化的数据分布具有明确的鲁棒性（Zubaroğlu等人）；然而，这在我们的案例中是额外昂贵的，因为每次有新的实时数据进来，我们都需要重复地将训练数据集的点重新分配给聚类。此外，集群在训练集中可能很少或没有相应的数据点，使我们无法估计出SLI。因此，我们需要<strong>研究在高维的、不断变化的数据流中有效识别子群的方法，并考虑到参考数据集（即训练集）</strong>。</p></li></ul><h6 id="部分反馈"><a href="#部分反馈" class="headerlink" title="部分反馈"></a>部分反馈</h6><ul><li>这种情况是我在 “野外 “看到的ML管线中最常见的。通常情况下，实时数据只在时间表上标注，更多的时候，一些上游的数据收集问题影响了反馈的到来（例如，在Tribeca的某个地区有一个手机塔的中断，导致支付表的数据比预期的晚到）。<strong>假设标签滞后的分布是未知和非平稳的</strong>, (即训练一个单独的模型来预测哪些预测不会有反馈可能是不可行的），在这种情况下，我们如何估计实时SLI？</li><li>乍一看，也许我们可以简单地汇总全反馈和无反馈的估计值，按每个子组的数据点的数量加权。但现实情况是，标签滞后很少在各桶中均匀分布，识别具有类似反馈滞后时间的数据点组，对产生实时SLI的准确估计至关重要6。我们可以利用无反馈部分所描述的流式聚类算法，但这种聚类可能无法解释，或者只用谓词中的几个条款简单描述（Saisubramanian等人）。出于调试的目的，我们还关心这些 “滞后 “的数据点集群如何随时间变化，或者滞后的异常情况。</li><li>也许我们可以从流模式挖掘算法中获得灵感，比如频繁项集（Rajaraman和Ullman等人）。然而，这类算法是在标签不变的数据点窗口中寻找特征组，而我们想要应用频繁项集算法的数据点–那些没有反馈的数据点（即 “滞后 “点）–在我们计算出频繁项集后可能会得到反馈。因此，<strong>我们如何扩展流式频繁项集算法，以便在删除数据点后有效地重新计算项集</strong>？我们可以在频繁项集的增量维护工作的基础上（Tobji等人）。</li></ul><h4 id="细致的监控：诊断ML性能问题"><a href="#细致的监控：诊断ML性能问题" class="headerlink" title="细致的监控：诊断ML性能问题"></a>细致的监控：诊断ML性能问题</h4><ul><li>当SLI较低时，最优先考虑的是尽快使其回升。”细粒度 “监测类别涉及表现不佳的管道的 “根本原因分析”–模型是否应该重新训练，或者管道中的工程问题是否是失败的根本原因。此外，如果模型应该被重新训练（例如，有 “漂移 “或 “转移”），我们应该如何改变训练集以提高性能？</li></ul><h5 id="检测数据质量问题"><a href="#检测数据质量问题" class="headerlink" title="检测数据质量问题"></a>检测数据质量问题</h5><ul><li>针对ML可观察性的数据管理研究在自动识别数据管道中的工程问题方面取得了进展（Schelter等人，Breck等人）。诸如模式验证、检测批次内的异常值以及对特征统计的约束（如预期平均值、完整性和范围）等技术可以标示出意外的数据质量问题，如传感器损坏和不完整的上游数据摄取。对于少量的特征和对问题领域的高度熟悉，宣布界限或预期可能是可行的，但这能否扩展到高维设置–例如，当数据科学家向xgboost模型投掷2000或更多的特征时？此外，<strong>在 “工程问题 “和 “漂移 “之间划清界限是很难的</strong>、特别是如果我们想自动检测问题。像TFX（Modi等人）这样的工具允许用户监测感兴趣的距离指标，如KL发散和Kolmogorov-Smirnov测试统计，但在视觉检查的L1距离很低的情况下，这些工具会失效–这可能发生在成千上万的数据点的规模上（Breck等人）。缓解这个问题的策略是假设拥有一个FAANG公司可能正在处理的数据点的数量（如果不是数十亿，也是数亿）。如果在FAANG公司之外，我们可以用什么技术来弥补经验漂移d(p̂, q̂)和理论漂移d(p, q)之间的差距，其中p和q是两个不同的分布？</li></ul><h5 id="朝着重新训练模型的方向发展"><a href="#朝着重新训练模型的方向发展" class="headerlink" title="朝着重新训练模型的方向发展"></a>朝着重新训练模型的方向发展</h5><ul><li><p>在研究和实践界都存在一个巨大的问题，那就是 <strong>“分配转变 “是一个定义不明确的、负担过重的短语</strong>、造成全面的混乱。当人们说 “分布转移 “时，他们指的是一种现象，即一个数据集来自与另一个数据集不同的分布。”分布转移 “可能会导致ML性能下降–例如，在一个出租车公司供应商的数据上训练的模型在取自另一个出租车公司供应商的数据上可能表现不佳。这个重载的短语包含了不同类型的转变；例如：</p></li><li><p><strong>概念转变</strong>：输入特征和目标输出（即标签）之间关系的变化。这方面的一个例子是华尔街的年终奖金导致乘客在一周内多给小费。</p></li><li><p><strong>协变量转移</strong>：训练数据中输入变量分布的变化，而不是目标输出分布。这方面的一个例子是在新年前夕在中城（时代广场的落球）收到更多的出租车乘坐。</p></li><li><p><strong>年龄转移</strong>：一个输入变量的分布随着时间的推移预期增加或减少。这方面的一个例子是出租车的总里程数，它只能随着时间的推移而增加。</p></li><li><p>在 “分布转变 “方面的很多研究和现有方法都集中在比较两组有限的数据。正如我在本系列文章前面提到的，在实践中，我们关心的是在无限的数据流上部署模型，或在可预见的未来的数据。难道我们应该任意地将生产数据切割成两个固定大小的数据集，以想知道是否有 “分布转移”？这似乎并不正确。在流式ML设置中，我们真正关心的问题是：在什么时候我的模型对我当前的数据不能像预期那样工作？(即我何时需要重新训练我的模型？)。</p></li><li><p>在现实中，SLI的下降是由不同类型的转变组合而成的，特别是在高度非平稳的环境中。从产品的角度考虑，告诉用户 “78%来自概念转变，22%来自协变量转变”，即使我们能精确地确定这种细分，其可操作性如何？<strong>我们希望告诉用户何时以及如何在部署后重新训练模型</strong>,鉴于当前数据窗口中出现的 “异常”。假设我们有标签或反馈Y和输入数据或特征X，其中Xi代表所有数据点中第i个特征的数据。按照颗粒度增加的顺序，异常情况的类型可以包括：：</p></li><li><p>P(Y | X)有变化，但P(X)没有变化</p></li><li><p>P(Y | X)没有变化，但P(X)有变化</p></li><li><p>P(Xi)中的移位</p></li><li><p>P(Xi | Xj)中的移位，其中i ≠ j</p></li><li><p>P(Xi | Xj , Xk , …)中的移位，其中i ≠ j ≠ k</p></li><li><p><strong>在规模上跟踪许多距离度量</strong>。如前所述，为了接近上述的异常情况，现有的工作提出在连续的滑动窗口和训练集上跟踪KL分歧和Kolmogorov-Smirnov检验等指标（即Breck等人所述的训练-服务倾斜）。在内存中保留许多实时数据的窗口和训练集可能是不可行的，因此我们可以利用AQP技术来计算具有合理误差的距离指标。例如，度量计算功能可以在特征的直方图上运行，而不是在完整的数据流上运行；然而，直方图槽在流式设置中需要随着数据的演变而变化。研究的挑战在于将增量维护的近似直方图（Gibbons等人）的想法与自适应直方图（Leow等人）的想法相结合，以产生不断变化的数据窗口的总结。</p></li><li><p><strong>识别距离度量中的静止性</strong>。通常情况下，模型在周末、工作时间以外或节假日表现不佳。一个有趣的想法是训练一个模型来识别滑动窗口中观察到的P（Y | X）和P（X）之间的距离是否存在季节性模式。追踪所有的特征组合是不切实际的（Heise等人），那么是否有可能利用预测寻找算法（如Wu等人）来简化追踪距离指标的空间？</p></li><li><p><strong>自我调整的训练集</strong>。最后，根据检测到的异常类型，我们可以建议增加或改变训练集的方法。例如，在P(X)发生变化但P(Y | X)不变的情况下，我们可以建议对代表性不足的子群体进行增加采样。在P(Y | X)变化但P(X)不变的情况下，也许用户可以在最近的数据窗口上重新训练他们的模型。研究的挑战在于具体的、有用的提示，以构建新的训练数据集来避免低性能的陷阱。</p></li></ul><h3 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h3><ul><li><p><strong>目前的ML监控仪表盘信息量过大</strong>.用户看到数以百计，甚至数以千计的柱状图和图表，试图将 “分布转移 “可视化。<strong>这些图表没有可操作性，特别是当人们可以用同一组图表来讲述两个相互矛盾的故事时。</strong>例如，一个用户可以说，一个模型需要重新训练，因为一个特征的平均值在过去的几天里急剧下降了。另一方面，用户可以说这个特征不是三个最重要的特征之一，所以重新训练模型不会有很大影响。因此，从界面的角度来看，在给定数百个图形的情况下，在何时重新训练一个模型上划线是一个任意的过程。我们如何想出更好的可视化工具？</p></li><li><p><strong>仪表盘的目标</strong>。监测可视化的目的是帮助用户与他们的数据和模型保持同步。为此，好的监测仪表板应该毫不含糊地回答具体问题，如：：</p><ul><li>实时ML的性能是什么？</li><li>这个性能是比预期的高还是低？比要求的（即满足SLOs）？</li><li>性能降低的原因是数据质量问题吗？</li><li>模型应该被重新训练吗？</li></ul></li><li><p>仪表盘应该只包含少数几个描述 “统治它们的单一指标”（即SLI）的图，这样用户就不会被淹没了。</p></li><li><p><strong>仪表盘的挑战</strong>。在两个以上的维度上实现指标的可视化是非常困难的。不幸的是，在涉及到ML指标时，我们至少有以下几个维度：</p><ul><li>度量值</li><li>组件（即管道中跨组件的连接，见本系列第二篇文章中的单组件与跨组件的讨论）。</li><li>状态（即输入和输出的历史值）</li><li>子种群（包括特征群）</li><li>时间（一般意义上的时间，例如，绘制过去6个月内100天窗口的滚动平均值）</li></ul></li><li><p>我们如何开发出能明确传达所有这些维度的信息而又没有太多认知开销的可视化产品？</p></li><li><p><strong>争取实现有洞察力的可视化</strong>。与前文所述的细粒度监测信息相结合，一个好的仪表盘将有深刻的可视化，让用户对分布如何变化有直观感受。ML工程师使用的现有的 “最先进的 “可视化（通过口口相传确定，所以要慎重对待8）包括比较两个数据集的静态条形图直方图。这在流式ML环境中很难推理。什么新的可视化类型可以解释细粒度指标的变化？这里有一个高尖预测的 “动态 “小提琴图的例子，显示了输出的分布如何随时间变化：</p></li><li><p><img src="/img/wuweiwu/ml/model_monitor_translate/output_violin.gif"></p></li><li><p>图2：产出随时间的分布。</p></li><li><p>在上面的例子中，由于我们有充分的反馈（即所有的预测都有标签），SLI（准确性）有确认的下降。在我们需要近似SLI和假设推理细粒度指标的情况下，也许用户可以直观地看到这样一个可视化的季节性。这绝对不是万能的解决方案，但要回到主要的问题：<strong>研究的挑战在于如何以有原则的方式提出更好的可视化来理解数据漂移，并根据用户工作的数据和ML任务自动将其呈现给用户。</strong></p></li></ul><h3 id="数据集和基准"><a href="#数据集和基准" class="headerlink" title="数据集和基准"></a>数据集和基准</h3><ul><li>由于缺乏对 “真实世界 “流式ML任务的访问，许多研究人员和开发人员主要用玩具数据或合成分布转移来工作。为此，有几个问题围绕着数据集和基准来加速ML监测的进展：</li></ul><ol><li><strong>一个实时数据流的存储库，对应于可操作的ML任务。</strong>一个好的数据流的属性包括：它是无限的，代表了一个真实世界的现象，并且有一个比预测天气或股票价格更容易解决的ML任务。一个影响特别大的问题可能是以太坊天然气价格预测。具体来说，一个模型能否以95%的置信度输出未来一小时内一笔交易所需的最低天然气价格？另一个选择是将现有的基准转换为流格式（例如，从WILDS的训练和测试分布（D和D’）中取样点xt，用一个函数，当时间戳t小时，xt∈D的概率很高，当t大时，xt∈D’的概率很高）。理想情况下，我们收集更多的 “时间演化的表格数据流”，因为这种类型的数据在研究界大量存在。</li><li><strong>以直观的方式从资源库中查询数据的接口</strong>,大多数数据科学家并不使用流式系统，那么我们如何让他们进行范围查询并接收Pandas或PyTorch数据集？我们如何保障用户在试验新想法时不被标签泄露或意外地偷看到未来？</li><li><strong>用于创建和评估训练模型的策略的接口</strong>（我敢说是DSL？)mltrace的愿景是成为一个类似于React的库，用户在其中定义管道的组件，并在每个组件运行之前和之后运行触发器。在这些触发器中，用户可以根据自己的标准决定重新训练模型–比如数据漂移指标或预定更新。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>有了关于一个ML任务的足够的上下文，就有可能解决该任务特有的数据管理问题。但在构建一个通用的监控工具时，还有其他一些挑战，这些挑战源于ML管道和系统复杂性的增加，包括：</li><li><strong>壮大的数据科学团队和工具栈</strong>。软件工程表明，团队和工具栈的分散性使其很难保持系统的可持续性。这将适用于ML，特别是当可能的ML数据管理工具的数量每年大量增加时。调试一个别人训练的模型是一件很痛苦的事情。</li><li><strong>模型堆叠</strong>。许多组织将模型连锁在一起以产生最终的预测。漂移检测对于一个模型来说已经很困难了。将错误的预测追溯到需要调试的特定模型上，似乎更具挑战性。</li><li><strong>无法解释的特征</strong>。许多组织使用ML来产生嵌入，并将其作为特征输入到下游的ML任务中。数据质量警报，如用户定义的特征列的约束，然后无法构建。</li><li><strong>将组件作为容器化应用进行部署</strong>。在Kubernetes集群中很难做ML。容器化基础设施主要适用于无状态的应用程序，不幸的是，在线和持续学习是有状态的（即模型权重被更新，需要在预测服务荚之间共享）。</li><li><strong>多模态数据</strong>。我在这篇文章中概述的许多解决方案想法都是针对表格数据的。我们可以在图像、音频和视频案例中使用什么技术？我敢说，信息的 “数据湖”？</li><li>我还没有太深入地思考这些临时性的挑战，但我怀疑一个好的ML监测工具至少会意识到这些挑战。最后，我想以个人名义结束这个系列。10我很感激有时间批判性地思考ML监控，以及行业专家和学术合作者的支持。我很幸运能读博士，我为自己能写出的论文感到兴奋!</li><li>感谢Divyahans Gupta和我的导师Aditya Parameswaran的头脑风暴帮助和对许多草案的反馈。</li></ul><hr><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><ol><li>通常情况下，我谈论的是可观察性。监测是可观察性中的一个子问题，有最有趣的研究问题（在我看来）。</li><li>新的挑战出现在模型的堆叠上，或者将模型串联在一起，形成最终的预测结果。</li><li>不清楚 “粗粒度 “和 “细粒度 “是否是这里的最佳术语。DG建议采用 “外部 “与 “内部 “的衡量标准。如果您对此有任何想法，请告诉我！</li><li>基于 timely-dataflow（基于Rust的差分数据流实现）。向Peter Schafhalter致敬，感谢他在这方面的快速工作。</li><li>我应该进一步阐述这些方法。</li><li>更不用说，确定哪些子组有较高的滞后时间，对调试工作有帮助。</li><li>这里不点名，但如果你有兴趣，请查看ML监控公司的演示。</li><li>我们RISELab的几个人正在进行一项采访研究，以正式撰写部署后ML维护的 “最佳实践”。</li><li>深度学习的危险性就属于这个范畴。</li><li>向那些能看完本系列所有4篇文章的人表示敬意。我是认真的。我很确定我还没有读完这里的所有字。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;作者：Shreya-Shankar-原文连接：rethinking-ml-monitoring-4&quot;&gt;&lt;a href=&quot;#作者：Shreya-Shankar-原文连接：rethinking-ml-monitoring-4&quot; class=&quot;headerlink&quot; t</summary>
      
    
    
    
    <category term="技能-修行-进步" scheme="http://example.com/categories/%E6%8A%80%E8%83%BD-%E4%BF%AE%E8%A1%8C-%E8%BF%9B%E6%AD%A5/"/>
    
    
    <category term="机器学习" scheme="http://example.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="MLOps" scheme="http://example.com/tags/MLOps/"/>
    
  </entry>
  
  <entry>
    <title>现代机器学习监控的混乱局面：重新思考流媒体评估（3/4）</title>
    <link href="http://example.com/2023/05/24/model_monitoring_mess_part03/"/>
    <id>http://example.com/2023/05/24/model_monitoring_mess_part03/</id>
    <published>2023-05-24T11:12:16.000Z</published>
    <updated>2023-07-16T12:10:50.194Z</updated>
    
    <content type="html"><![CDATA[<ul><li>作者：Shreya Shankar</li><li>原文连接：<a class="link"   href="https://www.shreya-shankar.com/rethinking-ml-monitoring-3/" >rethinking ml monitoring 3<i class="fas fa-external-link-alt"></i></a></li></ul><hr><ul><li>在上一篇文章中，我调查了现有的部署后问题，并将它们分为两个轴：状态和组件。我提到，监控跨组件的状态指标，如模型的准确性，对于维护ML管道至关重要，但在现有的工具中却很困难。在这篇文章中，我们将亲身体验这些困难：我们将用Prometheus（一种流行的软件监控工具）扩展一个玩具ML管道，以提供ML监控。在这个过程中，我们将看到Prometheus的许多不足之处，从代码混乱到算法的低效率</li></ul><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><ul><li>有一天在工作中，当我在Slack频道中浏览AWS警报的时候，我突然意识到我的infra同事和我对 “标签 “一词的解释非常不同。他指的是一个标识符。我是指预测的真实值。我们只是在一个大项目进行了几个月后才发现我们是错位的。值得庆幸的是，我们从未在同一个任务上合作过，所以对我们没有任何影响。但我想知道这种错位是否会在其他组织中造成问题。</li><li>我认为关于ML监测的讨论中最令人困惑的方面是术语。像 “度量 “和 “标签 “这样的术语是超载的。在这篇文章中，我将利用以下定义：<ul><li>指标：一个汇总数据的函数，以评估管道的性能如何（例如，平均值、准确度）。</li><li>普罗米修斯公制：数字测量的时间序列</li><li>标识符：分配给一个对象或对象集合的唯一名称</li><li>预测：由一个ML模型做出的输出</li><li>反馈：预测的 “真实 “值</li><li>服务水平指标（SLI）：一个汇总预测和反馈的函数，以评估管道的性能如何（例如，准确性）</li></ul></li></ul><h2 id="ML任务，数据源，和管道"><a href="#ML任务，数据源，和管道" class="headerlink" title="ML任务，数据源，和管道"></a>ML任务，数据源，和管道</h2><ul><li>在这个练习中，我使用纽约市出租车联盟的数据构建了一个ML管道来预测出租车乘客是否会给司机高额小费（二元分类）。使用Prometheus，我们将监测<strong>累积的准确性</strong>，或者说自部署以来所有预测的准确性。训练和推理管道在架构上共享一些组件，看起来像这样：</li><li><img src="/img/wuweiwu/ml/model_monitor_translate/pipeline.svg" alt="ml pipeline"></li><li>图1：ML管道架构。</li><li>由于这是一个二元分类问题，推理组件产生0和1之间的浮动值预测，而反馈组件返回0或1的值。我把我的管道和实验代码寄存在这个资源库中，结构如下：</li><li><img src="/img/wuweiwu/ml/model_monitor_translate/repo_structure.png"></li><li>我在2020年1月的数据上运行训练管道，模拟2020年2月1日开始的部署。我没有进行任何再训练，主要是因为这个练习的目的是展示Prometheus的故障模式，而不是调试由 “数据漂移 “导致的低SLI。</li></ul><h2 id="Prometheus入门"><a href="#Prometheus入门" class="headerlink" title="Prometheus入门"></a>Prometheus入门</h2><ul><li><p>普罗米修斯(Prometheus)是一个开源的软件监控工具：</p><ol><li>收集和存储指标，如响应延迟</li><li>允许用户通过一种名为PromQL的查询语言查询公制值的集合（例如平均延迟）。</li></ol></li><li><p>普罗米修斯支持四种类型的度量值：</p><ul><li><strong>计数器</strong>：一个单调增长的累积度量。例如，可用于跟踪预测服务的数量。</li><li><strong>仪表</strong>：一个代表单一数值的度量，可以任意改变。例如，可以用来跟踪当前的内存使用情况。</li><li><strong>直方图</strong>：一个将观察到的数值归类到用户预先定义的桶中的度量衡。这有很高的服务器端成本，因为服务器在查询时要计算量值。</li><li><strong>摘要</strong>：在一个滑动的时间窗口中跟踪用户预先定义的量化指标。这具有较低的服务器端成本，因为量值是在登录时配置和跟踪的。另外，摘要指标一般不支持查询中的聚合。</li></ul></li><li><p>通常情况下，企业的DevOps或SRE人员使用Prometheus来监控软件SLO。用户用他们的应用程序代码来记录Metric值。这些值被刮取并存储在Prometheus服务器中。这些值可以使用PromQL进行查询，并导出到Grafana等可视化工具中。该架构看起来像这样：</p></li><li><p><img src="/img/wuweiwu/ml/model_monitor_translate/promarchitecture.png" alt="prom architecture"></p></li><li><p>图2：普罗米修斯架构。</p></li><li><p>Ivan Velichko的这一系列教育性的帖子很好地解释了普罗米修斯。我将总结他的一些关键点：</p><ul><li>普罗米修斯不是一个时间序列数据库（TSDB）。它只是利用了一个TSDB。</li><li>由于普罗米修斯定期刮取数值，如果度量值的变化比刮取间隔更频繁，一些度量类型（如仪表）会失去精度。这个问题不适用于单调增长的度量（如计数器）。</li><li>Metrics可以用任意的标识符来记录，这样在查询时，用户可以通过标识符的值来过滤Metrics。</li><li>PromQL很灵活–用户可以在不同的窗口大小上计算许多不同的度量值聚集，这些参数可以在查询时指定。</li></ul></li><li><p>Velichko承认，PromQL在实际软件应用中的使用 “远非微不足道”（也就是说，令人讨厌）。然而，在学习了矢量匹配和其他语法之后，我认为它并不太糟糕–特别是当我们不需要加入Metrics的时候。PromQL查询通常不会太长，而且在查询时有许多辅助函数可以使用。但我们会看到它对ML监控的情况有多糟糕。</p></li></ul><h2 id="Prometheus-🤝-ML"><a href="#Prometheus-🤝-ML" class="headerlink" title="Prometheus 🤝 ML"></a>Prometheus 🤝 ML</h2><ul><li>以下问题将有助于评估Prometheus是否是一个合适的ML监控解决方案：<ol><li>我们可以使用Prometheus Metrics来跟踪我们的ML管道中的任何ML指标吗？将 “ML度量 “映射到Prometheus Metric类型并不直接。对于单一组件的有状态指标，也许我们想使用直方图或汇总指标。如果我们对跨组件的有状态度量感兴趣，我们需要考虑如何将不同组件的度量 “连接 “起来，以计算ML SLI，如准确度和精确度。</li><li>用PromQL编写ML SLI有多难？</li><li>ML SLI的查询延时是多少？</li></ol></li></ul><h2 id="管线仪表"><a href="#管线仪表" class="headerlink" title="管线仪表"></a>管线仪表</h2><h3 id="跨组件的有状态度量"><a href="#跨组件的有状态度量" class="headerlink" title="跨组件的有状态度量"></a>跨组件的有状态度量</h3><ul><li>普罗米修斯的指标类型（计数器、测量仪、直方图或摘要）没有一个明显地映射到我们想要测量的SLI：累积精度。相反，我们将使用2个Gauge Metric3–一个用于管道预测，一个用于反馈–并在PromQL中聚合它们来计算准确性。在mext&#x2F;prometheus_ml_ext.py中，我定义了一个BinaryClassificationMetric类，其中包含Gauge Metrics以及logOutputs和logFeedbacks方法，以便在每次推理调用后更新它们。对应用程序进行仪表化是非常直接的。下面是inference&#x2F;main.py中的Prometheus专用代码：</li><li><img src="/img/wuweiwu/ml/model_monitor_translate/code1.png" alt="inference code"></li><li>将累积的准确度表现为两个Gauge Metrics并不完全是直接的，但我仍将这种经验评为简单。</li></ul><h3 id="单一成分的有状态度量"><a href="#单一成分的有状态度量" class="headerlink" title="单一成分的有状态度量"></a>单一成分的有状态度量</h3><ul><li>ML监控解决方案经常监控输入和输出的聚集，如中位数和p90，以粗略地测量 “数据漂移”。有时，他们还计算更复杂的统计测试（如Kolmogorov-Smirnov测试），我肯定永远无法用PromQL来写。这些方法既不健全也不完整，但为了这个练习的目的，我们可以用直方图度量来跟踪输出值的各种百分位数。下面是inference&#x2F;main.py中的相关仪表代码：</li><li><img src="/img/wuweiwu/ml/model_monitor_translate/code2.png"></li><li>这种整合比跨组件的情况更容易，但一个主要的缺点是，我们需要提前定义我们的直方图桶。这有两个原因：（1）我们常常不知道输出的分布是什么样子的，（2）分布可能随着数据的 “漂移 “而改变。</li></ul><h2 id="用于ML-SLI的PromQL"><a href="#用于ML-SLI的PromQL" class="headerlink" title="用于ML SLI的PromQL"></a>用于ML SLI的PromQL</h2><ul><li><p>现在我们已经检测了我们的管道，我们可以通过Docker-Compose启动我们的容器，开始使用PromQL刮取记录的Metric值并提取我们的ML指标。使用PromQL结构和一个很大的白板，我想出了以下查询：</p></li><li><p><img src="/img/wuweiwu/ml/model_monitor_translate/cmp.png"></p></li><li><p>在ML SLI中使用PromQL有几个问题：</p></li><li><p><strong>不正确性</strong>。当我第一次运行查询的准确性时，我很惊讶，结果并不完全准确（哈哈）。这是因为我的搜刮间隔是15秒，这对于我产生新预测的速度来说太大了。把搜刮间隔缩短到5秒，提高了查询的精确性，但使Prometheus容器的速度变慢，消耗更多的内存和计算资源。</p></li><li><p><strong>滑动窗口的挑战</strong>。即使在几个小时后，我也无法弄清楚如何在固定的窗口大小上计算前3个指标中的任何一个（交叉成分）。我没有发现关于在滑动窗口上计算PromQL中的连接的资源。我不太擅长使用Prometheus，所以请让我知道是否有可能通过窗口计算这些指标。</p></li><li><p><strong>复杂的查询</strong>。表中的最后3个指标（单成分）并不像前3个（跨成分）那样错综复杂。我不会期望任何数据科学家编写这些跨组件的PromQL查询，特别是对于那些简单地调用scikit-learn模块的函数。一个理想的监测工具应该允许用户将自定义的Python函数作为指标传入，并在后端有效地产生这些指标的值。</p></li></ul><h2 id="查询延时"><a href="#查询延时" class="headerlink" title="查询延时"></a>查询延时</h2><ul><li>在本小节中，我将重点讨论延迟问题，特别是跨组件查询的延迟。为了计算类似SLI的准确性，如上一小节所示，我们需要对output_id做一个连接。这是对Prometheus的严重滥用，因为output_id的cardinality显然会随着ML管道的预测数量而增长。<strong>Prometheus并不是为了处理高卡数的标识符，更不用说高卡数的连接了。</strong></li><li>为了证明Prometheus的扩展性有多差，我设计了一个小型的Postgres后端，将预测和反馈放在以时间戳为索引的表中。我计算了PromQL和PostgreSQL的准确度，并测量了与管道产生的预测数量有关的延时：</li><li><img src="/img/wuweiwu/ml/model_monitor_translate/querylatency.png"></li><li>图3：ML查询的延迟。</li><li>由于Prometheus度量值不是急于计算的（也就是说，当用户想在Grafana上查询或绘制一段时间的度量值时，它们都会被计算出来）、<strong>这种延迟是不可接受的，而且不能扩展。</strong> 随着更多预测的产生，许多想要跟踪实时ML SLI的组织可能无法足够快地更新或刷新他们的SLI。也许在某些领域，每天甚至每小时计算一次SLI可能就足够了，但对于数据和用户偏好经常变化的领域来说，这就不适用了。我知道我在使用Prometheus的情况下，它并不是为之设计的，但总的来说，这些问题共同突出了企业的需要：（1）有一个ML监控团队，在Postgres或现有的DBMS之上创建一个层，或者（2）利用一个专门用于ML监控的专有供应商。我相信，现在、<strong>我们需要更好的ML监测实践和工具。</strong></li></ul><h2 id="回顾总结"><a href="#回顾总结" class="headerlink" title="回顾总结"></a>回顾总结</h2><ul><li><p>在这篇文章中，我强调了使用Prometheus进行ML监控的一些主要隐患，最明显的是：</p></li><li><p>需要使用多个普罗米修斯公制类型进行跨组件监测</p></li><li><p>需要提前定义直方图桶以进行单组件监控</p></li><li><p>查询结果的正确性取决于搜刮时间间隔</p></li><li><p>无法处理滑动窗口</p></li><li><p>看起来很恶心的PromQL查询</p></li><li><p>跨组件指标的高延迟（即高cardinality连接）。</p></li><li><p>在这个系列的下一篇也是最后一篇文章中，我将讨论建立一个通用的ML监控工具的一些关键要求和想法。我非常高兴能与大家分享，同时还有一个监测实时ML SLI的原型。更多的内容将陆续推出，新年快乐!</p></li><li><p>感谢Divyahans Gupta, Preetum Nakkiran, 和Peter Schafhalter对许多草案的反馈。</p></li></ul><hr><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><ol><li>这个帖子是针对ML工程师和信息员的。我建议对数据库（如表、连接、索引）、ML SLI（如准确性、精确性、召回率）和查询语言（如SQL、PromQL）有基本认识。</li><li>我用大写的Metric来指代Prometheus Metric的抽象概念。</li><li>我为预测和反馈选择了Gauge Metric，因为它们表示可以上升或下降的数值。由于反馈和推理组件在ML管道中通常是相互分离的，所以真的没有办法（我能想到的）避免连接。</li><li>如果这些查询是错误的，我也不会感到惊讶。如果有错误，请纠正我。</li><li>也许这不是一个失败的模式–我只是想不通。如果我错了，请让我知道!</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;作者：Shreya Shankar&lt;/li&gt;
&lt;li&gt;原文连接：&lt;a class=&quot;link&quot;   href=&quot;https://www.shreya-shankar.com/rethinking-ml-monitoring-3/&quot; &gt;rethinking ml </summary>
      
    
    
    
    <category term="技能-修行-进步" scheme="http://example.com/categories/%E6%8A%80%E8%83%BD-%E4%BF%AE%E8%A1%8C-%E8%BF%9B%E6%AD%A5/"/>
    
    
    <category term="机器学习" scheme="http://example.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="MLOps" scheme="http://example.com/tags/MLOps/"/>
    
  </entry>
  
  <entry>
    <title>现代机器学习监控的混乱局面：重新思考流媒体评估（2/4）</title>
    <link href="http://example.com/2023/05/24/model_monitoring_mess_part02/"/>
    <id>http://example.com/2023/05/24/model_monitoring_mess_part02/</id>
    <published>2023-05-24T10:19:16.000Z</published>
    <updated>2023-07-16T12:05:01.795Z</updated>
    
    <content type="html"><![CDATA[<ul><li>作者：Shreya Shankar</li><li>原文连接：<a class="link"   href="https://www.shreya-shankar.com/rethinking-ml-monitoring-2/" >rethinking ml monitoring 2<i class="fas fa-external-link-alt"></i></a></li></ul><hr><ul><li>在《现代ML监控乱象》系列的最后一篇文章中，我讨论了现有流式ML指标失败的一些方式。在这篇文章中，我从 “以数据为中心 “的角度过渡到软件工程的角度：我调查了现有的部署后问题，并将其分类，以激励更好的开源ML监控工具。</li></ul><h2 id="作为ML从业者，我们如何分配我们的时间？"><a href="#作为ML从业者，我们如何分配我们的时间？" class="headerlink" title="作为ML从业者，我们如何分配我们的时间？"></a>作为ML从业者，我们如何分配我们的时间？</h2><ul><li>最近，Zillow因其最新的ML灾难而在社交媒体上引起热议。一些人声称他们的ML购房和售房项目因低质量的预测而关闭。另一些人则认为，关闭的原因是没有关于如何对预测采取行动的组织程序–员工手动推翻了预测，以满足他们自己的配额。谁知道问题是什么，但我认为Zillow的新闻变得非常流行的一个重要原因是<strong>我们所做的许多ML应用在生产中都是不稳定的。</strong> 我们不知道他们是否或何时会失败。我们不知道，在组织上，如何对模型输出采取行动。而且我们肯定不知道当我们怀疑ML管道或管理方面出现一些故障时该怎么做。</li><li>为了剖析如何改善应用ML的令人苦恼的状态，我认为了解ML从业者目前如何分配他们的时间很重要。经过广泛的搜索，我在一篇关于87%的机器学习项目失败的文章中发现了一个相当准确的细分（在我看来），即行业ML项目是如何分配时间的：</li><li><img src="/img/wuweiwu/ml/model_monitor_translate/time-spend.png" alt="time spend"></li><li>图1：分解ML项目时间分配的图表，取自iiot-world。</li><li>图1显然解释了为什么数据标签初创公司目前在MLOps市场上获胜，但我更感兴趣的是，随着越来越少的ML项目失败，细分市场将如何变化。就像在软件方面一样，我怀疑在未来5年内，图表中的大部分大众都会在运营化方面。<strong>我们如何从数据化中去除质量，并将更多的质量放在监测上？</strong></li></ul><h2 id="构建一个ML管道"><a href="#构建一个ML管道" class="headerlink" title="构建一个ML管道"></a>构建一个ML管道</h2><ul><li><p>上图所示的分类对于失败的ML项目来说感觉很准确。在我以前的ML工作的任期结束时，我们最终遵循这个过程来建立新的成功的ML管道：</p><ol><li>想出针对ML的服务水平目标（SLO），比如在每月的窗口中90%的召回率 🪟</li><li>编写为占位的ML管道输出计算SLO的函数（例如，基线预测概率） 🪠</li><li>编写确认校准输出的函数 ⚖️</li><li>编写管道的所有组件或阶段，除了模型训练&#x2F;评估之外 🔧</li><li>进行仔细的探索性数据分析，编写清理数据、选择特征等的管道组件 📊</li><li>将上述所有内容生产化 🚧</li><li>训练&#x2F;评估逻辑回归模型或决策树 🌲</li><li>逐步改善模型 📈</li></ol></li><li><p>这里的关键是，<strong>在管道的一些骨干部分投入生产之前，我们没有做任何建模工作</strong>、消除了花在数据预处理上的时间，这可能是特定的训练&#x2F;测试分割。然而，在我上面描述的范式中，我们在管道中的数据处理组件中仍然有bug（我认为这是不可避免的）。当采用这种模式时，我注意到我的大部分开发人员的时间从 “研发 “建模工作转移到监控生产ML服务。</p></li><li><p>几个月来，我一直记录着我个人在监控时面临的部署后问题。缺少数据导致空值键的连接，子组表示法随时间变化，将错误的模型推广到生产中，上游依赖关系（如嵌入）变化，Spark节点故障……这个清单似乎没有尽头。每当我面临一个新问题时，我都试图设计一个警报，以防止未来出现这种故障模式。<strong>随后，管道代码逐渐变得不可持续，而我在生产中仍然面临着许多新的挑战–促使我思考更清洁的部署后问题的分解。</strong></p></li></ul><h2 id="部署后问题的分类"><a href="#部署后问题的分类" class="headerlink" title="部署后问题的分类"></a>部署后问题的分类</h2><ul><li>假设一个团队为一项任务定义了一个具体的ML SLO，比如在每月的窗口中90%的召回。重新表述我关于部署后问题的问题–这些SLO没有达到的原因有哪些？我喜欢Neptune.ai博客文章中的这个表格：</li></ul><table><thead><tr><th></th><th>生产挑战</th><th>关键问题</th></tr></thead><tbody><tr><td>1</td><td>数据分布变化</td><td>为什么我的特征值会有突然的变化？</td></tr><tr><td>2</td><td>生产中的模型所有权</td><td>谁拥有生产中的模型？DevOps团队？工程师？数据科学家？</td></tr><tr><td>3</td><td>训练-部署不一致</td><td>尽管我们在开发过程中进行了严格的测试和验证尝试，但为什么该模型在生产中给出的结果不佳？</td></tr><tr><td>4</td><td>模型&#x2F;概念漂移</td><td>为什么我的模型在生产中表现良好，而随着时间的推移，性能突然下降？</td></tr><tr><td>5</td><td>黑匣子模型</td><td>我如何根据商业目标并向相关的利益相关者解释和说明我的模型的预测？</td></tr><tr><td>6</td><td>一致的对手</td><td>我怎样才能确保我的模型的安全？我的模型被攻击了吗？</td></tr><tr><td>7</td><td>模型准备情况</td><td>我如何将我的模型的较新版本的结果与正在生产的版本进行比较？</td></tr><tr><td>8</td><td>管道健康问题</td><td>为什么我的训练管道在执行时失败？为什么再培训工作需要这么长时间才能运行？</td></tr><tr><td>9</td><td>表现不佳的系统</td><td>为什么我的预测服务的延迟非常高？为什么我的不同模型的延迟有很大的不同？</td></tr><tr><td>10</td><td>极端事件的案例（异常值）</td><td>我将如何在极端和非计划的情况下跟踪我的模型的效果和性能？</td></tr><tr><td>11</td><td>数据质量问题</td><td>我怎样才能确保生产数据的处理方式与训练数据的处理方式相同？</td></tr></tbody></table><ul><li>图2：部署后问题表，取自Neptune.ai。</li><li>说实话，很多博客文章读起来就像洗衣清单。作为一个懒人，我绝不会在每个拉动请求上手动检查每个清单项目。<strong>我们如何使这些挑战更容易推理，以便我们能够建立一个监测工具？</strong> 戴上我的软件工程帽子，我发现将这些生产挑战（以及其他挑战）提炼成四种类型的问题是很有帮助的，这些问题沿着两个轴线（状态和组件）分组：</li><li><img src="/img/wuweiwu/ml/model_monitor_translate/state-componet.jpg" alt="state and component"></li><li>图3：将少数部署后的问题按状态和组件轴进行分类。</li><li>让我定义一下 “状态 “和 “组件”，以便图3真正有意义。很多时候，只有当你将数据点与历史上的一组数据点进行比较时，你才知道ML系统中存在一个错误。例如，也许代表传感器数据的表格中的一列主要是空值。是传感器刚刚坏了，还是它一直都在坏？为了回答这样的问题，你需要跟踪历史数据，或状态。此外，你可能需要来自多个不同组件的信息来诊断一个ML系统的故障模式。例如，假设模型训练的数据和模型推断预测的实时数据之间存在差异。显然，一个调试器应该关心ML管道的训练和推理部分。我把这种错误定义为跨组件的错误。</li><li>对我来说，理解这些轴线，就可以知道为什么ML监控从根本上说比传统的软件监控更难，也更有区别。软件SLI完全属于单组件区域，如平均响应延迟。最复杂的软件SLI是有状态的和单组件的，促使了像Prometheus这样的工具。<strong>但最基本的ML SLI，如准确度，是有状态的和跨组件的–最难处理的桶。</strong> 一旦你能够有效地监控这种有状态的跨组件指标（如实时准确性），以确定何时有bug，了解有状态的单组件指标，如第90个百分点的特征值，是很有用的，因为你就可以确定bug在你的管道中的位置。</li></ul><h2 id="通过状态-组件视角查看现有的工具"><a href="#通过状态-组件视角查看现有的工具" class="headerlink" title="通过状态-组件视角查看现有的工具"></a>通过状态-组件视角查看现有的工具</h2><ul><li>我个人对一个完全开源的监控解决方案很感兴趣，它可以有效地、快速地、以一种需要用户付出最小努力的方式来跟踪可能属于这4组中任何一组的指标。现有的工具能做到这一点吗？从我的研究中，我发现开源监控工具只涉及4个组的一个子集。我在头脑中把现有的工具分为以下几个 “层次”：<ol><li>缠绕着的报告 scipy.your_favorite_statistical_test(finite_sample_from_dist_A_that_you_define, finite_sample_from_dist_B_that_you_define) —用户被迫跟踪状态和组件。在这里，用户需要解决数据管理问题，即为他们关心的每个组件存储历史输入和输出，编写作业来反复对感兴趣的数据进行子采样并创建这些报告，并在这个过程中组织所有工件。</li><li>工作流协调工具（如Airflow、Argo、Kubeflow）–用户被迫跟踪状态。在这里，仪表盘会向你显示单个管道运行中不同任务或组件的详细结果。但用户无法真正访问当前运行中的历史运行值。</li><li>Postgres数据库持有单个组件的历史输入和输出，以及一个显示np.some_aggregation(dist_A)随时间变化的仪表板–用户被迫跟踪组件。在这里，用户需要知道要监控哪些组件，手动连接组件的输入和输出以进行任何自定义的聚合（例如，F1分数），并定义他们自己的标准，即如何以及何时对仪表盘的结果采取行动。例如，如果一个特征的平均值变化了10%，用户会怎么做？</li><li>专有的供应商，鉴于对你的数据和模型的访问，为你监控一切。不知道这些公司是做什么的，所以我不作评论。</li></ol></li></ul><h2 id="回顾总结"><a href="#回顾总结" class="headerlink" title="回顾总结"></a>回顾总结</h2><ul><li>在这篇文章中，我讨论了如何通过两个简单的轴对部署后问题进行分类：状态和组件。我不想讨论如何监测我在图3中描述的每个问题，但回到我在本期第一篇文章中提出的一个问题–要如何扩展现有工具以支持有状态的组件和跨组件的情况？是否有可能轻松地扩展它们？在下一篇文章中，我将探讨如何调整Prometheus以监测ML，并研究它的缺陷所在。</li><li>感谢Laszlo Sragner对早期草案的反馈。</li></ul><hr><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><ol><li>我喜欢数据科学博客文章中点击率高的标题。🙃</li><li>这并不是要挖苦博文作者；而是要说明生产ML问题的广泛性。</li><li>这并不明显，为什么像准确性这样的实时指标的近似是一个有状态的和跨组件的程序。这是有状态的，因为你需要一组历史预测和标签来计算这个指标。这是跨组件的，因为在许多情况下，提供预测的组件与收集反馈（标签）的组件不同。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;作者：Shreya Shankar&lt;/li&gt;
&lt;li&gt;原文连接：&lt;a class=&quot;link&quot;   href=&quot;https://www.shreya-shankar.com/rethinking-ml-monitoring-2/&quot; &gt;rethinking ml </summary>
      
    
    
    
    <category term="技能-修行-进步" scheme="http://example.com/categories/%E6%8A%80%E8%83%BD-%E4%BF%AE%E8%A1%8C-%E8%BF%9B%E6%AD%A5/"/>
    
    
    <category term="机器学习" scheme="http://example.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="MLOps" scheme="http://example.com/tags/MLOps/"/>
    
  </entry>
  
  <entry>
    <title>现代机器学习监控的混乱局面：重新思考流媒体评估（1/4）</title>
    <link href="http://example.com/2023/05/24/model_monitoring_mess_part01/"/>
    <id>http://example.com/2023/05/24/model_monitoring_mess_part01/</id>
    <published>2023-05-24T09:01:16.000Z</published>
    <updated>2023-07-16T12:02:11.652Z</updated>
    
    <content type="html"><![CDATA[<ul><li>作者：Shreya Shankar</li><li><ul><li>原文连接：<a class="link"   href="https://www.shreya-shankar.com/rethinking-ml-monitoring-1/" >rethinking ml monitoring 1<i class="fas fa-external-link-alt"></i></a></li></ul></li></ul><hr><ul><li>我对MLOps感兴趣的部分原因是有太多的工具，而且我无法相信一些受人尊敬的软件老手和学者正在向左、向右、向中间推出新的创业公司。在我之前的公司，使用现有的DevOps工具来简化ML的部署和生产，让我走得很远–但还不够远，促使我思考MLOps问题的定制解决方案，比如ML监控。</li><li>我喜欢当博士生，因为我可以思考问题，而没有人嚷嚷着要我建立什么。事实是，当涉及到监测ML时，我不知道到底应该建立什么。ML监控的现状是，不加掩饰，一团糟。在这个由四篇文章组成的文集中，我说明了我对获得一个好的开源ML监控解决方案的想法，其大纲如下：</li></ul><ol><li>重新思考流媒体机器学习的评估(本篇)</li><li>对部署后的各种问题进行分类</li><li>调查现有的DevOps工具（如Prometheus）在机器学习监控方面的不足之处</li><li>建立一个通用的机器学习监测解决方案的具体研究挑战</li></ol><h2 id="重新思考流媒体ML的评估"><a href="#重新思考流媒体ML的评估" class="headerlink" title="重新思考流媒体ML的评估"></a>重新思考流媒体ML的评估</h2><ul><li>在我讨论什么是监控之前，我将把监控定义为：跟踪指标以确定应用程序何时失败。有很多文章都在说服你，监控对于机器学习应用是必要的。下面是我对为什么我们需要监控的两点看法：</li></ul><ol><li>生产中的应用程序将不可避免地遇到问题。我们希望尽早发现并解决这些问题，以尽量减少停机时间。</li><li>机器学习越来越多地被部署在高风险的场景中（例如，累犯、贷款、信用卡欺诈、招聘、自动驾驶汽车），其中的监管是不可避免的。</li></ol><ul><li>许多文章还讨论了在生产型ML系统中会出现哪些类型的错误，促使人们去监测什么。我个人对所有可能发生的bug以及必须执行和监控的大量测试和指标清单感到不知所措，以确保管道的 “良好 “健康。在我以前的工作中，我曾经有过一次生存危机，因为我不知道为什么要监控成千上万的东西；我只是认为这是管道 “不失败 “的必要条件。但 “失败 “是什么意思，特别是在ML背景下？</li></ul><h2 id="为什么造成这样的局面？"><a href="#为什么造成这样的局面？" class="headerlink" title="为什么造成这样的局面？"></a>为什么造成这样的局面？</h2><ul><li>机器学习领域有一个有趣的评估历史。针对ML的指标被设计用来评估一个特定模型在特定数据集上的表现。为了在 “学术 “环境中评估一个模型，几十年来，我们一直在测量固定的指标，如准确率、精确率和召回率，这些指标是我们的模型在训练期间没有看到的 “验证 “集。为了评估一个模型是否能推广到新的数据，机器学习入门课程强调了检查过拟合的重要性（即验证集指标应该接近训练集指标）。这真的是我们宣称可推广性所需要的全部吗？</li><li>在今天这个基准的黄金时代，我们并没有真正质疑这种在一些静态或固定的数据集上计算指标的评估程序（有一些例外）。最近，我的朋友Deb和其他ML领导人一直在提高人们对当前通用的ML评估方法在评估ML系统中与关键子群体（如种族）和外部性（如能源消耗）相关的失败模式方面的认识。我提到这项工作是因为我认为它非常重要，尽管与我在这里要谈的内容正交。</li><li>我们很清楚，在实践中，虽然所有的模型都是错误的，但有些模型是有用的。在 “行业 “背景下的ML评估，毫不奇怪，可以追溯到50年代和60年代的军事背景下。ROC曲线是在第二次世界大战期间发明的，用于对战场上的敌方物体进行分类，我想主要是因为从业者需要计算有用的模型，并随着时间的推移抛弃无用的模型。我喜欢把ROC曲线和PR曲线看作是更好的指标 “聚合”，它有助于告知模型输出的哪个阈值，以及这种阈值如何随时间变化。当在实践中（例如医疗）长期部署ML时，这种聚合显然是必要的。</li><li>因为在实践中，我们与数据流打交道，而不是固定的数据集，ML监测的行业标准（可能是软件监测的结果）遵循这些步骤：</li></ul><ol><li>选择他们认为代表模型性能的指标和阈值</li><li>选择一个滑动窗口大小（单位是基于时间的，如天或周）来计算指标。</li><li>当指标值下降到阈值以下时，设置警报。</li><li>警报后，手动或自动触发重新训练</li></ol><ul><li>这个过程假设故障被定义为指标值下降到其阈值以下。为什么我们需要把这个定义弄正确呢？在你不需要的时候触发重新训练的影响可能是不好的：它可能会浪费计算，或者如果最近的窗口不能代表未来的数据，它实际上可能会降低性能。在需要的时候不触发重新训练的影响是，你的性能将继续恶化–甚至可能无声无息。因此，我们希望我们的警报是健全的（即，没有错误的警报）和完整的（即，每次出现故障时都触发）。不幸的是，我总是得到太多或者太少的警报，促使我质疑–我们的评估程序有什么问题？</li></ul><h2 id="我们目前的做法有什么问题？"><a href="#我们目前的做法有什么问题？" class="headerlink" title="我们目前的做法有什么问题？"></a>我们目前的做法有什么问题？</h2><ul><li><p>现在我将论证为什么这种在数据流上评估ML的程序被打破了。假设我们有一个从时间t&#x3D;0开始的数据流。我们在t&#x3D;0和t&#x3D;i之间的数据上训练和验证一个模型。我们在t&#x3D;i处 “部署”，并连续计算跨越d天的滚动窗口的ML指标。</p></li><li><p><img src="/img/wuweiwu/ml/model_monitor_translate/train-d.png"></p></li><li><p>有一些自然和常见的现象会被计入公制计算中：</p><ul><li><strong>代表性差异</strong>。各个窗口的类比可能不一样（例如，一个窗口的阳性比例可能与另一个窗口的阳性比例有很大不同）。</li><li><strong>不同的样本大小</strong>。每个窗口中的数据点数量可能不同（例如，周日收到的请求数量少于周一收到的请求数量）。</li><li><strong>延迟的反馈</strong>。由于合理的事件（如失去互联网连接），标签可能会滞后出现，使得没有标签的预测不可能被纳入当前窗口的评估指标。</li></ul></li><li><p>在每一种情况下，即使你测量auROC和auPRC这样的聚合，指标值也会发生剧烈变化–而模型与预期任务的 “一致性”（即预测能力）或 “概念漂移 “没有任何变化。当我们触发重新训练时，我们隐含地相信我们的模型不具有我们预期的预测能力。如果我们的滚动窗口与我们的保留验证集的假设不一致（例如，我们的滚动窗口跨度为一周，而我们的验证集跨度为一个月），我们怎么能对这个信念有信心？大多数时候，我们并没有明确意识到在训练时所作的所有假设。<strong>我认为在一个滚动窗口上评估的ML特定指标告诉你的是模型的一致性，而不是该窗口中数据的属性。</strong></p></li><li><p>因此，由于我们不知道如何评价模型与预期任务的一致性，对数据流的评价在不同的组织中是不同的。我们不知道在哪里为可接受的业务绩效划线，所以我们看所有可辩护的指标（例如auROC），并试图为它们的一些聚合进行优化。虽然我们没有更好的选择（据我所知），但这显然是破绽百出的，并使ML在如此多的产品设置中变得毫无用处。许多行业的ML资深人士谈到，我们需要从ML指标到商业结果的清晰明确的映射–成熟的组织有一个ML模型的 “SLO “概念，其中BizDev和数据人员合作，以确定单一任务（SLO）的指标集合、窗口大小和警报程序。当SLO与任务不一致时，你不知道一个指标的下降是否应该触发一个重新训练！这种合作来计算SLO参数！这种计算SLO参数的合作迫使人们定义如何对模型输出采取行动。疯狂的是，可能需要几个月甚至一年的时间来确定正确的参数来计算SLO。更重要的是，与我的兴趣更相关的是—<strong>这样一个针对特定环境的ML SLO选择程序与建立一个通用工具来监控ML管道是不一致的。</strong></p></li></ul><h2 id="回顾总结"><a href="#回顾总结" class="headerlink" title="回顾总结"></a>回顾总结</h2><ul><li><p>因此，在我所概述的流媒体ML评估中确实有两个不同的问题：</p><ol><li>要使目前的 “行业标准 “评估程序（选择指标、阈值和窗口大小）发挥作用需要时间和许多资源</li><li>这个程序可能永远不会成功，这取决于数据的性质，而且通用性很差（即，需要同样多的时间和资源来解决新任务的评估协议或SLO）–使得ML在生产中真的很难实现</li></ol></li><li><p>我猜想，与ML相关的敏捷宣言的延伸以及围绕ML的优点和缺点的更好的教育可以解决第一个问题。第二个问题对我来说似乎更难解决–作为一个ML信息员，我对规定具体的SLO不感兴趣；我感兴趣的是建立基础设施，让任何人都能轻松监控他们关心的ML SLO。</p></li><li><p><strong>我希望我们的ML社区能更深入地思考如何普遍评估将在数据流上运行的模型的一致性或预测能力。</strong> 也许我们不能比我们已经有的程序做得更好，但我很好奇–我们能不能建立技术来理解ML结果的特定数据的时间性，并使用这些信息来为我们选择SLO？我们能不能建立更多的一般性指标，明确地与业务成果挂钩，如 “ML Apdex Score”？这些一般的指标能否对我上面概述的所有三种现象–代表性差异、不同的样本量和延迟反馈–保持稳健？我不知道这最终会是什么样子，但我相当有信心，能够阐明和衡量正确的SLO将为从生产性ML应用中获得价值提供巨大的突破。我很高兴我们能取得进展。</p></li><li><p>感谢Alex Tamkin、Rolando Garcia和Peter Schafhalter对许多草案的反馈。</p></li></ul><hr><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><ol><li>没有任何MLOps公司付钱给我写这个。我无法对隐藏在付费墙之外的解决方案发表明智的看法，所以我对现有的专有工具不做任何声明。另外，我认为完全开源的ML监控解决方案是有市场的。</li><li>对我来说，最有用的MLOps资源来自博客文章、Slack频道和口碑，这很疯狂。这个领域完全处于起步阶段。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;作者：Shreya Shankar&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;原文连接：&lt;a class=&quot;link&quot;   href=&quot;https://www.shreya-shankar.com/rethinking-ml-monitoring-1/&quot; &gt;rethi</summary>
      
    
    
    
    <category term="技能-修行-进步" scheme="http://example.com/categories/%E6%8A%80%E8%83%BD-%E4%BF%AE%E8%A1%8C-%E8%BF%9B%E6%AD%A5/"/>
    
    
    <category term="机器学习" scheme="http://example.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="MLOps" scheme="http://example.com/tags/MLOps/"/>
    
  </entry>
  
  <entry>
    <title>何仁讀通鑑 观后感</title>
    <link href="http://example.com/2023/05/21/%E4%BD%95%E4%BB%81%E8%AF%BB%E9%80%9A%E9%89%B4/"/>
    <id>http://example.com/2023/05/21/%E4%BD%95%E4%BB%81%E8%AF%BB%E9%80%9A%E9%89%B4/</id>
    <published>2023-05-21T05:29:33.000Z</published>
    <updated>2023-07-16T01:38:21.691Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a class="link"   href="https://www.youtube.com/watch?v=nrfczKWPZUo&list=PLl7zeOiApUFV6s8wLEO9bRoojIqDmCNPY&index=95" >何仁讀通鑑-Youtube<i class="fas fa-external-link-alt"></i></a></li></ul><h2 id="第二集：三家分晋"><a href="#第二集：三家分晋" class="headerlink" title="第二集：三家分晋"></a>第二集：三家分晋</h2><ul><li>蠢人-&gt;小人-&gt;君子-&gt;圣人</li><li>德才兼备谓之圣人，才德皆无谓之蠢人。</li><li>有德无才谓之君子，有才无德谓之小人。</li></ul><h2 id="第三集：商鞅变法"><a href="#第三集：商鞅变法" class="headerlink" title="第三集：商鞅变法"></a>第三集：商鞅变法</h2><ul><li>过程：<ul><li>为鞅对秦孝公说：</li><li>变法开始的时候，普通大众是不会自动自觉与你一起规划的，但是等到有成果可以享受的时候，他们就会心服诚服了 </li><li>立志实现至善大德之人不应该迎接草根阶层的想法，希望建立宏伟工业的人不能寄望于大众能够与你合作，</li><li>所以，只要能够使国家富强，圣人并不会一味固守旧法， 但是既得利益者就会反驳，因为他们要保住自己的利益能够维持下去，</li><li>为鞅答道：普通人因循守旧，知识分子满足于道听途说 ，他们只适宜于规规矩矩地做官生活，你不能和他们讨论超出这个特定范围的事物， </li><li>聪明人要制定规矩，蠢人就会加以掣肘；有才能的人要改变现有的秩序，没出息的人就会来捣乱。</li><li>秦孝公表示十分认同！</li></ul></li><li>变法涵盖经济，社会，政制等多个方面</li><li>变革，制定规则并且严格执行，重奖，严罚，大众和权贵都要遵守规则，变法才能发挥作用</li><li>支持精英治国，支持专业性，精英政治，以结果为第一评估原则</li><li>没有为自己埋好退路</li></ul><h2 id="第四集：怀王弱智"><a href="#第四集：怀王弱智" class="headerlink" title="第四集：怀王弱智"></a>第四集：怀王弱智</h2><ul><li>贪，狂，怨，软</li></ul><h2 id="第五集：秦王逐客"><a href="#第五集：秦王逐客" class="headerlink" title="第五集：秦王逐客"></a>第五集：秦王逐客</h2><ul><li>既要用才，亦要防才。所谓疑人不用，用人不疑好像是一个极端的说法，中国人最终都要找到一个中庸之道，找到一个平衡之处。</li><li>一代君主一朝臣</li></ul><h2 id="第八集：南越归汉"><a href="#第八集：南越归汉" class="headerlink" title="第八集：南越归汉"></a>第八集：南越归汉</h2><ul><li>真诚信件，趋利避害，不急一时的耐心</li></ul><h2 id="第九集：七国之乱"><a href="#第九集：七国之乱" class="headerlink" title="第九集：七国之乱"></a>第九集：七国之乱</h2><ul><li>固本培元</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;link&quot;   href=&quot;https://www.youtube.com/watch?v=nrfczKWPZUo&amp;list=PLl7zeOiApUFV6s8wLEO9bRoojIqDmCNPY&amp;index=95&quot; &gt;何仁讀通鑑-Youtub</summary>
      
    
    
    
    <category term="认知-修行-平衡" scheme="http://example.com/categories/%E8%AE%A4%E7%9F%A5-%E4%BF%AE%E8%A1%8C-%E5%B9%B3%E8%A1%A1/"/>
    
    
    <category term="从历史学习经验" scheme="http://example.com/tags/%E4%BB%8E%E5%8E%86%E5%8F%B2%E5%AD%A6%E4%B9%A0%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>Mac上通过airas2无限速下载网盘文件</title>
    <link href="http://example.com/2023/05/03/mac-ariel/"/>
    <id>http://example.com/2023/05/03/mac-ariel/</id>
    <published>2023-05-03T05:57:38.000Z</published>
    <updated>2023-07-16T01:32:13.287Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a class="link"   href="https://www.mintimate.cn/2019/06/21/Aria2/" >参考<i class="fas fa-external-link-alt"></i></a></li></ul><h2 id="度盘"><a href="#度盘" class="headerlink" title="度盘"></a>度盘</h2><ol><li>使用浏览器：chrome，科学上网，安装插件Tampermonkey，</li><li>安装前前下载插件，地址<a class="link"   href="https://greasyfork.org/zh-CN/scripts/463171-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E5%8D%83%E5%8D%83%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B" >https://greasyfork.org/zh-CN/scripts/463171-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E5%8D%83%E5%8D%83%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B<i class="fas fa-external-link-alt"></i></a></li><li>mac上安装aria2<ol><li>安装brew</li><li>通过brew安装aria2，brew install aria2</li><li>aira2.conf配置，附件</li><li>启动aira2后端程序</li></ol></li><li>mac上安装ariaNg，地址<a class="link"   href="https://github.com/mayswind/AriaNg-Native/releases" >https://github.com/mayswind/AriaNg-Native/releases<i class="fas fa-external-link-alt"></i></a></li><li>配置ariaRPC密码，连接成功</li><li>打开度盘网页页面，勾选单个你需要下载的文件，点击上方的千千下载插件按钮，进入获取下载链接页面，关注公共号，获取验证码，点击aira下载，并且输入你的token，就是上面设置的airaRCP密码，就可以高速下载了</li></ol><h2 id="雷盘"><a href="#雷盘" class="headerlink" title="雷盘"></a>雷盘</h2><ol><li>在greasyFork安装网盘下载助手，地址<a class="link"   href="https://greasyfork.org/zh-CN/scripts/436446-%E7%BD%91%E7%9B%98%E7%9B%B4%E9%93%BE%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B" >https://greasyfork.org/zh-CN/scripts/436446-%E7%BD%91%E7%9B%98%E7%9B%B4%E9%93%BE%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B<i class="fas fa-external-link-alt"></i></a></li><li>进入迅雷下载页面，勾选单个下载文件，点击上方的下载助手，选择RPC下载，填写你的配置端口和token后便可以成功下载</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;link&quot;   href=&quot;https://www.mintimate.cn/2019/06/21/Aria2/&quot; &gt;参考&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 </summary>
      
    
    
    
    <category term="小而美-工具" scheme="http://example.com/categories/%E5%B0%8F%E8%80%8C%E7%BE%8E-%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="下载工具" scheme="http://example.com/tags/%E4%B8%8B%E8%BD%BD%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>常霖法師講-學佛修行信願行</title>
    <link href="http://example.com/2023/03/18/buddism/"/>
    <id>http://example.com/2023/03/18/buddism/</id>
    <published>2023-03-18T03:58:38.000Z</published>
    <updated>2023-07-16T01:27:38.842Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、信：眾生皆可成佛，包含世界萬物，一草一木。"><a href="#一、信：眾生皆可成佛，包含世界萬物，一草一木。" class="headerlink" title="一、信：眾生皆可成佛，包含世界萬物，一草一木。"></a>一、信：眾生皆可成佛，包含世界萬物，一草一木。</h2><ul><li><a class="link"   href="https://youtu.be/UQiJj-gldWw" >【淨薈主辦】常霖法師講「學佛修行信願行」之一: 信 - YouTube<i class="fas fa-external-link-alt"></i></a></li><li>佛偈：<ul><li>人生難得今已得，佛法難聞今已聞；</li><li>此身不向今生度，更待何生度此身？</li></ul></li><li>世间万物必经阶段：成住坏空</li><li>佛曰：眾生皆苦，都有很多不完美，很多缺憾，所以我們需要修佛。</li><li>學佛是學習與自己的心相處，修佛是提升自己的覺察力，成佛是成為更好的自己，每個人心中都有一個佛陀，我們需要不斷進行修行，成為自己的佛陀，才能擺脫六道輪迴，進入西方極樂世界。</li><li>六道輪迴：天道，地道，人道，餓鬼道，地獄道，阿修羅道。只有在人道才能進行修行。</li></ul><h2 id="二、愿"><a href="#二、愿" class="headerlink" title="二、愿"></a>二、愿</h2><ul><li><a class="link"   href="https://youtu.be/TupysCEEJHA" >【淨薈主辦】常霖法師講「學佛修行信願行」之二: 願 - YouTube<i class="fas fa-external-link-alt"></i></a><br>1、 佛缘 -&gt; 佛愿，由因-&gt;果，被动-&gt;主动，清楚自己想要什么，愿意做，并且坚持做，直到达成所愿。</li></ul><h2 id="三、行"><a href="#三、行" class="headerlink" title="三、行"></a>三、行</h2><ul><li><a class="link"   href="https://youtu.be/Qizh3j_GPG4" >【淨薈主辦】常霖法師講「學佛修行信願行」之三: 行 - YouTube<i class="fas fa-external-link-alt"></i></a></li><li>一念一动一缘生</li><li>学佛，学菩萨<ul><li>观世音菩萨，喜欢帮助众生</li><li>地藏菩萨，没有什么做不了的事情，有心者事竟成</li><li>逆行菩萨，针对你搞你，但是在这个过程中你可以学习和进步，最终其实是帮助你</li></ul></li><li>打座是提升你的觉察力</li><li>一切都是最好的安排</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、信：眾生皆可成佛，包含世界萬物，一草一木。&quot;&gt;&lt;a href=&quot;#一、信：眾生皆可成佛，包含世界萬物，一草一木。&quot; class=&quot;headerlink&quot; title=&quot;一、信：眾生皆可成佛，包含世界萬物，一草一木。&quot;&gt;&lt;/a&gt;一、信：眾生皆可成佛，包含世界萬物</summary>
      
    
    
    
    <category term="认知-修行-平衡" scheme="http://example.com/categories/%E8%AE%A4%E7%9F%A5-%E4%BF%AE%E8%A1%8C-%E5%B9%B3%E8%A1%A1/"/>
    
    
    <category term="佛学" scheme="http://example.com/tags/%E4%BD%9B%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>停一停 心呼吸 每日銘言 202307</title>
    <link href="http://example.com/2023/02/03/%E5%BF%83%E9%9D%92%E5%B9%B4-202307/"/>
    <id>http://example.com/2023/02/03/%E5%BF%83%E9%9D%92%E5%B9%B4-202307/</id>
    <published>2023-02-03T02:21:33.000Z</published>
    <updated>2023-07-16T01:40:53.428Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>日期</th><th>銘言</th></tr></thead><tbody><tr><td>7月16号</td><td><img src="/img/wuweiwu/zen_sayings/2023/07/16.jpg"></td></tr><tr><td>7月14号</td><td><img src="/img/wuweiwu/zen_sayings/2023/07/006.jpg"></td></tr><tr><td>7月12号</td><td><img src="/img/wuweiwu/zen_sayings/2023/07/005.jpg"></td></tr><tr><td>7月9号</td><td><img src="/img/wuweiwu/zen_sayings/2023/07/004.jpg"></td></tr><tr><td>7月7号</td><td><img src="/img/wuweiwu/zen_sayings/2023/07/003.jpg"></td></tr><tr><td>7月6号</td><td><img src="/img/wuweiwu/zen_sayings/2023/07/002.jpg"></td></tr><tr><td>7月3号</td><td><img src="/img/wuweiwu/zen_sayings/2023/07/001.jpg"></td></tr><tr><td>7月2号</td><td><img src="/img/wuweiwu/zen_sayings/2023/07/000.jpg"></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;日期&lt;/th&gt;
&lt;th&gt;銘言&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;7月16号&lt;/td&gt;
&lt;td&gt;&lt;img src=&quot;/img/wuweiwu/zen_sayings/2023/07/16.jpg</summary>
      
    
    
    
    <category term="认知-修行-平衡" scheme="http://example.com/categories/%E8%AE%A4%E7%9F%A5-%E4%BF%AE%E8%A1%8C-%E5%B9%B3%E8%A1%A1/"/>
    
    
    <category term="佛学" scheme="http://example.com/tags/%E4%BD%9B%E5%AD%A6/"/>
    
  </entry>
  
</feed>
